import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,b as n,d as e,w as t,e as s,f as p}from"./app-e8360c54.js";const u={},k=p('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年07月13日23:49:21</td></tr></tbody></table><p>第一章：创建和销毁对象，主要包含下面 9 条。</p><ol><li>用静态工厂方法替代构造器；</li><li>遇到多个构造器参数时考虑使用 builder 模式；</li><li>用私有构造器或者枚举类型强化 Singleton 属性；</li><li>通过私有构造器强化不可实例化的能力；</li><li>优先考虑依赖注入来引用资源；</li><li>避免创建不必要的对象；</li><li>消除过期的对象引用；</li><li>避免使用终结方法和清除方法；</li><li>try-with-resources 优先于 try-finally；</li></ol><h2 id="用静态工厂方法替代构造器" tabindex="-1"><a class="header-anchor" href="#用静态工厂方法替代构造器" aria-hidden="true">#</a> 用静态工厂方法替代构造器</h2><p>一个类除了可以提供构造器之外，还可以提供一些见名知意的静态工厂方法去返回该类的实例。</p><h3 id="静态工厂方法的优点" tabindex="-1"><a class="header-anchor" href="#静态工厂方法的优点" aria-hidden="true">#</a> 静态工厂方法的优点</h3>',6),r=n("h3",{id:"静态工厂方法的缺点以及弥补方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#静态工厂方法的缺点以及弥补方式","aria-hidden":"true"},"#"),s(" 静态工厂方法的缺点以及弥补方式")],-1),d=n("p",null,"我们可以通过一些合适的命名来弥补静态工厂方法不容易被发现的劣势：",-1),v=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Instant</span> instant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>instant<span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),m=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">E</span> e1<span class="token punctuation">,</span> <span class="token class-name">E</span> e2<span class="token punctuation">,</span> <span class="token class-name">E</span> e3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ImmutableCollections</span><span class="token punctuation">.</span><span class="token function">listFromTrustedArray</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),b=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Calendar</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Locale</span> aLocale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token class-name">Locale<span class="token punctuation">.</span>Category</span><span class="token punctuation">.</span><span class="token constant">FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">createCalendar</span><span class="token punctuation">(</span><span class="token function">defaultTimeZone</span><span class="token punctuation">(</span>aLocale<span class="token punctuation">)</span><span class="token punctuation">,</span> aLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> componentType<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">NegativeArraySizeException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">newArray</span><span class="token punctuation">(</span>componentType<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">SecurityException</span> <span class="token punctuation">{</span>
    <span class="token function">checkMemberAccess</span><span class="token punctuation">(</span><span class="token class-name">Member</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">,</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">getConstructor0</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">,</span> <span class="token class-name">Member</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),h=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略具体实现 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f=p(`<h2 id="遇到多个构造器参数时考虑使用-builder-模式" tabindex="-1"><a class="header-anchor" href="#遇到多个构造器参数时考虑使用-builder-模式" aria-hidden="true">#</a> 遇到多个构造器参数时考虑使用 builder 模式</h2><h3 id="静态工厂和构造器的缺点" tabindex="-1"><a class="header-anchor" href="#静态工厂和构造器的缺点" aria-hidden="true">#</a> 静态工厂和构造器的缺点</h3><p>静态工厂和构造器有一个共同的缺点，它们在多个参数的情况下的扩展性并不好，例如有些参数可能是必填的，有些参数可能是可选的。先说两种并不是最优的处理：① 使用构造函数重载的方式去处理多个参数；② 创建好 JavaBean 后，调用对应的 set 方法；</p><ol><li>使用<strong>构造函数重载</strong>的方案的缺点是<strong>客户端调用起来不方便，而且比较难阅读</strong>；</li><li><strong>创建 JavaBean 后调用 set 方法去设置参数</strong>，缺点是在创建对象然后设置参数是多个步骤，也就是说在<strong>实例构造的过程中 JavaBean 可能处于不一致的状态</strong>，导致不可预知的错误；</li></ol><h3 id="建造者-builder-模式" tabindex="-1"><a class="header-anchor" href="#建造者-builder-模式" aria-hidden="true">#</a> 建造者 builder 模式</h3><p>上面两种解决方案并不是最优的，Effective Java 作者推荐使用 builder 模式，也就是建造者模式来处理多个参数的情况。看一个案例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token comment">// 必填</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> hobby<span class="token punctuation">;</span>  <span class="token comment">// 可选</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> career<span class="token punctuation">;</span> <span class="token comment">// 可选</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PersonBuilder</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> hobby<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> career<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">PersonBuilder</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PersonBuilder</span> <span class="token function">personBuilder</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PersonBuilder</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">PersonBuilder</span> <span class="token function">withHobby</span><span class="token punctuation">(</span><span class="token class-name">String</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> hobby<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">PersonBuilder</span> <span class="token function">withCareer</span><span class="token punctuation">(</span><span class="token class-name">String</span> career<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>career <span class="token operator">=</span> career<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            person<span class="token punctuation">.</span>career <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>career<span class="token punctuation">;</span>
            person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
            person<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hobby<span class="token punctuation">;</span>
            <span class="token keyword">return</span> person<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 name 是必填的属性，所以在创建 PersonBuilder 的时候必填，其余的属性在各自的 with 开头的方法里面去构建。调用方的构建代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token class-name">PersonBuilder</span><span class="token punctuation">.</span><span class="token function">personBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;千珏&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withCareer</span><span class="token punctuation">(</span><span class="token string">&quot;ADC&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withHobby</span><span class="token punctuation">(</span><span class="token string">&quot;印记&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类层次的建造者模式" tabindex="-1"><a class="header-anchor" href="#类层次的建造者模式" aria-hidden="true">#</a> 类层次的建造者模式</h3><p><strong>抽象类有抽象的 builder，具体类有具体的 builder。</strong></p><p>先看一个抽象的 Phone 类，Phone 类内部有一个抽象的 Builder，需要子类实现的方法有两个：</p><ol><li>一个是 build 方法，构建一个 Phone 对象出来；</li><li>一个是 self 方法，该方法需要子类实现返回 “this”，用来组成链式调用；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span> <span class="token comment">// 品牌</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> size<span class="token punctuation">;</span>  <span class="token comment">// 尺寸</span>

    <span class="token keyword">public</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> builder<span class="token punctuation">.</span>brand<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> builder<span class="token punctuation">.</span>size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span> <span class="token comment">// 品牌</span>
        <span class="token keyword">private</span> <span class="token class-name">Double</span> size<span class="token punctuation">;</span>  <span class="token comment">// 尺寸</span>

        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">withBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">withSize</span><span class="token punctuation">(</span><span class="token class-name">Double</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/* 构建一个实例 */</span>
        <span class="token keyword">abstract</span> <span class="token class-name">Phone</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* 子类必须重载这个方法，返回 &#39;this&#39; */</span>
        <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">T</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看一个子类 SmartPhone 的实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SmartPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> games3D<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SmartPhone</span><span class="token punctuation">(</span><span class="token class-name">SmartPhoneBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>games3D <span class="token operator">=</span> builder<span class="token punctuation">.</span>games3D<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SmartPhoneBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Phone<span class="token punctuation">.</span>Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SmartPhoneBuilder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> games3D<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">SmartPhoneBuilder</span> <span class="token function">withGames3D</span><span class="token punctuation">(</span><span class="token class-name">String</span> games3D<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>games3D <span class="token operator">=</span> games3D<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SmartPhone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">SmartPhoneBuilder</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartPhone<span class="token punctuation">.</span>SmartPhoneBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withBrand</span><span class="token punctuation">(</span><span class="token string">&quot;小米&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withSize</span><span class="token punctuation">(</span><span class="token number">7.2</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withGames3D</span><span class="token punctuation">(</span><span class="token string">&quot;小米枪战&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类的构建器中的 build 方法，都声明返回正确的子类。例如在子类 SmartPhone 中的 build 方法就是返回的 SmartPhone 对象实例。</p><h3 id="builder-模式应用场景" tabindex="-1"><a class="header-anchor" href="#builder-模式应用场景" aria-hidden="true">#</a> builder 模式应用场景</h3><p><strong>如果类的构造器或者静态工厂方法中有多个参数，设计这种类的时候，可以考虑 Builder 模式。</strong></p><h3 id="builder-模式的优缺点" tabindex="-1"><a class="header-anchor" href="#builder-模式的优缺点" aria-hidden="true">#</a> builder 模式的优缺点</h3>`,22),S=n("p",null,"缺点：",-1),j=n("li",null,"builder 模式比构造函数重载还要冗长，所以它只有在多个参数的时候才使用，比如 4 个或者更多个参数；",-1),_=p(`<blockquote><p>如果某个类的参数比较多，建议一开始就使用 builder 模式。如果一开始使用的是构造函数或者静态工厂方法，后面参数变多后又改为 builder 模式的话，这时候之前那些过时的构造函数和静态工厂方法就会显得不协调了。</p></blockquote><h2 id="用私有构造器或者枚举类型强化-singleton-属性" tabindex="-1"><a class="header-anchor" href="#用私有构造器或者枚举类型强化-singleton-属性" aria-hidden="true">#</a> 用私有构造器或者枚举类型强化 Singleton 属性</h2><blockquote><p>其实就是单例模式的一些写法，但是本次并不是分析单例模式有多少次写法，这里主要阐述的是作者在文中的观点</p></blockquote><h3 id="实现单例的两种写法" tabindex="-1"><a class="header-anchor" href="#实现单例的两种写法" aria-hidden="true">#</a> 实现单例的两种写法</h3><p>第一种就是直接使用一个 public 的静态的 final 域，私有化构造函数。为了防止反射创建实例，在构造函数中做了判空处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Person</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;请不要重复构造!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你好...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种和上面差不多，只不过是使用的静态工厂方法返回单例对象。也是需要私有化构造函数，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Person</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;请不要重复构造!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你好...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="防止反序列化破坏单例" tabindex="-1"><a class="header-anchor" href="#防止反序列化破坏单例" aria-hidden="true">#</a> 防止反序列化破坏单例</h3><p>为了防止反序列化创建一个新的实例，可以在类中增加一个 readResolve() 方法，并返回单例对象。这样就可以防止反序列化破坏单例。具体的原理是反序列化的时候会判断当前类中是否有 readResolve() 方法，如果有的话就会直接拿 readResolve() 方法的返回值作为反序列化后得到的实例。</p><p>具体的源码可以去看 java.io.ObjectInputStream#readOrdinaryObject 的实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Person</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;古拉加斯大肚子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;请不要重复构造!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用了 readResolve() 方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; 说你好...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用枚举实现单例模式" tabindex="-1"><a class="header-anchor" href="#使用枚举实现单例模式" aria-hidden="true">#</a> 使用枚举实现单例模式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token constant">JIU_TONG</span><span class="token punctuation">;</span> <span class="token comment">// 酒桶</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你好...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token constant">JIU_TONG</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用枚举实现单例是一个最简单的方式，Java 对枚举的处理已经保证单个枚举值是单例的了，而且无法通过反射和序列化去破坏单例。可以去反编译查看枚举的源码，就可以得到答案。</p><h2 id="通过私有构造器强化不可实例化的能力" tabindex="-1"><a class="header-anchor" href="#通过私有构造器强化不可实例化的能力" aria-hidden="true">#</a> 通过私有构造器强化不可实例化的能力</h2><p><strong>有些工具类提供了一些静态方法，其实我们并不需要实例化工具类，因为实例化它们是没有意义的，我们可以在工具类中提供一个私有的构造函数来防止它被实例化。</strong></p><p>例如 JDK 的 java.lang.Math 类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Don&#39;t let anyone instantiate this class.
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token comment">// ...... 省略其他 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>又比如 JDK 的 java.util.Arrays</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Arrays</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...... 省略其他 ......</span>

    <span class="token comment">// Suppresses default constructor, ensuring non-instantiability.</span>
    <span class="token keyword">private</span> <span class="token class-name">Arrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
    <span class="token comment">// ...... 省略其他 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>私有构造函数带来的问题就是无法子类化该类，因为子类无法调用父类的 private 的构造函数。</p><h2 id="优先考虑依赖注入来引用资源" tabindex="-1"><a class="header-anchor" href="#优先考虑依赖注入来引用资源" aria-hidden="true">#</a> 优先考虑依赖注入来引用资源</h2><p>这个意思其实就是说，假如某个类依赖了另外一个类的功能，优先考虑依赖注入的方式。看个案例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClusterApi</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">HaService</span> haService<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LoadBalance</span> loadBalance<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ClusterApi</span><span class="token punctuation">(</span><span class="token class-name">HaService</span> haService<span class="token punctuation">,</span> <span class="token class-name">LoadBalance</span> loadBalance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>haService <span class="token operator">=</span> haService<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>loadBalance <span class="token operator">=</span> loadBalance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">HaService</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LoadBalance</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如 ClusterApi 是集群相关的 API 类，内部需要使用 HA 高可用和负载均衡的服务的功能，那么可以通过依赖注入的方式注入到 ClusterApi 中。</p><blockquote><p>这样看起来好像我们平时开发一直在用依赖注入啊，其实这些都是 Spring 帮我们做好了，我们自然而然的就用了。</p></blockquote><h2 id="避免创建不必要的对象" tabindex="-1"><a class="header-anchor" href="#避免创建不必要的对象" aria-hidden="true">#</a> 避免创建不必要的对象</h2><p>一般来说，最好重用单个对象，而不是每次需要的时候就创建一个相同功能的新对象。如果对象是不可变（immutable）的对象，它就始终可以被重用。</p><p>看几个案例：</p>`,30),x=n("li",null,[n("p",null,[s("关于 String 对象的创建，如果使用 "),n("code",null,'String s = new String("nihao")'),s(" 创建字符串，入参 "),n("code",null,"nihao"),s(" 其实就是一个 String 实例，这样就会多创建 String 实例。建议直接使用 "),n("code",null,'String s = "nihao"'),s("，因为在 JVM 中有个字符串常量池，会重用字符串；")])],-1),P=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 假如 i 的大小命中了缓存，直接返回缓存中的对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 未命中缓存则新建一个 Integer 对象</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),I=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> ks <span class="token operator">=</span> keySet<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ks <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        keySet <span class="token operator">=</span> ks<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ks<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),E=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Long</span> boxSum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> boxStart <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    boxSum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;box waste time, &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> boxStart<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> unboxSum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> unboxStart <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unboxSum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;unbox waste time, &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> unboxStart<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台打印如下，可以看到没有自动装箱的操作花费的时间大大减少了。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>box waste time, 4415ms.
unbox waste time, 862ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),B=n("h2",{id:"消除过期的对象引用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#消除过期的对象引用","aria-hidden":"true"},"#"),s(" 消除过期的对象引用")],-1),C=n("h3",{id:"隐蔽的内存泄漏问题及解决方案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#隐蔽的内存泄漏问题及解决方案","aria-hidden":"true"},"#"),s(" 隐蔽的内存泄漏问题及解决方案")],-1),A=n("h3",{id:"注意点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#注意点","aria-hidden":"true"},"#"),s(" 注意点")],-1),q=p(`<p>关于内存泄漏的来源有下面几种：</p><ol><li><strong>只要是类自己管理内存，程序员就应该警惕内存泄漏的问题</strong>；常见的如数组的元素，后面再举一个 RocketMQ 的例子；</li><li><strong>缓存也是内存泄漏的一个来源（这里的缓存是本地缓存的概念）</strong>，因为”缓存项的生命周期是否有意义“并不容器被确定，所以应该时不时的清除调没有用的数据。例如可以通过 java.util.LinkedHashMap#removeEldestEntry 来实现一个 LRU；</li><li><strong>内存泄漏的第三个常见来源是监听器和其他回调</strong>。 如果你实现了一个 API，客户端在这个 API 中注册回调，却没有显式地取消注册，那么除非你采取某些动作，否则它们就会不断地堆积起来 。</li></ol><h3 id="简易栈的问题以及解决方案" tabindex="-1"><a class="header-anchor" href="#简易栈的问题以及解决方案" aria-hidden="true">#</a> 简易栈的问题以及解决方案</h3><p>先看下作者给的案例，一个简易栈的实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elements<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStackException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> elements<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">==</span> size<span class="token punctuation">)</span>
            elements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 pop 方法会出现比较隐蔽的内存泄漏，关键点就是在 <code>elements[--size]</code> 这里，我们只是将 size 减 1 了，这样之前的元素只是我们访问不到了，并没有被删除，它和它引用的那些对象都不会被垃圾回收器回收，这就出现了内存泄漏了。解决方案如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStackException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> result <span class="token operator">=</span> elements<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    elements<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Eliminate obsolete reference</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是显示的将用不到的对象置空就行了，help gc。</p><h3 id="rocketmq-中的案例" tabindex="-1"><a class="header-anchor" href="#rocketmq-中的案例" aria-hidden="true">#</a> RocketMQ 中的案例</h3><p>RocketMQ 中的消费者需要去 broker 拉取消息去消费，其中 broker 的返回对象如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PullResultExt</span> <span class="token keyword">extends</span> <span class="token class-name">PullResult</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> suggestWhichBrokerId<span class="token punctuation">;</span>
    <span class="token comment">// 从网络中读取消息列表中的属性</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messageBinary<span class="token punctuation">;</span>
 
	<span class="token comment">// ...... 省略其他 ......   </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 messageBinary 是 broker 返回的消息的字节数组，消费者这边需要进行解码，解码代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">PullResult</span> <span class="token function">processPullResult</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> mq<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">PullResult</span> pullResult<span class="token punctuation">,</span>
	<span class="token keyword">final</span> <span class="token class-name">SubscriptionData</span> subscriptionData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">PullResultExt</span> pullResultExt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PullResultExt</span><span class="token punctuation">)</span> pullResult<span class="token punctuation">;</span>

	<span class="token comment">// ...... 省略其他处理 ......</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">PullStatus</span><span class="token punctuation">.</span><span class="token constant">FOUND</span> <span class="token operator">==</span> pullResult<span class="token punctuation">.</span><span class="token function">getPullStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 消息转换成 ByteBUffer</span>
		<span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>pullResultExt<span class="token punctuation">.</span><span class="token function">getMessageBinary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 解码</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgList <span class="token operator">=</span> <span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">decodes</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// ...... 省略过滤处理 ......</span>

		<span class="token comment">// 将再次过滤后的消息 list，保存到 pullResult 中</span>
		pullResultExt<span class="token punctuation">.</span><span class="token function">setMsgFoundList</span><span class="token punctuation">(</span>msgListFilterAgain<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// help gc</span>
	pullResultExt<span class="token punctuation">.</span><span class="token function">setMessageBinary</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> pullResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键点就是将 byte 数组转码成消费者识别的对象后，保存到新的字段中去了，最后会将字节数组字段置空，help gc，就是 <code>pullResultExt.setMessageBinary(null)</code></p><h2 id="避免使用终结方法和清除方法" tabindex="-1"><a class="header-anchor" href="#避免使用终结方法和清除方法" aria-hidden="true">#</a> 避免使用终结方法和清除方法</h2><p>终结方法（finalizer）通常是不可预测的，也是很危险的，一般情况下是不必要的。使用终结方法会导致行为不稳定、性能降低，以及可移植性的问题。一般需要避免使用终结方法。在 Java9 中用清除方法（cleaner）代替了终结方法。清除方法没有终结方法那么危险，但仍然是不可预测、运行缓慢的，一般情况也是不建议使用的。</p><p>终结方法和清除方法都有的问题：</p><ul><li>终结方法和清除方法有非常严重的性能损失；</li><li>终结方法和清除方法不保证会被及时执行，当一个对象被视为不可达时，才会去调用它们的终结方法或清除方法，这段时间是无法控制的，这个现象在不同的 JVM 中的效果也是不一样的；</li></ul><p>终结方法独有的问题：</p><ul><li>调用终结方法的线程是一个低优先级的线程，所以终结方法的执行效率在某些情况下可能并不高；</li><li>终结方法还有一个问题是，如果忽略在终结过程中被抛出来的未被捕获的异常，该对象的终结过程也会被终止。如果异常发生在终结方法中，并不会打印出栈轨迹，甚至连警告都不会打印出来；</li></ul>`,20),T=p(`<h2 id="try-with-resources-优先于-try-finally" tabindex="-1"><a class="header-anchor" href="#try-with-resources-优先于-try-finally" aria-hidden="true">#</a> try-with-resources 优先于 try-finally</h2><p>Java 类库中有许多需要通过 close 方法来手动关闭的资源。例如 InputStream、OutputStream 和 java.sql.Connection。但是客户端往往会忘记关闭资源。</p><p>try-finally 语句是确保资源关闭的最佳方式，就算发送异常或者返回也会调用 finally 后的语句。但是 try-finally 对关闭多个资源并不友好，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

<span class="token comment">// try-finally is ugly when used with more than one resource! (Page 34)</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span> <span class="token class-name">String</span> dst<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token constant">BUFFER_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> n<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Java7 引入了 try-with-resource 的语句。使用这个语句的前提是，要被 close 的资源必须实现 AutoCloseable 接口，其中包含了单个返回 void 的 close 方法。Java 类库和其他第三方类库中，现在都实现或者扩展了 AutoCloseable 接口。如果编写了一个类，它代表的是必须关闭的资源，那么这个类也应该实现 AutoCloseable 接口</strong>。上面的案例改造如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

<span class="token comment">// try-with-resources on multiple resources - short and sweet (Page 35)</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span> <span class="token class-name">String</span> dst<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span>   in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token constant">BUFFER_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function R(N,M){const a=o("font");return l(),i("div",null,[k,n("ol",null,[n("li",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("静态工厂方法可以自定义方法名，达到见名知意的效果")]),_:1})]),s("，而构造器的方法名只能有一种。虽然构造器可以重载，但是如果重载的构造器过多的话，会对增加使用的难度，调用者还要斟酌用哪个构造器；")]),n("li",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("静态工厂方法不用每次调用都返回一个新的对象，可以做一些缓存机制")]),_:1})]),s("（eg.单例模式和享元模式）；")]),n("li",null,[s("**"),e(a,{color:"purple"},{default:t(()=>[s("静态工厂方法可以返回类型的子类型")]),_:1}),s("，**这样可以屏蔽一些不是 public 的子类的实现，减少调用者的使用难度。例如在 JDK 的集合框架中有这样一个类 java.util.Collections，这个类中提供了不可修改的集合、 同步集合的实现，这样可以通过调用 API 直接返回带有指定特性（不可修改、同步等）的集合，这样我们的 API 调用者就不用去关系其内部的子类是如何实现这些特性的；")]),n("li",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("静态工厂方法可以按照入参返回不同的子类型")]),_:1})]),s("；")]),n("li",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("静态工厂方法返回的对象所属的类，在编写该静态工厂方法的时候可以不存在")]),_:1})]),s("；这个有点典型的案例有 SPI 机制（Service Provider Interface），SPI 是一种用于实现松耦合、可扩展插件系统的机制，它允许应用程序在运行时发现和加载某个特定服务接口的提供者。JDK 自带的 ServiceLoader 类实现了 SPI 机制，还有其他开源框架中有大量的 SPI 的案例（JDBC、日志门面、motan rpc、dubbo、spring 等）；")])]),r,n("ol",null,[n("li",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("类如果没有提供 public 和 protected 修饰的构造器，就不能被子类化")]),_:1})]),s("，也就是说不能继承这个类。不过这样也有个好处就是我们可以多多使用组合，而不是继承；")]),n("li",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("静态工厂方法不容易被程序员发现")]),_:1})]),s("。 Java 自带的 API 文档会把构造器明确的标注出来，但是我们写的静态工厂方法并不容易被发现；")])]),d,n("ul",null,[n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("from")]),_:1})]),s("：类型转换的方法，只有单个参数，返回该类型的一个实例。例如 java.util.Date#from 方法")]),v]),n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("of")]),_:1})]),s("：聚合方法，带有多个参数，返回该类型的一个实例，把它们合并起来。例如 java.util.List#of(E, E, E) 系列方法返回一个不可变的 List 实例（JDK 9 之后）。")]),m]),n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("valueOf")]),_:1})]),s("：例如 java.lang.Integer#valueOf(java.lang.String) 方法")]),b]),n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("instance 或者 getInstance")]),_:1})]),s("：获取一个实例，静态工厂方法可以有参数，也可以没有参数，没有参数的可以视为默认的实现。例如：java.util.Calendar#getInstance()")]),y]),n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("create 或者 newInstance")]),_:1})]),s("：获取一个实例，这个命名强调的是每次都返回一个新的实例。例如：java.lang.reflect.Array#newInstance(java.lang.Class<?>, int)")]),w]),n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("getType")]),_:1})]),s("：这里的 type 表示静态工厂方法需要返回的对象的类型的名字，主要是工厂方法处于不同的类中的时候使用。例如：java.lang.Class#getConstructor")]),g]),n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("newType")]),_:1})]),s("：这里的 type 表示静态工厂方法需要返回的对象的类型的名字，主要是工厂方法处于不同的类中的时候使用。例如：java.lang.Class#newInstance")]),h])]),f,n("p",null,[s("优点："),n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("Builder 模式比较灵活，可以灵活控制赋值那些参数，可以很好的赋值那些可选的参数")]),_:1})]),s("；")]),S,n("ol",null,[n("li",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("为了创建对象，必须先创建它的构建器（就是内部的 Builder 类）")]),_:1})]),s("。虽然创建这个构建器的开销并不是很大，如果是某些十分注重性能的情况下，可能就有问题了；")]),j]),_,n("ul",null,[x,n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("对于一个类中同时存在构造函数和静态工厂方法的情况，建议直接使用静态工厂方法，以避免创建不必要的对象")]),_:1})]),s("。例如在 java.lang.Integer#valueOf 系列方法中实现了缓存机制，如果没有命中缓存才会去创建 Integer 实例，可以避免创建多个实例；")]),P]),n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("如果某些对象的创建的代价比较大，那么我们可以考虑对象池的机制，重用这些对象。例如数据库连接池和线程池都是对象池使用的体现")]),_:1})]),s("。需要注意的是对于那些创建和回收代价很小的小对象，就不适合使用对象池来重用这些对象了；")])]),n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("如果一个对象是不可变的，那么这个对象肯定是可以被安全重用的，但是其他有些情况并不总是这么明显。可以考虑适配器（adapter）的情形，有时也叫识图（view）")]),_:1})]),s("。举个例子吧，比如 HashMap 的 java.util.HashMap#keySet 方法，每次返回 Map 对象的 Set 视图。这里很明显看到每次返回都是返回相同的 keySet 实例。")]),I]),n("li",null,[n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("对应 Java 的基本类型的装箱和拆箱需要注意一下，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱")]),_:1})]),s("。")]),E])]),B,C,n("p",null,[s("在支持垃圾回收的语言中，内存泄漏是十分隐蔽的，作者称这类内存泄漏为 “无意识的对象保持” （unintentional object retention）。"),n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("如果一个对象引用被无意识地保留起来了，那么垃圾回收机制不仅不会处理这个对象，而且也不会处理被这个对象所引用的所有其他对象，从而对性能造成潜在的重大影响。")]),_:1})])]),n("p",null,[s("修复方案非常简单："),n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("一旦对象引用已经过期，只需清空这些引用即可")]),_:1})]),s("。")]),A,n("p",null,[n("strong",null,[e(a,{color:"green"},{default:t(()=>[s("对于程序再也用不到的那些对象，没有必要每次都去置空，这样做会把程序代码弄得很乱。清空对象引用应该是一种例外，而不是一种规范行为。《深入理解 Java 虚拟机》中也说过类似的话：在需要 “不使用的对象应手动赋值为null“ 时大胆去用，但不应当对其有过多依赖，更不能当作是一个普遍规则来推广")]),_:1})]),s("。")]),q,n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("小结就是：不要使用终结方法和清除方法")]),_:1})]),s("。")]),T,n("p",null,[n("strong",null,[e(a,{color:"purple"},{default:t(()=>[s("小结：在处理必须关闭的资源时，始终要优先考虑用 try-with-resources，而不是用 try-finally。这样得到的代码将更加简洁、清晰，产生的异常也更有价值。")]),_:1})])])])}const L=c(u,[["render",R],["__file","01-创建和销毁对象.html.vue"]]);export{L as default};
