import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as t}from"./app-2cb45ef8.js";const e="/assets/Netty的SingleThreadEventExecutor的执行器状态-39e5686f.png",p="/assets/shutdownGracefully方法流程-964b2d7c.png",o="/assets/NioEventLoop的run方法检查关闭状态的流程-228367b6.png",c="/assets/NioEventLoop的线程状态关闭流程-bbfc6d0d.png",i={},l=t(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年2月18日18:34:24</td></tr><tr><td>V2</td><td>重构</td><td>2023年05月23日22:08:02</td></tr></tbody></table><h2 id="nioeventloop-的状态" tabindex="-1"><a class="header-anchor" href="#nioeventloop-的状态" aria-hidden="true">#</a> NioEventLoop 的状态</h2><p>再次回顾下 Reactor 线程的状态，具体定义在 io.netty.util.concurrent.SingleThreadEventExecutor 类中，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_NOT_STARTED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_STARTED</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_SHUTTING_DOWN</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_SHUTDOWN</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_TERMINATED</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>ST_NOT_STARTED</strong>：Reactor 线程刚初始化的默认状态，此时执行器的线程还未启动；</li><li><strong>ST_STARTED</strong>：表示线程已经成功调用了 <code>startThread();</code> 方法，此时会调用子类的 run 方法，子类的 run 方法一般都是死循环，除非调用了关闭执行器的方法。此时执行器已经是开启状态了；</li><li><strong>ST_SHUTTING_DOWN</strong>：表示线程调用了关闭执行器的方法，如<code>shutdownGracefully()</code>。这个状态会将 schedule 队列里的调度任务都 cancel 掉，然后运行 taskQueue 中的所有普通任务和 shutdownHooks 关闭的钩子任务。Netty 会根据设置的静默期和超时时间来决定是否在关闭期间接收任务；</li><li><strong>ST_SHUTDOWN</strong>：ST_SHUTTING_DOWN 状态下在一段时间没有新的任务加入或者等待超时时才会切换到这个状态，（直接调用 <code>shutdown()</code> 方法也会直接切到这个状态），这个状态是不接受新的任务的；</li><li><strong>ST_TERMINATED</strong>：当执行器中的资源清理完成，任务也全部完成后就会修改成这个状态；</li></ul><p><img src="`+e+`" alt="Netty的SingleThreadEventExecutor的执行器状态"></p><h2 id="优雅关闭的参数" tabindex="-1"><a class="header-anchor" href="#优雅关闭的参数" aria-hidden="true">#</a> 优雅关闭的参数</h2><p>在 io.netty.util.concurrent.AbstractEventExecutor 中定义了空参的 shutdownGracefully() 方法，它的默认参数如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 调用 shutdownGracefully 方法默认静默期时间</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">DEFAULT_SHUTDOWN_QUIET_PERIOD</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 shutdownGracefully 方法默认 shutdown 超时时间</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">DEFAULT_SHUTDOWN_TIMEOUT</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_SHUTDOWN_QUIET_PERIOD</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_SHUTDOWN_TIMEOUT</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于这两个参数的详细解释如下：</p><ul><li>DEFAULT_SHUTDOWN_QUIET_PERIOD：优雅关闭的静默期，默认是 2 秒钟。在关闭流程开始后，如果任务队列中还有异步任务需要执行，此时需要等待这些异步任务执行完毕后才可以走关闭的操作了，这样做就尽可能的保障业务正常。对于默认值 2s 来说，它的含义如下： <ul><li><strong>在静默期 2 秒内如果没有新的任务提交，则执行关闭</strong>线程池的流程;</li><li><strong>每个静默期 2 秒内有新的任务提交了，此时会添加 WAKEUP_TASK 任务唤醒线程去执行任务；</strong></li></ul></li><li>DEFAULT_SHUTDOWN_TIMEOUT：优雅关闭的超时时间，默认 15 秒钟，主要保证 Netty 整个关闭过程中的时间可控，不可能只要有异步任务我们就执行，超过了这个时间，无论此时有无异步任务需要执行都要开始关闭了。对于默认值 15s 来说，它的含义是<strong>无论在静默期内是否有提交任务，超过 15 秒就不允许提交任务了；</strong></li></ul><h2 id="reactor-线程关闭时的钩子方法" tabindex="-1"><a class="header-anchor" href="#reactor-线程关闭时的钩子方法" aria-hidden="true">#</a> Reactor 线程关闭时的钩子方法</h2><p>在真正分析优雅关闭前，先要了解一下 Netty 的 Reactor 线程的关闭时的钩子方法。</p><p>SingleThreadEventExecutor#addShutdownHook，可以添加钩子方法，这些方法会在 Reactor 线程关闭时执行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Add a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Runnable</span></span><span class="token punctuation">}</span> which will be executed on shutdown of this instance
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        shutdownHooks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                shutdownHooks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要注意的是：这个 ShutdownHook，不是 JDK 的 JVM 关闭时的钩子函数，这个只是 Netty 自己实现的一个机制</p></blockquote><h2 id="reactor-线程组的优雅关闭的入口" tabindex="-1"><a class="header-anchor" href="#reactor-线程组的优雅关闭的入口" aria-hidden="true">#</a> Reactor 线程组的优雅关闭的入口</h2><p>还是拿 Netty 自带的案例里面的代码来说吧，io.netty.example.echo.EchoServer。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">EventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">EventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建了一个主 Reactor 线程组和一个从 Reactor 线程组，EventLoopGroup 内部使用一个 EventExecutor 类型的数组来保存 Reactor 线程，比如 NioEventLoop。</p><p>关于 Reactor 线程组的优雅关闭的 API 入口如下：io.netty.util.concurrent.MultithreadEventExecutorGroup#shutdownGracefully</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token keyword">long</span> quietPeriod<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过循环遍历，关闭所管理的所有子事件轮询器 EventExecutor</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EventExecutor</span> l<span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span>quietPeriod<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">terminationFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到其实就是将 Reactor 线程组中的所有 Reactor 线程都优雅关闭。最后返回 <code>terminationFuture()</code></p><p>这里再回顾下 EventLoopGroup 中创建 NioEventLoop 中的添加终止监听的部分逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">MultithreadEventExecutorGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">,</span>
                                        <span class="token class-name">EventExecutorChooserFactory</span> chooserFactory<span class="token punctuation">,</span> 
                                        <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略其他逻辑 ......</span>

    <span class="token keyword">final</span> <span class="token class-name">FutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> terminationListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>terminatedChildren<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                terminationFuture<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 为每个EventLoop线程添加添加线程终止监听</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EventExecutor</span> e<span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">terminationFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>terminationListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...... 省略其他逻辑 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里也可以看到，在 EventLoopGroup 初始化的最后一步，会定义一个 terminationListener 终止监听，当所有的 NioEventLoop 都优雅关闭了之后，就会设置 EventLoopGroup 的 terminationFuture 为 success 。</p><h2 id="reactor-线程的优雅关闭的入口" tabindex="-1"><a class="header-anchor" href="#reactor-线程的优雅关闭的入口" aria-hidden="true">#</a> Reactor 线程的优雅关闭的入口</h2><p>在上面一节已经分析过，Reactor 线程组的优雅关闭就是循环调用各个 Reactor 线程的 shutdownGracefully() 方法。</p><p>先看下调用 shutdownGracefully() 方法，Reactor 线程会发生什么事情（比如 NioEventLoop）</p><img src="`+p+`" alt="shutdownGracefully方法流程" style="zoom:67%;"><p>接下来我们分析下 io.netty.util.concurrent.SingleThreadEventExecutor#shutdownGracefully 方法的实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token keyword">long</span> quietPeriod<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkPositiveOrZero</span><span class="token punctuation">(</span>quietPeriod<span class="token punctuation">,</span> <span class="token string">&quot;quietPeriod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> quietPeriod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 假如执行器的关闭的超时时间timeout小于静默期时间quietPeriod，则报错</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;timeout: &quot;</span> <span class="token operator">+</span> timeout <span class="token operator">+</span> <span class="token string">&quot; (expected &gt;= quietPeriod (&quot;</span> <span class="token operator">+</span> quietPeriod <span class="token operator">+</span> <span class="token string">&quot;))&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>unit<span class="token punctuation">,</span> <span class="token string">&quot;unit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果当前执行器状态已经开始关闭，那么返回 terminationFuture()</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShuttingDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">terminationFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> inEventLoop <span class="token operator">=</span> <span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> wakeup<span class="token punctuation">;</span>
    <span class="token keyword">int</span> oldState<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前执行器状态已经开始关闭，那么返回 terminationFuture()</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShuttingDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">terminationFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> newState<span class="token punctuation">;</span>
        wakeup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        oldState <span class="token operator">=</span> state<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>inEventLoop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果当前线程是执行器线程，新的执行器状态 newState 就是 ST_SHUTTING_DOWN</span>
            <span class="token comment">// 这是因为当前线程是 eventLoop 线程，状态改变只会在 eventLoop 线程改变，所以这里可以直接赋值</span>
            newState <span class="token operator">=</span> <span class="token constant">ST_SHUTTING_DOWN</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 当前线程不是执行器线程，需要分情况判断</span>
            <span class="token comment">// 因为在某个时刻 eventLoop 线程可能会改变执行器的状态</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">ST_NOT_STARTED</span><span class="token operator">:</span>
                <span class="token keyword">case</span> <span class="token constant">ST_STARTED</span><span class="token operator">:</span>
                    <span class="token comment">// 只有当原来执行器状态是 未开始 和 已开始，</span>
                    <span class="token comment">// 新的执行器状态 newState 才是 ST_SHUTTING_DOWN</span>
                    newState <span class="token operator">=</span> <span class="token constant">ST_SHUTTING_DOWN</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token comment">// 否则还维持原样</span>
                    newState <span class="token operator">=</span> oldState<span class="token punctuation">;</span>
                    wakeup <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 用 CAS 的方式原子化更新执行器状态，如果不成功，那么就在 for 循环中继续</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> oldState<span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    gracefulShutdownQuietPeriod <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>quietPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gracefulShutdownTimeout <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 确保线程正常启动</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ensureThreadStarted</span><span class="token punctuation">(</span>oldState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> terminationFuture<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>wakeup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 唤醒可能阻塞的执行器线程，执行任务</span>
        taskQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token constant">WAKEUP_TASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>addTaskWakesUp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">wakeup</span><span class="token punctuation">(</span>inEventLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">terminationFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第一步-检查线程状态" tabindex="-1"><a class="header-anchor" href="#第一步-检查线程状态" aria-hidden="true">#</a> 第一步：检查线程状态</h3><p>首先判断 Reactor 线程的状态，如果已经是大于 ST_SHUTTING_DOWN 状态了，就直接返回了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 如果当前执行器状态已经开始关闭，那么返回 terminationFuture()</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShuttingDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">terminationFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 isShuttingDown() 方法的实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 表示当前执行器状态是开始shutdown之后，
 * 即包括 开始shutdown，完全shutdown和完全终止terminated
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isShuttingDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state <span class="token operator">&gt;=</span> <span class="token constant">ST_SHUTTING_DOWN</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二步-for-循环修改线程状态" tabindex="-1"><a class="header-anchor" href="#第二步-for-循环修改线程状态" aria-hidden="true">#</a> 第二步：for 循环修改线程状态</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> inEventLoop <span class="token operator">=</span> <span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> wakeup<span class="token punctuation">;</span>
<span class="token keyword">int</span> oldState<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果当前执行器状态已经开始关闭，那么返回 terminationFuture()</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShuttingDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">terminationFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> newState<span class="token punctuation">;</span>
    wakeup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    oldState <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inEventLoop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前线程是执行器线程，新的执行器状态 newState 就是 ST_SHUTTING_DOWN</span>
        <span class="token comment">// 这是因为当前线程是 eventLoop 线程，状态改变只会在 eventLoop 线程改变，所以这里可以直接赋值</span>
        newState <span class="token operator">=</span> <span class="token constant">ST_SHUTTING_DOWN</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 当前线程不是执行器线程，需要分情况判断</span>
        <span class="token comment">// 因为在某个时刻 eventLoop 线程可能会改变执行器的状态</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">ST_NOT_STARTED</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token constant">ST_STARTED</span><span class="token operator">:</span>
                <span class="token comment">// 只有当原来执行器状态是 未开始 和 已开始，</span>
                <span class="token comment">// 新的执行器状态 newState 才是 ST_SHUTTING_DOWN</span>
                newState <span class="token operator">=</span> <span class="token constant">ST_SHUTTING_DOWN</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token comment">// 否则还维持原样</span>
                newState <span class="token operator">=</span> oldState<span class="token punctuation">;</span>
                wakeup <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 用 CAS 的方式原子化更新执行器状态，如果不成功，那么就在 for 循环中继续</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> oldState<span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>for 循环内部，每次循环都调用 isShuttingDown() 方法检查 Reactor 线程的状态；</li><li>如果当前线程就是 Reactor 绑定的线程，说明当前 Reactor 线程的状态肯定是已经启动的，直接就可以赋值成 ST_SHUTTING_DOWN 状态。如果当前线程不是 Reactor 绑定的线程，需要根据情况来修改状态。如果已经是 ST_SHUTTING_DOWN 以及后面的状态了，就不改变 Reactor 线程的状态了，保持现状；</li><li>最后使用 CAS 的方式原子更新 Reactor 线程的状态，更新成功退出 for 循环，否则继续循环尝试更新；</li></ul><h3 id="第三步-赋值优雅关闭的参数" tabindex="-1"><a class="header-anchor" href="#第三步-赋值优雅关闭的参数" aria-hidden="true">#</a> 第三步：赋值优雅关闭的参数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>gracefulShutdownQuietPeriod <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>quietPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span>
gracefulShutdownTimeout <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>前面已经分析过着两个参数的含义了，这里就是把 shutdownGracefully() 方法的入参赋值给 io.netty.util.concurrent.SingleThreadEventExecutor 的属性了，这两个属性在 NioEventLoop#run 中的关闭逻辑中会用到，后面详细分析。</p><h3 id="第四步-确保线程正常启动" tabindex="-1"><a class="header-anchor" href="#第四步-确保线程正常启动" aria-hidden="true">#</a> 第四步：确保线程正常启动</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 确保线程正常启动</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ensureThreadStarted</span><span class="token punctuation">(</span>oldState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> terminationFuture<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行优雅关闭需要我们保证 Reactor 线程是正常启动的状态，因为优雅关闭期间还是可以执行任务的，需要线程是启动的状态。</p><p>io.netty.util.concurrent.SingleThreadEventExecutor#ensureThreadStarted</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">ensureThreadStarted</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldState <span class="token operator">==</span> <span class="token constant">ST_NOT_STARTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">doStartThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">ST_TERMINATED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            terminationFuture<span class="token punctuation">.</span><span class="token function">tryFailure</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Also rethrow as it may be an OOME for example</span>
                <span class="token class-name">PlatformDependent</span><span class="token punctuation">.</span><span class="token function">throwException</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第五步-唤醒可能阻塞的-reactor-线程" tabindex="-1"><a class="header-anchor" href="#第五步-唤醒可能阻塞的-reactor-线程" aria-hidden="true">#</a> 第五步：唤醒可能阻塞的 Reactor 线程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>wakeup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 唤醒可能阻塞的执行器线程，执行任务</span>
    taskQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token constant">WAKEUP_TASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>addTaskWakesUp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">wakeup</span><span class="token punctuation">(</span>inEventLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 wakeup 变量，只有线程是 ST_NOT_STARTED 和 ST_STARTED 状态才是 true，其他关闭相关的状态是 false。是 true 的情况下会向 taskQueue 队列中添加一个 WAKEUP_TASK 任务。它就是一个唤醒任务，什么都没干：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> <span class="token constant">WAKEUP_TASK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// Do nothing</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 addTaskWakesUp 变量，默认是 false，所以这里也是会调用 wakeup 方法，看下 NioEventLoop 的实现:</p><p>io.netty.channel.nio.NioEventLoop#wakeup</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 唤醒 eventloop
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> inEventLoop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inEventLoop <span class="token operator">&amp;&amp;</span> nextWakeupNanos<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token constant">AWAKE</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">AWAKE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结一下：</p><ul><li>假如当前 Reactor 线程的状态是 ST_NOT_STARTED 和 ST_STARTED 状态（ST_NOT_STARTED 状态后续会变成 ST_STARTED），首先会向任务队列 taskQueue 中添加一个空的 WAKEUP_TASK 唤醒任务。</li><li>假如 Reactor 线程未在 Selector 上阻塞，这样就可以保证 Reactor 线程在执行异步任务后直接进入优雅关闭逻辑；</li><li>假如 Reactor 线程正在 Selector 上阻塞，通过调用 selector.wakeup() 方法将其唤醒，再进入优雅关闭逻辑；</li></ul><h3 id="shutdowngracefully-方法小结" tabindex="-1"><a class="header-anchor" href="#shutdowngracefully-方法小结" aria-hidden="true">#</a> shutdownGracefully 方法小结</h3><p>shutdownGracefully() 方法主要做的事情如下：</p><ul><li>修改 Reactor 线程的状态；</li><li>赋值优雅关闭的静默期和超时时间；</li><li>确保线程正常启动；</li><li>向 taskQueue 添加唤醒任务，另外确保唤醒 Reactor 线程；</li></ul><p>做完上面这些事情后，因为 io.netty.channel.nio.NioEventLoop#run 方法在每次循环结束都会检查 Reactor 线程的状态，假如状态是 ST_SHUTTING_DOWN 和它之后的状态，就会进入关闭的逻辑了。</p><h2 id="reactor-线程的优雅关闭" tabindex="-1"><a class="header-anchor" href="#reactor-线程的优雅关闭" aria-hidden="true">#</a> Reactor 线程的优雅关闭</h2><p>整个退出 NioEventLoop 循环的流程如下：</p><img src="`+o+`" alt="NioEventLoop的run方法检查关闭状态的流程" style="zoom:67%;"><h3 id="检查-reactor-线程状态" tabindex="-1"><a class="header-anchor" href="#检查-reactor-线程状态" aria-hidden="true">#</a> 检查 Reactor 线程状态</h3><p>前面在 shutdownGracefully 方法中已经将 Reactor 线程的状态设置为 ST_SHUTTING_DOWN 状态了，NioEventLoop#run 方法的每次循环最后都会检查 Reactor 线程的状态，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// epoll bug的一个特征计数变量</span>
    <span class="token keyword">int</span> selectCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略 ......</span>
            <span class="token comment">// 查询是否有要执行的 I/O 事件和任务</span>
            <span class="token comment">// 执行 I/O 事件和任务</span>
            <span class="token comment">// ...... 省略 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancelledKeyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">handleLoopException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// Always handle shutdown even if the loop processing threw an exception.</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShuttingDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果事件轮询器开始 shutdown，就要关闭 IO 资源</span>
                    <span class="token function">closeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirmShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">handleLoopException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 finally 代码块中，每次都会调用 isShuttingDown() 方法检查 Reactor 线程的状态，如果状态是 ST_SHUTTING_DOWN 和它之后的状态，就会进入关闭的逻辑了。</p><p>关闭的逻辑分为两个方法：</p><ul><li>NioEventLoop#closeAll：切量，也就是取消 Reactor 线程监听的 Channel 的事件；</li><li>SingleThreadEventExecutor#confirmShutdown：保证剩余任务可以执行完毕，保证业务无损；</li></ul><h3 id="关闭-reactor-监听的所有-channel" tabindex="-1"><a class="header-anchor" href="#关闭-reactor-监听的所有-channel" aria-hidden="true">#</a> 关闭 Reactor 监听的所有 Channel</h3><p>NioEventLoop#closeAll，获取 Selector 上注册的所有 SelectionKey，通过它的附件就可以获取 Netty 中的 NioSocketChanel。最后就会依次关闭这些 Channel。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 把原本注册再 selector 上的所有 Channel 都关闭
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">closeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">selectAgain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractNioChannel</span><span class="token punctuation">&gt;</span></span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractNioChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> k<span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> a <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">AbstractNioChannel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            channels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractNioChannel</span><span class="token punctuation">)</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            k<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
            <span class="token class-name">NioTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectableChannel</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NioTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectableChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>
            <span class="token function">invokeChannelUnregistered</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AbstractNioChannel</span> ch<span class="token operator">:</span> channels<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="保证剩余任务执行" tabindex="-1"><a class="header-anchor" href="#保证剩余任务执行" aria-hidden="true">#</a> 保证剩余任务执行</h3><p>SingleThreadEventExecutor#confirmShutdown，只要有异步任务或者 ShutdwonHooks 需要执行，就不能关闭，需要等待所有任务或者 ShutdownHooks 执行完毕，才会继续走后续关闭的逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 确保运行所有剩余的任务和关闭钩子函数。
 * 返回 true，表示可以让执行器变成完成 shutdown状态，
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">confirmShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isShuttingDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;must be invoked from an event loop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 取消所有Scheduled任务</span>
    <span class="token function">cancelScheduledTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>gracefulShutdownStartTime <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        gracefulShutdownStartTime <span class="token operator">=</span> <span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 轮询任务队列中的所有任务 和 运行 Shutdown 的钩子任务</span>
    <span class="token comment">// 下面的条件返回true，表示任务和钩子任务至少有一个执行了，说明可能还有任务未执行，要保证继续执行就返回 false，同时添加一个 WAKEUP_TASK 任务到队列中起到唤醒作用</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runAllTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">runShutdownHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行器状态已经完全 Shutdown</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Executor shut down - no new tasks anymore.</span>
            <span class="token comment">// 执行器关闭-不再添加新的任务。</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// There were tasks in the queue. Wait a little bit more until no tasks are queued for the quiet period or</span>
        <span class="token comment">// terminate if the quiet period is 0.</span>
        <span class="token comment">// See https://github.com/netty/netty/issues/4241</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>gracefulShutdownQuietPeriod <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 避免 Reactor 在 Selector 上阻塞，因为此时已经不会再去处理I/O事件了，添加一个唤醒任务执行关闭流程</span>
        taskQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token constant">WAKEUP_TASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回false，说明还有任务没有执行，不能变成 Shutdown，</span>
        <span class="token comment">// 继续调用confirmShutdown方法</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 走到这里，说明条件 runAllTasks() || runShutdownHooks() 返回的是 false</span>
    <span class="token comment">// 那就说明没有任务需要执行了，需要走真正关闭的逻辑了</span>

    <span class="token keyword">final</span> <span class="token keyword">long</span> nanoTime <span class="token operator">=</span> <span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> nanoTime <span class="token operator">-</span> gracefulShutdownStartTime <span class="token operator">&gt;</span> gracefulShutdownTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行器状态已经完全 Shutdown</span>
        <span class="token comment">// 或者当前时间已经超过 优雅关闭的超时时间 gracefulShutdownTimeout</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 即使现在没有任务也还是不能进行关闭，需要等待一个静默期，在静默期内如果没有新的任务提交，才会进行关闭</span>
    <span class="token comment">// 如果在静默期内还有任务继续提交，那么静默期将会重新开始计算，进入一轮新的静默期检测</span>
    <span class="token comment">// 在静默期间每100ms唤醒线程执行期间提交的任务</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanoTime <span class="token operator">-</span> lastExecutionTime <span class="token operator">&lt;=</span> gracefulShutdownQuietPeriod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Check if any tasks were added to the queue every 100ms.</span>
        <span class="token comment">// TODO: Change the behavior of takeTask() so that it returns on timeout.</span>
        <span class="token comment">// 检查每100毫秒是否有任务被添加到队列中。</span>
        taskQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token constant">WAKEUP_TASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Ignore</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 返回false，说明还有任务没有执行，不能变成 Shutdown，</span>
        <span class="token comment">// 继续调用confirmShutdown方法</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// No tasks were added for last quiet period - hopefully safe to shut down.</span>
    <span class="token comment">// (Hopefully because we really cannot make a guarantee that there will be no execute() calls by a user.)</span>
    <span class="token comment">// 静默时间内没有任务提交，可以优雅关闭，此时若用户又提交任务则不会被执行</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法的主要流程如下：</p><ol><li>校验 Reactor 线程的状态；</li><li>取消调度队列中的所有调度任务；</li><li><code>runAllTasks() || runShutdownHooks()</code> 执行所有的任务和关闭钩子任务，这个条件返回 false，就表示所有任务都执行完了；</li><li>执行完所有任务后，判断关闭流程是否超时，如果超时了，直接退出当前方法，返回 true；</li><li>执行完所有任务后，如果没有超时，就需要等待一个静默期，每隔 100ms 检查是否有新的任务需要执行，如果在静默期时间内有任务提交，就会去执行任务了。最后假如静默期内没有任务提交，就退出当前方法，返回 true；</li></ol><p>关于 SingleThreadEventExecutor#confirmShutdown 方法的返回值，只要返回 true 就表示可以去执行真正的关闭逻辑了，从而退出 NioEventLoop#run 内的循环了</p><h3 id="真正的关闭逻辑" tabindex="-1"><a class="header-anchor" href="#真正的关闭逻辑" aria-hidden="true">#</a> 真正的关闭逻辑</h3><p>回顾下之前 「NioEventLoop 绑定一个线程」 的那篇文章，在 SingleThreadEventExecutor#doStartThread 方法中，给 NioEventLoop 绑定看一个线程，然后调用了 NioEventLoop#run 方法进入的死循环。</p><p>本篇文章前面小结又分析了，关闭流程中退出 NioEventLoop#run 方法的死循环部分逻辑，所以本节主要分析 SingleThreadEventExecutor#doStartThread 中的关闭逻辑，主要就是 finally 代码块中的逻辑。</p><p>真正关闭的逻辑的流程图：</p><img src="`+c+`" alt="NioEventLoop的线程状态关闭流程" style="zoom:67%;"><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doStartThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span> thread <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里直接调用 executor.execute 方法，</span>
    <span class="token comment">// 我们要确保该方法每次都能提供新线程，</span>
    <span class="token comment">// 否则多个执行器绑定的线程是同一个，是会有问题。</span>
    <span class="token comment">// 因为一般 SingleThreadEventExecutor.this.run() 方法都是死循环，</span>
    <span class="token comment">// 这就导致它会占用线程，导致共享线程的其他执行器，是没有办法执行任务的。</span>
    executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取当前线程，赋值给 thread，就是执行器线程</span>
            thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 调用interruptThread()中断当前任务时没有thread值时会设置interrupted标识,现在来调用interrupt方法</span>
                thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token comment">// 更新最近一次执行任务时间</span>
            <span class="token function">updateLastExecutionTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这个方法由子类实现，一般情况下，这个方法里面利用死循环，</span>
                <span class="token comment">// 来获取待执行任务队列 taskQueue 中的任务并运行。</span>
                <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected exception from an event executor: &quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">// 采用死循环，使用 CAS 方式，确保执行器状态，变成 ST_SHUTTING_DOWN，或者已经大于 ST_SHUTTING_DOWN</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> oldState <span class="token operator">=</span> state<span class="token punctuation">;</span>
                    <span class="token comment">// 当前执行器状态已经是 ST_SHUTTING_DOWN 之后，或者变成 ST_SHUTTING_DOWN 状态</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldState <span class="token operator">&gt;=</span> <span class="token constant">ST_SHUTTING_DOWN</span> <span class="token operator">||</span> <span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>
                            <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> oldState<span class="token punctuation">,</span> <span class="token constant">ST_SHUTTING_DOWN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

        		<span class="token comment">// ...... 省略非主干代码......</span>

                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 通过死循环和confirmShutdown() 方法，确保运行所有剩余的任务和关闭钩子函数。</span>
                    <span class="token comment">// 此时，事件循环执行器还处于开始shutdown ST_SHUTTING_DOWN 状态，</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirmShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// 现在我们要确保从这一点开始不能添加更多任务。</span>
                    <span class="token comment">// 这是通过切换状态来实现的。任何超出此时间点的新任务都将被拒绝。</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">int</span> oldState <span class="token operator">=</span> state<span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldState <span class="token operator">&gt;=</span> <span class="token constant">ST_SHUTDOWN</span> <span class="token operator">||</span> <span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>
                                <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> oldState<span class="token punctuation">,</span> <span class="token constant">ST_SHUTDOWN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// 防止 NioEventLoop 状态在变为 SHUTDOWN 之前，在这个时间里，用户又提交了任务，</span>
                    <span class="token comment">// 所以还需要最后一次调用 confirmShutdown() 将在这个极限时间内提交的任务执行完毕。</span>
                    <span class="token function">confirmShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                        <span class="token class-name">FastThreadLocal</span><span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">ST_TERMINATED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        threadLock<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">int</span> numUserTasks <span class="token operator">=</span> <span class="token function">drainTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>numUserTasks <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;An event executor terminated with &quot;</span> <span class="token operator">+</span>
                                    <span class="token string">&quot;non-empty task queue (&quot;</span> <span class="token operator">+</span> numUserTasks <span class="token operator">+</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        terminationFuture<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里从 finally 代码块开始分析：</p><p>（1）第一步：for 循环保证 NioEventLoop 的状态为 ST_SHUTTING_DOWN；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> oldState <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token comment">// 当前执行器状态已经是 ST_SHUTTING_DOWN 之后，或者变成 ST_SHUTTING_DOWN 状态</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldState <span class="token operator">&gt;=</span> <span class="token constant">ST_SHUTTING_DOWN</span> <span class="token operator">||</span> <span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>
        <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> oldState<span class="token punctuation">,</span> <span class="token constant">ST_SHUTTING_DOWN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）第二步：for 循环保证所有任务和钩子任务都执行完，因为可能还有线程在极限时间内添加任务；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 通过死循环和confirmShutdown() 方法，确保运行所有剩余的任务和关闭钩子函数。</span>
<span class="token comment">// 此时，事件循环执行器还处于开始shutdown ST_SHUTTING_DOWN 状态，</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirmShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）第三步：for 循环 + CAS 保证 NioEventLoop 的状态改为 ST_SHUTDOWN，这个时候不允许再添加任务了；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 现在我们要确保从这一点开始不能添加更多任务。</span>
<span class="token comment">// 这是通过切换状态来实现的。任何超出此时间点的新任务都将被拒绝。</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> oldState <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldState <span class="token operator">&gt;=</span> <span class="token constant">ST_SHUTDOWN</span> <span class="token operator">||</span> <span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>
        <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> oldState<span class="token punctuation">,</span> <span class="token constant">ST_SHUTDOWN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）第四步：最后一次检查所有任务和钩子任务都执行完，因为可能还有线程在极限时间内添加任务；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">confirmShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（5）第五步：在 ST_SHUTDOWN 状态下关闭 Selector；io.netty.channel.nio.NioEventLoop#cleanup</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        selector<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to close a selector.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（6）第六步：移除 ThreadLocal 中存的数据；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FastThreadLocal</span><span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（7）第七步：CAS 设置线程的状态为 ST_TERMINATED；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">ST_TERMINATED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（8）第八步：最后 <code>threadLock.countDown()</code> 唤醒用 SingleThreadEventExecutor#awaitTermination 方法导致阻塞的线程。然后设置 terminationFuture 的 success；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>threadLock<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> numUserTasks <span class="token operator">=</span> <span class="token function">drainTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>numUserTasks <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;An event executor terminated with &quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;non-empty task queue (&quot;</span> <span class="token operator">+</span> numUserTasks <span class="token operator">+</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
terminationFuture<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>EventLoop 内管理的所有 NioEventLoop 线程都关闭成功后，这个 EventLoop 才算关闭。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>Reactor 线程优雅管的总体流程图</p><p>![NioEventLoop 优雅关闭的整体流程](./13-线程体系-NioEventLoop的优雅关闭/NioEventLoop 优雅关闭的整体流程.png)</p>`,106),u=[l];function k(d,r){return s(),a("div",null,u)}const b=n(i,[["render",k],["__file","13-线程体系-NioEventLoop的优雅关闭.html.vue"]]);export{b as default};
