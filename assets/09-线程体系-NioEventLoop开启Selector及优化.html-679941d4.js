import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-0262c20c.js";const t={},p=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年2月23日18:38:06</td></tr><tr><td>V2</td><td>重构</td><td>2023年05月20日17:14:52</td></tr></tbody></table><h2 id="开启-selector-入口" tabindex="-1"><a class="header-anchor" href="#开启-selector-入口" aria-hidden="true">#</a> 开启 Selector 入口</h2><p>在 NioEventLoop 的构造方法中调用 NioEventLoop#openSelector 方法开启 Selector。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">NioEventLoop</span><span class="token punctuation">(</span><span class="token class-name">NioEventLoopGroup</span> parent<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">SelectorProvider</span> selectorProvider<span class="token punctuation">,</span>
             <span class="token class-name">SelectStrategy</span> strategy<span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler<span class="token punctuation">,</span>
             <span class="token class-name">EventLoopTaskQueueFactory</span> taskQueueFactory<span class="token punctuation">,</span> <span class="token class-name">EventLoopTaskQueueFactory</span> tailTaskQueueFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 参数一：当前NioEventLoop所属的NioEventLoopGroup</span>
    <span class="token comment">// 参数二：ThreadPerTaskExecutor, 是在Group中创建的</span>
    <span class="token comment">// 参数三：</span>
    <span class="token comment">// 参数四：最终返回的是一个队列，最大程度是Integer.MAX_VALUE，最小是16</span>
    <span class="token comment">// 参数五：大部分用不到这个queue</span>
    <span class="token comment">// 参数六：线程池拒绝策略</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">newTaskQueue</span><span class="token punctuation">(</span>taskQueueFactory<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">newTaskQueue</span><span class="token punctuation">(</span>tailTaskQueueFactory<span class="token punctuation">)</span><span class="token punctuation">,</span>
            rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>provider <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>selectorProvider<span class="token punctuation">,</span> <span class="token string">&quot;selectorProvider&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>selectStrategy <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>strategy<span class="token punctuation">,</span> <span class="token string">&quot;selectStrategy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建包装后的Selector和未包装的Selector实例</span>
    <span class="token comment">// 也就是每个NioEventLoop都持有有一个Selector实例</span>
    <span class="token keyword">final</span> <span class="token class-name">SelectorTuple</span> selectorTuple <span class="token operator">=</span> <span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> selectorTuple<span class="token punctuation">.</span>selector<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>unwrappedSelector <span class="token operator">=</span> selectorTuple<span class="token punctuation">.</span>unwrappedSelector<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="selector-优化" tabindex="-1"><a class="header-anchor" href="#selector-优化" aria-hidden="true">#</a> Selector 优化</h2><h3 id="selector-优化开关" tabindex="-1"><a class="header-anchor" href="#selector-优化开关" aria-hidden="true">#</a> Selector 优化开关</h3><p>在 JDK NIO 的 API 中开启 Selector，只需要调用 Selector.open() 或者 SelectorProvider 的 openSelector() 方法即可。</p><p><strong>Netty 针对 Selector 有一个优化开关，优化开关如下，可以用通过 io.netty.noKeySetOptimization 参数设置，false 表示不进行优化，使用原生的 Selector。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">DISABLE_KEY_SET_OPTIMIZATION</span> <span class="token operator">=</span>
        <span class="token class-name">SystemPropertyUtil</span><span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;io.netty.noKeySetOptimization&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么要优化原生的-selector" tabindex="-1"><a class="header-anchor" href="#为什么要优化原生的-selector" aria-hidden="true">#</a> 为什么要优化原生的 Selector</h3><p>sun.nio.ch.SelectorImpl 对象中的 selectedKeys 和 publicSelectedKeys 两个 HashSet 集合 。</p><ul><li>selectedKeys：已经就绪的 SelectionKey 的集合，拥有所有操作事件准备就绪的 Key；</li><li>publicSelectedKeys：外部访问就绪的通道的 SelectionKey 的集合， 它是由 selectedKeys 集合包装成不可修改的集合；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SelectorImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSelector</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectedKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> publicKeys<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> publicSelectedKeys<span class="token punctuation">;</span>
 
    <span class="token comment">// 省略其他......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化原生的 Selector 的原因如下：</p><ol><li><strong>在 JDK 原生的 NIO 中，已经就绪通道的 SelectionKey 是存在 HashSet 中的，因为 HashSet 的 add 方法在发送哈希冲突时候的消耗的时间比较多，最差的情况下时间复杂度是 O(n)；</strong></li><li><strong>在处理完就绪通道的 SelectionKey 的时候，都需要手动去调用 remove 方法去移除已经处理完的 SelectionKey，比较麻烦；</strong></li></ol><h3 id="nioeventloop-openselector-方法" tabindex="-1"><a class="header-anchor" href="#nioeventloop-openselector-方法" aria-hidden="true">#</a> NioEventLoop#openSelector 方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">SelectorTuple</span> <span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Selector</span> unwrappedSelector<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取 JDK 原生的选择器对象</span>
        unwrappedSelector <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ChannelException</span><span class="token punctuation">(</span><span class="token string">&quot;failed to open a new selector&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DISABLE_KEY_SET_OPTIMIZATION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 配置的是不优化选择器，直接返回</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SelectorTuple</span><span class="token punctuation">(</span>unwrappedSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 使用反射机制，获取JDK底层的Selector的Class对象</span>
    <span class="token class-name">Object</span> maybeSelectorImplClass <span class="token operator">=</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>
                        <span class="token string">&quot;sun.nio.ch.SelectorImpl&quot;</span><span class="token punctuation">,</span>
                        <span class="token boolean">false</span><span class="token punctuation">,</span>
                        <span class="token class-name">PlatformDependent</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> cause<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ......省略异常处理的逻辑......</span>

    <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> selectorImplClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> maybeSelectorImplClass<span class="token punctuation">;</span>
    <span class="token comment">// 当前NioEventLoop的Selector就绪事件的集合</span>
    <span class="token keyword">final</span> <span class="token class-name">SelectedSelectionKeySet</span> selectedKeySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectedSelectionKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span> maybeException <span class="token operator">=</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 通过反射获取原生 selectorImpl 的 selectedKeys 和 publicSelectedKeys 两个字段</span>
                <span class="token class-name">Field</span> selectedKeysField <span class="token operator">=</span> selectorImplClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;selectedKeys&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Field</span> publicSelectedKeysField <span class="token operator">=</span> selectorImplClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;publicSelectedKeys&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token comment">// ......省略 JDK8 以上的处理和一些权限校验的代码......</span>

                <span class="token comment">// 将上面获取的两个属性重新赋值为Netty的SelectedSelectionKeySet</span>
                selectedKeysField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>unwrappedSelector<span class="token punctuation">,</span> selectedKeySet<span class="token punctuation">)</span><span class="token punctuation">;</span>
                publicSelectedKeysField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>unwrappedSelector<span class="token punctuation">,</span> selectedKeySet<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ......省略异常处理的逻辑......</span>
    
    selectedKeys <span class="token operator">=</span> selectedKeySet<span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;instrumented a special java.util.Set into: {}&quot;</span><span class="token punctuation">,</span> unwrappedSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SelectorTuple</span><span class="token punctuation">(</span>unwrappedSelector<span class="token punctuation">,</span>
                             <span class="token keyword">new</span> <span class="token class-name">SelectedSelectionKeySetSelector</span><span class="token punctuation">(</span>unwrappedSelector<span class="token punctuation">,</span> selectedKeySet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的方法省略了一些不重要的代码。主要流程如下</p><ul><li>假如未开启优化，直接返回 SelectorTuple 封装的 Selector；</li><li>假如开启了 Selector 优化，通过反射将已经优化过的 SelectedSelectionKeySet 替换 selectedKeys 和 publicSelectedKeys 两个 HashSet 集合 。</li></ul><p>关键的是两个对象 SelectedSelectionKeySet 和 SelectedSelectionKeySetSelector，这两个对象是 Selector 优化的关键。</p><h2 id="selectedselectionkeyset-类" tabindex="-1"><a class="header-anchor" href="#selectedselectionkeyset-类" aria-hidden="true">#</a> SelectedSelectionKeySet 类</h2><p>前面已经说过在 JDK 原生的 NIO 中，已经就绪通道的 SelectionKey 是存在 HashSet 中的。假如 Netty 开启了优化 Selector，那么当通道事件就绪后 SelectionKey 将会存在 SelectedSelectionKeySet 类中。因为在 NioEventLoop#openSelector 方法中已经将这两个 HashSet 替换成 SelectedSelectionKeySet 了。</p><p>接下来分析下 SelectedSelectionKeySet 的原理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 简化在轮询事件时的操作，不需要每次轮询都移除key
 */</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SelectedSelectionKeySet</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token comment">// 准备就绪的 Key 的容器</span>
    <span class="token class-name">SelectionKey</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">;</span>
    <span class="token comment">// 数组可读大小</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token class-name">SelectedSelectionKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        keys<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>
        <span class="token comment">// 数组占满时，扩容操作</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">increaseCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">private</span> <span class="token keyword">int</span> idx<span class="token punctuation">;</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> idx <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">SelectionKey</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> keys<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将key数组从start位到size位全置为null</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> start<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">increaseCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SelectionKey</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">[</span>keys<span class="token punctuation">.</span>length <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newKeys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        keys <span class="token operator">=</span> newKeys<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键点：</p><ul><li><strong>使用数组代替 HashSet 来存储 SelectionKey，重写了 add() 和 iterator() 方法，使用数组的遍历效率更高；</strong></li><li><strong>提供了 reset() 的 API，这样可以方便在处理完就绪事件的 SelectionKey 后清空已经出来完的事件了；</strong></li></ul><h2 id="selectedselectionkeysetselector-类" tabindex="-1"><a class="header-anchor" href="#selectedselectionkeysetselector-类" aria-hidden="true">#</a> SelectedSelectionKeySetSelector 类</h2><p>SelectedSelectionKeySetSelector 是 Netty 优化后的 Selector。它继承自JDK 的抽象类 java.nio.channels.Selector。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SelectedSelectionKeySetSelector</span> <span class="token keyword">extends</span> <span class="token class-name">Selector</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SelectedSelectionKeySet</span> selectionKeys<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Selector</span> delegate<span class="token punctuation">;</span>
 
    <span class="token comment">// ......省略成员方法......</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到有两个成员属性 SelectedSelectionKeySet 和 Selector。SelectedSelectionKeySetSelector 中的所有 API 最后都是委托给 JDK 原生的 Selector 去处理的。</p><p>在 SelectedSelectionKeySetSelector#select 相关的方法中，会先调用上一节提到的 reset() 的 API，这样就可以自动的清除已经处理完的通道的就绪事件的 SelectionKey，不用像使用原生 API 那样手动清除了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    selectionKeys<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    selectionKeys<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    selectionKeys<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p><strong>JDK 原生的 Selector 实现通道就绪事件是保存在 HashSet 中的，插入和遍历效率不高，而且每次处理完就绪事件后都要手动清空这个 HashSet。Netty 针对这些痛点进行了优化，使用数组替代 HashSet，每次自动清理处理完的就绪事件。</strong></p><p>还有一个重要原因是，数组可以利用 CPU 缓存行的优势来提高遍历的效率。</p>`,35),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","09-线程体系-NioEventLoop开启Selector及优化.html.vue"]]);export{r as default};
