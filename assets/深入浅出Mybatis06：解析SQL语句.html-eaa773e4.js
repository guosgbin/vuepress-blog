import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-9f5298e7.js";const t="/assets/MappedStatement对象属性-ff4351cd.png",p="/assets/SqlSource类图-2f055f51.png",o="/assets/SqlNode类图-a79e6a85.png",c="/assets/NodeHandler类图-79e995f5.png",l="/assets/SQL节点树-aa409bd3.png",i="/assets/解析SQL节点树-f7dd7ecc.png",u={},r=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2021年6月9日23:50:39</td></tr></tbody></table><p>摘要：解析我们写的SQL脚本，构建一个节点树，获得SqlSource对象。</p><p>在看解析SQL语句的源码的时候，需要知道一些类。</p><h2 id="准备知识" tabindex="-1"><a class="header-anchor" href="#准备知识" aria-hidden="true">#</a> 准备知识</h2><h3 id="mappedstatement" tabindex="-1"><a class="header-anchor" href="#mappedstatement" aria-hidden="true">#</a> MappedStatement</h3><p>首先有一个很重要的MappedStatement类，它其实就是对应一个数据库操作节点，也就是SELECT、INSERT、UPDATE、DELETE这些。</p><p>例如有一个节点的操作如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.guosgbin.mybatis.example.entity.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select * from tb_user
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么它解析出来的MappedStatement的对象就如下：</p><img src="`+t+`" alt="MappedStatement对象属性" style="zoom:80%;"><h3 id="sqlsource" tabindex="-1"><a class="header-anchor" href="#sqlsource" aria-hidden="true">#</a> SqlSource</h3><p>这个类其实就是对应的数据库操作节点中我们手写的原始SQL，例如</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>SELECT * FROM tb_user WHERE id = #{id}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>又或者：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>SELECT * FROM tb_user
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.name != null and user.name !=&#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        AND name = #{user.name}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.age != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        AND age = #{user.age}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是第一个算是普通的SQL，第二个因为它带了<code>&lt;if&gt;</code>这种标签，所以它算是动态SQL，还有一个特别的情况是<code>\${}</code>符号，它也算是动态SQL。</p><p>SqlSource是一个接口，就只有一个<code>getBoundSql()</code>抽象方法，下面是SqlSource的继承关系。</p><img src="`+p+`" alt="SqlSource类图" style="zoom:80%;"><p>四种实现类作用和区别如下：</p><ul><li><strong>DynamicSqlSource</strong>：动态的SQL语句，就是我们写的SQL中代用<code>&lt;if&gt;</code>这种标签或者含有<code>\${}</code>符的SQl语句。</li><li><strong>RawSqlSource</strong>：原生的SQL语句，没有任何标签或者仅仅是<code>#{}</code>占位符的。</li><li><strong>StaticSqlSource</strong>：静态的SQL语句，也就是数据库能直接执行的语句，或者是有<code>?</code>占位符的SQL。</li><li>ProviderSqlSource：注解得到的SQL语句。</li></ul><p>因为DynamicSqlSource和RawSqlSource这两种SQL是不能直接交给数据库去执行的，最终是要<strong>转换为StaticSqlSource</strong>才能交给数据库去执行。</p><h3 id="boundsql" tabindex="-1"><a class="header-anchor" href="#boundsql" aria-hidden="true">#</a> BoundSql</h3><p>这个类是由SqlSource对象得到的，具体包含数据库能够直接执行的SQL，和一些参数映射列表等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 可能含有“?”占位符的sql语句</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">;</span>
<span class="token comment">// 参数映射列表</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> parameterMappings<span class="token punctuation">;</span>
<span class="token comment">// 入参</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> additionalParameters<span class="token punctuation">;</span>
<span class="token comment">// additionalParameters的包装对象</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MetaObject</span> metaParameters<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态标签sqlnode" tabindex="-1"><a class="header-anchor" href="#动态标签sqlnode" aria-hidden="true">#</a> 动态标签SqlNode</h3><p>我们知道，在Mybatis中支持很多动态标签，如下：</p><ol><li>if</li><li>choose</li><li>when</li><li>otherwise</li><li>trim</li><li>where</li><li>set</li><li>foreach</li></ol><p>Myabtis中有一个SqlNode接口代表动态标签，它有很多的子类，上面的那些动态标签都对应一个SqlNode的实现类。</p><img src="`+o+`" alt="SqlNode类图" style="zoom:80%;"><h3 id="xmlscriptbuilder" tabindex="-1"><a class="header-anchor" href="#xmlscriptbuilder" aria-hidden="true">#</a> XMLScriptBuilder</h3><p>XMLScriptBuilder是继承自BaseBuilder，很明显它是用来解析SQL脚本的。成员属性如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 当前要处理的XML节点</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">XNode</span> context<span class="token punctuation">;</span>
<span class="token comment">// 当前节点是否为动态节点</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> isDynamic<span class="token punctuation">;</span>
<span class="token comment">// 输入参数的类型</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">;</span>
<span class="token comment">// 节点类型和对应的处理器组成的Map</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">NodeHandler</span><span class="token punctuation">&gt;</span></span> nodeHandlerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为SQL脚本有很多动态的标签，最后有一个Map存放解析每种动态标签的处理器。</p><p>在XMLScriptBuilder中有一个NodeHandler接口，根据不同的标签有不同的实现，</p><img src="`+c+`" alt="NodeHandler类图" style="zoom:80%;"><p>每个NodeHandler都有自己的<code>handleNode()</code>方法，用于解析不同的动态节点。</p><p>在XMLScriptBuilder中会有一个Map来存储各个节点的NodeHandler实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 初始化 动态sql的节点的名称和对应的处理器
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initNodeHandlerMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;trim&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TrimHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;where&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WhereHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;set&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SetHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;foreach&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ForEachHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;if&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IfHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;choose&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChooseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;when&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IfHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;otherwise&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OtherwiseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bind&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BindHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="languagedriver" tabindex="-1"><a class="header-anchor" href="#languagedriver" aria-hidden="true">#</a> LanguageDriver</h3><p>用于创建SqlSource对象和ParameterHandler对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LanguageDriver</span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * 创建参数处理器。参数处理器能将实参传递给JDBC statement。
   *
   * <span class="token keyword">@author</span> Frank D. Martinez [mnesarco]
   * <span class="token keyword">@param</span> <span class="token parameter">mappedStatement</span> The mapped statement that is being executed 完整的数据库操作节点
   * <span class="token keyword">@param</span> <span class="token parameter">parameterObject</span> The input parameter object (can be null) 参数对象
   * <span class="token keyword">@param</span> <span class="token parameter">boundSql</span> The resulting SQL once the dynamic language has been executed.数据库操作语句转化的BoundSql对象
   * <span class="token keyword">@return</span> the parameter handler 参数处理器
   * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">DefaultParameterHandler</span></span>
   */</span>
  <span class="token class-name">ParameterHandler</span> <span class="token function">createParameterHandler</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 创建SqlSource对象（基于映射文件的方式）。该方法在MyBatis启动阶段，读取映射接口或映射文件时被调用
   *
   * <span class="token keyword">@param</span> <span class="token parameter">configuration</span> The MyBatis configuration 配置信息
   * <span class="token keyword">@param</span> <span class="token parameter">script</span> XNode parsed from a XML file 映射文件中的数据库操作节点
   * <span class="token keyword">@param</span> <span class="token parameter">parameterType</span> input parameter type got from a mapper method or specified in the parameterType xml attribute. Can be null. 参数类型
   * <span class="token keyword">@return</span> the sql source SqlSource对象
   */</span>
  <span class="token class-name">SqlSource</span> <span class="token function">createSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">XNode</span> script<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 创建SqlSource对象（基于注解的方式）。该方法在MyBatis启动阶段，读取映射接口或映射文件时被调用
   *
   * <span class="token keyword">@param</span> <span class="token parameter">configuration</span> The MyBatis configuration 配置信息
   * <span class="token keyword">@param</span> <span class="token parameter">script</span> The content of the annotation 注解中的SQL字符串
   * <span class="token keyword">@param</span> <span class="token parameter">parameterType</span> input parameter type got from a mapper method or specified in the parameterType xml attribute. Can be null. 参数类型
   * <span class="token keyword">@return</span> the sql source  SqlSource对象，具体来说是DynamicSqlSource和RawSqlSource中的一种
   */</span>
  <span class="token class-name">SqlSource</span> <span class="token function">createSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">String</span> script<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dynamiccontext" tabindex="-1"><a class="header-anchor" href="#dynamiccontext" aria-hidden="true">#</a> DynamicContext</h3><p>在解析SQL节点树的时候，我们需要不断的去保存已经解析出来的SQL段，DynamicContext类就是用来保存解析出得SQL片段的。另外解析SQL树的时候需要的一些环境的信息，也是由它来提供的。</p><p>字段如下：很明显<strong>sqlBuilder就是用来保存解析出来的SQL段的。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 上下文环境</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ContextMap</span> bindings<span class="token punctuation">;</span>
<span class="token comment">// 用于拼装SQL语句片段</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringJoiner</span> sqlBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 解析时的唯一编号，防止解析混乱</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> uniqueNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析sql入口" tabindex="-1"><a class="header-anchor" href="#解析sql入口" aria-hidden="true">#</a> 解析SQL入口</h2><p>在解析阶段，其实就是需要把SQL解析成SqlSource对象，作为属性添加到MappedStatement类中，最终设置到了Configuration类中去了。</p><p><strong>基于XML的解析SQL的入口是</strong>：XMLStatementBuilder中有个<code>parseStatementNode()</code>方法，其中有下面这一句，这就是解析SQL的入口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> langDriver<span class="token punctuation">.</span><span class="token function">createSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> context<span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>基于注解的解析SQL的入口是</strong>：MapperAnnotationBuilder中有个<code>parseStatement(Method)</code>方法，其中有下面这一句，就是解析SQL语句的入口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> <span class="token function">buildSqlSource</span><span class="token punctuation">(</span>statementAnnotation<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">,</span> languageDriver<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在解析阶段，其实就是将原生写的SQL变成一个SqlSource对象。</p><h2 id="解析流程分析" tabindex="-1"><a class="header-anchor" href="#解析流程分析" aria-hidden="true">#</a> 解析流程分析</h2><h3 id="节点树结构" tabindex="-1"><a class="header-anchor" href="#节点树结构" aria-hidden="true">#</a> 节点树结构</h3><p>关于动态节点，给个例子如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectByCondition01<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.guosgbin.mybatis.example.entity.User<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.guosgbin.mybatis.example.entity.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    SELECT * FROM tb_user
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.name != null and user.name !=&#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            AND name = #{user.name}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.age != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            AND age = #{user.age}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种结构可以看成是一个节点树，Mybatis是使用XMLScriptBuilder来构建这个节点树的。</p><p>上面的<code>SELECT * FROM tb_user</code>是不带<code>\${}</code>和动态标签的，所以这行是StaticTextSqlNode。</p><p><code> &lt;where&gt;</code>标签下面还有<code>&lt;if&gt;</code>标签，它算是混合的Node，也就是MixedSqlNode。</p><p><code>&lt;if&gt;</code>标签下没有别的标签了，它是IfSqlNode。</p><p>上面SQL的整体构造可以如下图所示</p><p><img src="`+l+'" alt="SQL节点树"></p><p>当然IfSqlNode下面也还可以再嵌套子标签。</p><p>实际debug出来的where标签里面有5个，但是我们只有两个if标签，其实里面是换行符号，所以被转换成了StaticTextSqlNode加到SQL节点树里去了。</p><h3 id="解析流程" tabindex="-1"><a class="header-anchor" href="#解析流程" aria-hidden="true">#</a> 解析流程</h3><img src="'+i+`" alt="解析SQL节点树" style="zoom:60%;"><h2 id="源码阅读" tabindex="-1"><a class="header-anchor" href="#源码阅读" aria-hidden="true">#</a> 源码阅读</h2><p>在XMLLanguageDriver的针对XML的createSqlSource方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">SqlSource</span> <span class="token function">createSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">XNode</span> script<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">XMLScriptBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLScriptBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> script<span class="token punctuation">,</span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">parseScriptNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建xmlscriptbuilder" tabindex="-1"><a class="header-anchor" href="#创建xmlscriptbuilder" aria-hidden="true">#</a> 创建XMLScriptBuilder</h3><p>创建一个XMLScriptBuilder对象，调用其<code>parseScriptNode()</code>方法去解析我们写的SQL。源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 解析节点生成SqlSource对象
 *
 * <span class="token keyword">@return</span> SqlSource对象
 */</span>
<span class="token keyword">public</span> <span class="token class-name">SqlSource</span> <span class="token function">parseScriptNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析XML节点节点，得到节点树MixedSqlNode</span>
    <span class="token class-name">MixedSqlNode</span> rootSqlNode <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSource</span> sqlSource<span class="token punctuation">;</span>
    <span class="token comment">// 根据节点树是否为动态，创建对应的SqlSource对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isDynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sqlSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> rootSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        sqlSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RawSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> rootSqlNode<span class="token punctuation">,</span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sqlSource<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面说过我们写的SQL分为动态和非动态的，</p><ul><li><strong>DynamicSqlSource</strong>：动态的SQL语句，就是我们写的SQL中代用<code>&lt;if&gt;</code>这种标签或者含有<code>\${}</code>符的SQl语句。</li><li><strong>RawSqlSource</strong>：原生的SQL语句，没有任何标签或者仅仅是<code>#{}</code>占位符的。</li></ul><p>具体判断是否是动态的SQL，是<code>parseScriptNode()</code>的<code>parseDynamicTags(context)</code>去判断的。</p><h3 id="判断是否是动态sql" tabindex="-1"><a class="header-anchor" href="#判断是否是动态sql" aria-hidden="true">#</a> 判断是否是动态SQL</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 将XNode对象解析为节点树
 *
 * <span class="token keyword">@param</span> <span class="token parameter">node</span> XNode对象，即数据库操作节点
 * <span class="token keyword">@return</span> 解析后得到的节点树
 */</span>
<span class="token keyword">protected</span> <span class="token class-name">MixedSqlNode</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// XNode拆分出的SqlNode列表</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 输入XNode的子XNode</span>
    <span class="token class-name">NodeList</span> children <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 循环遍历每一个子XNode</span>
        <span class="token class-name">XNode</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">newXNode</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">CDATA_SECTION_NODE</span> <span class="token operator">||</span> child<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">TEXT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取XNode内的信息</span>
            <span class="token class-name">String</span> data <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringBody</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TextSqlNode</span> textSqlNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextSqlNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 只要有一个TextSqlNode对象是动态的，则整个MixedSqlNode是动态的</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>textSqlNode<span class="token punctuation">.</span><span class="token function">isDynamic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                contents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                isDynamic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                contents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaticTextSqlNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">ELEMENT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// issue #628</span>
            <span class="token class-name">String</span> nodeName <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 找到对应的处理器</span>
            <span class="token class-name">NodeHandler</span> handler <span class="token operator">=</span> nodeHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown element &lt;&quot;</span> <span class="token operator">+</span> nodeName <span class="token operator">+</span> <span class="token string">&quot;&gt; in SQL statement.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 用处理器处理节点</span>
            handler<span class="token punctuation">.</span><span class="token function">handleNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
            isDynamic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回一个混合节点，其实就是一个SQL节点树</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MixedSqlNode</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抽取上面的代码讲解：</p><p>第一行的List，其实就是存放节点树的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>假如是文本节点</strong>，就是不带动态标签的SQL，先会传入解析出来的SQL段调用构造方法创建TextSqlNode对象，</p><p>创建TextSqlNode的对象的目的是因为它能够处理<code>\${}</code>符，里面还带有一个<code>isDynamic()</code>方法，它能够判断这个SQL段里面有没有<code>\${}</code>，如果有则说明是动态的，没有的话就创建一个StaticTextSqlNode对象，表示是一个静态的SqlNode。</p><p>最终<strong>都会添加到节点树中去</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TextSqlNode</span> textSqlNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextSqlNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 只要有一个TextSqlNode对象是动态的，则整个MixedSqlNode是动态的</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>textSqlNode<span class="token punctuation">.</span><span class="token function">isDynamic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    contents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    isDynamic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    contents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaticTextSqlNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>假如解析出来某一段还是Node对象，也就是动态标签</strong>，此时会拿到动态标签的名称，根据名称去得到对应的标签的处理器，就是最上面的讲到的NodeHandler接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> nodeName <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 找到对应的处理器</span>
<span class="token class-name">NodeHandler</span> handler <span class="token operator">=</span> nodeHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown element &lt;&quot;</span> <span class="token operator">+</span> nodeName <span class="token operator">+</span> <span class="token string">&quot;&gt; in SQL statement.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 用处理器处理节点</span>
handler<span class="token punctuation">.</span><span class="token function">handleNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
isDynamic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来拿几个动态节点处理器讲解</p><h3 id="ifhandler" tabindex="-1"><a class="header-anchor" href="#ifhandler" aria-hidden="true">#</a> IfHandler</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.name != null and user.name !=&#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    AND name = #{user.name}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如解析SQL的时候遇到了if标签，此时会用到IfHandler的<code>handleNode()</code>方法。在里面会继续调用<code>parseDynamicTags()</code>递归解析。</p><p>会获取<code>&lt;if&gt;</code>标签的test属性存的表达式，就上上面的<code>user.name != null and user.name !=&#39;&#39;</code>，然后就去创建IfSqlNode对象了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
   * 该方法将当前节点拼装到节点树中
   *
   * <span class="token keyword">@param</span> <span class="token parameter">nodeToHandle</span> 要被拼接的节点
   * <span class="token keyword">@param</span> <span class="token parameter">targetContents</span> 节点树
   */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析该节点的下级节点</span>
    <span class="token class-name">MixedSqlNode</span> mixedSqlNode <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>nodeToHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取该节点的test属性</span>
    <span class="token class-name">String</span> test <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个IfSqlNode</span>
    <span class="token class-name">IfSqlNode</span> ifSqlNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IfSqlNode</span><span class="token punctuation">(</span>mixedSqlNode<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将创建的IfSqlNode放入到SQL节点树中</span>
    targetContents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ifSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="foreachhandler" tabindex="-1"><a class="header-anchor" href="#foreachhandler" aria-hidden="true">#</a> ForEachHandler</h3><p>其实就是把标签的属性都存起来了，放到节点树里了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MixedSqlNode</span> mixedSqlNode <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>nodeToHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> collection <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;collection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> item <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> index <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token keyword">open</span> <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> close <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> separator <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;separator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ForEachSqlNode</span> forEachSqlNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForEachSqlNode</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> mixedSqlNode<span class="token punctuation">,</span> collection<span class="token punctuation">,</span> index<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token keyword">open</span><span class="token punctuation">,</span> close<span class="token punctuation">,</span> separator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    targetContents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>forEachSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建sqlsource" tabindex="-1"><a class="header-anchor" href="#创建sqlsource" aria-hidden="true">#</a> 创建SqlSource</h2><p>假如是动态SQL的话则会去创建DynamicSqlSource对象。</p><p>假如不是动态SQL则会去创建RawSqlSource对象。</p><p>RawqlSource对象最终会调用到org.apache.ibatis.builder.SqlSourceBuilder#parse方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 将DynamicSqlSource和RawSqlSource中的“#<span class="token punctuation">{</span><span class="token punctuation">}</span>”符号替换掉，从而将他们转化为StaticSqlSource
 *
 * <span class="token keyword">@param</span> <span class="token parameter">originalSql</span> sqlNode.apply()拼接之后的sql语句。已经不包含<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>等节点，也不含有$<span class="token punctuation">{</span><span class="token punctuation">}</span>符号
 * <span class="token keyword">@param</span> <span class="token parameter">parameterType</span> 实参类型
 * <span class="token keyword">@param</span> <span class="token parameter">additionalParameters</span> 附加参数
 * <span class="token keyword">@return</span> 解析结束的StaticSqlSource
 */</span>
<span class="token keyword">public</span> <span class="token class-name">SqlSource</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> originalSql<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> additionalParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用来完成#{}处理的处理器</span>
    <span class="token class-name">ParameterMappingTokenHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterMappingTokenHandler</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> parameterType<span class="token punctuation">,</span> additionalParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通用的占位符解析器，用来进行占位符替换</span>
    <span class="token class-name">GenericTokenParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericTokenParser</span><span class="token punctuation">(</span><span class="token string">&quot;#{&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将#{}替换为?的SQL语句</span>
    <span class="token class-name">String</span> sql<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">isShrinkWhitespacesInSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sql <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">removeExtraWhitespaces</span><span class="token punctuation">(</span>originalSql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        sql <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>originalSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 生成新的StaticSqlSource对象</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StaticSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在GenericTokenParser的<code>parse()</code>方法中，会将<code>#{}</code>中的字符串提出出来放到参数映射列表parameterMappings中去保存。</p><p>由于DynamicSqlSource是动态SQL，所以每次的参数映射列表可能不一样，所以会在每次执行SQL之前去调用org.apache.ibatis.scripting.xmltags.DynamicSqlSource#getBoundSql方法，这样才会去根据参数不同来组装SQL。</p><p>最后还是会调用在GenericTokenParser的<code>parse()</code>方法。</p><p>可以看到无论是DynamicSqlSource，还是RawSqlSource最终都会转为StaticSqlSource。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本篇只是讲解解析配置的时候，是如何解析获得SqlSource对象的，最后是存入到MappedStatement里去了。</p><p>具体使用的时候，后续再说。因为有动态标签的存在，所以每次传参可能不同，所以动态SQL会在执行SQL的时候再去解析一遍。后面说。</p><p>也没什么好小结的，再回过头去看一下上面的图就可以了。</p>`,108),d=[r];function k(m,v){return s(),a("div",null,d)}const S=n(u,[["render",k],["__file","深入浅出Mybatis06：解析SQL语句.html.vue"]]);export{S as default};
