import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as t}from"./app-88c518aa.js";const e={},p=t(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2021年6月8日22:38:42</td></tr></tbody></table><p>摘要：本篇主要讲解是Mybatis是如何解析Mapper映射文件中的数据库操作节点，也就是SELECT、INSERT、UPDATE、DELETE这四个节点。</p><h2 id="xml方式" tabindex="-1"><a class="header-anchor" href="#xml方式" aria-hidden="true">#</a> XML方式</h2><h3 id="xml方式的解析入口" tabindex="-1"><a class="header-anchor" href="#xml方式的解析入口" aria-hidden="true">#</a> XML方式的解析入口</h3><p>在XMLMapperBuilder类的<code>buildStatementFromContext()</code>方法，入参时Mapper文件中的所有的SELECT、INSERT、UPDATE、DELETE标签得到的XNode对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">String</span> requiredDatabaseId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> context <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">XMLStatementBuilder</span> statementParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLStatementBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> builderAssistant<span class="token punctuation">,</span> context<span class="token punctuation">,</span> requiredDatabaseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            statementParser<span class="token punctuation">.</span><span class="token function">parseStatementNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 解析错误的话，是会放到configuration存起来，后续处理</span>
            configuration<span class="token punctuation">.</span><span class="token function">addIncompleteStatement</span><span class="token punctuation">(</span>statementParser<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环遍历每个结点，然后创建一个XMLStatementBuilder来解析每个节点。</p><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备" aria-hidden="true">#</a> 准备</h3><p>在看XMLStatementBuilder的<code>parseStatementNode()</code>源码之前，我们需要回顾下CURD标签都有哪些属性可以配置。</p><p><strong>SELECT标签</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>id=&quot;selectPerson&quot;
parameterType=&quot;int&quot;
parameterMap=&quot;deprecated&quot;
resultType=&quot;hashmap&quot;
resultMap=&quot;personResultMap&quot;
flushCache=&quot;false&quot;
useCache=&quot;true&quot;
timeout=&quot;10&quot;
fetchSize=&quot;256&quot;
statementType=&quot;PREPARED&quot;
resultSetType=&quot;FORWARD_ONLY&quot;
databaseId=&quot;dev&quot;
resultOrdered=&quot;false&quot;
resultSets=&quot;blogs,authors&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>insert和update标签</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>id
parameterTyp
parameterMap
flushCache
timeout
statementType
useGeneratedKeys
keyProperty
keyColumn
databaseId
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>insert标签</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>id
parameterTyp
parameterMap
flushCache
timeout
statementType
databaseId
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在insert标签中，有一个子标签<code>&lt;selectKey&gt;</code>。</p><p>许多数据库都支持主键自增，例如MySQL，SQL Server，这是我们可以使用insert标签的useGeneratedKeys属性来得到自增主键。但是也有一个数据库不支持自动生成主键的，这时候就可以使用<code>&lt;selectKey&gt;</code>标签来进行操作了。</p><p>关于自增主键的类Myabtis中提供了两种：</p><ol><li>SelectKeyGenerator：为不支持生产主键的数据库准备的。</li><li>Jdbc3KeyGenerator：为有支持生产主键的数据库准备的，其实它只是将数据库生成的主键回填到Java对象中，并没有生成主键的能力。</li></ol><p>本篇的重点不是解析自增主键，关于这个后面有机会讲。</p><p><strong>selectKey 标签的属性</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>keyProperty
keyColumn
resultType
order
statementType
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parsestatementnode方法" tabindex="-1"><a class="header-anchor" href="#parsestatementnode方法" aria-hidden="true">#</a> parseStatementNode方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 解析select、insert、update、delete这四类节点
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseStatementNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 读取当前节点的id与databaseId</span>
  <span class="token class-name">String</span> id <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> databaseId <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;databaseId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 验证节点的id与databaseId是否和当前Configuration中的databaseId是否是一致的。</span>
  <span class="token comment">// MyBatis允许多数据库配置，所以有些语句只对特定数据库生效</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">databaseIdMatchesCurrent</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> databaseId<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requiredDatabaseId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取节点名称 select update等</span>
  <span class="token class-name">String</span> nodeName <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 变大写 得到SQL语句的类型</span>
  <span class="token class-name">SqlCommandType</span> sqlCommandType <span class="token operator">=</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ENGLISH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 是否是查询语句</span>
  <span class="token keyword">boolean</span> isSelect <span class="token operator">=</span> sqlCommandType <span class="token operator">==</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span><span class="token constant">SELECT</span><span class="token punctuation">;</span>
  <span class="token comment">// 是否有flushCache属性，有个默认值是!isSelect，也就是说是查询语句的话flushCache就是关掉的，反之开着</span>
  <span class="token keyword">boolean</span> flushCache <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;flushCache&quot;</span><span class="token punctuation">,</span> <span class="token operator">!</span>isSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 是否有useCache属性，有个默认isSelect，也就是说查询语句是会去使用缓存的</span>
  <span class="token keyword">boolean</span> useCache <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;useCache&quot;</span><span class="token punctuation">,</span> isSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 是否右resultOrdered属性，默认false</span>
  <span class="token keyword">boolean</span> resultOrdered <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;resultOrdered&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Include Fragments before parsing</span>
  <span class="token comment">// 处理语句中的Include节点  &lt;include refid=&quot;somethingId&quot;/&gt;</span>
  <span class="token class-name">XMLIncludeTransformer</span> includeParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLIncludeTransformer</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> builderAssistant<span class="token punctuation">)</span><span class="token punctuation">;</span>
  includeParser<span class="token punctuation">.</span><span class="token function">applyIncludes</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 获得入参类型</span>
  <span class="token class-name">String</span> parameterType <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;parameterType&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterTypeClass <span class="token operator">=</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 语句类型 默认是XMLLanguageDriver</span>
  <span class="token class-name">String</span> lang <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">LanguageDriver</span> langDriver <span class="token operator">=</span> <span class="token function">getLanguageDriver</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Parse selectKey after includes and remove them.</span>
  <span class="token comment">// 这是生成主键的</span>
  <span class="token comment">// 处理SelectKey节点，在这里会将KeyGenerator加入到Configuration.keyGenerators中</span>
  <span class="token function">processSelectKeyNodes</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">,</span> langDriver<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Parse the SQL (pre: &lt;selectKey&gt; and &lt;include&gt; were parsed and removed)</span>
  <span class="token comment">// 此时，&lt;selectKey&gt; 和 &lt;include&gt; 标签都已被解析完毕并被删除，开始进行SQL解析</span>
  <span class="token class-name">KeyGenerator</span> keyGenerator<span class="token punctuation">;</span>
  <span class="token class-name">String</span> keyStatementId <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token class-name">SelectKeyGenerator</span><span class="token punctuation">.</span><span class="token constant">SELECT_KEY_SUFFIX</span><span class="token punctuation">;</span>
  keyStatementId <span class="token operator">=</span> builderAssistant<span class="token punctuation">.</span><span class="token function">applyCurrentNamespace</span><span class="token punctuation">(</span>keyStatementId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 判断是否已经有解析好的KeyGenerator</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">hasKeyGenerator</span><span class="token punctuation">(</span>keyStatementId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    keyGenerator <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getKeyGenerator</span><span class="token punctuation">(</span>keyStatementId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 全局或者本语句只要启用自动key生成，则使用key生成</span>
    keyGenerator <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;useGeneratedKeys&quot;</span><span class="token punctuation">,</span>
        configuration<span class="token punctuation">.</span><span class="token function">isUseGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sqlCommandType<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token class-name">Jdbc3KeyGenerator</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span> <span class="token operator">:</span> <span class="token class-name">NoKeyGenerator</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取标签中的各个配置属性</span>
  <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> langDriver<span class="token punctuation">.</span><span class="token function">createSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> context<span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">StatementType</span> statementType <span class="token operator">=</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;statementType&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span><span class="token constant">PREPARED</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Integer</span> fetchSize <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getIntAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;fetchSize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Integer</span> timeout <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getIntAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> parameterMap <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;parameterMap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> resultType <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;resultType&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultTypeClass <span class="token operator">=</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>resultType<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> resultMap <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;resultMap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> resultSetType <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;resultSetType&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ResultSetType</span> resultSetTypeEnum <span class="token operator">=</span> <span class="token function">resolveResultSetType</span><span class="token punctuation">(</span>resultSetType<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSetTypeEnum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    resultSetTypeEnum <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getDefaultResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">String</span> keyProperty <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;keyProperty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> keyColumn <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;keyColumn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> resultSets <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;resultSets&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 在MapperBuilderAssistant的帮助下创建MappedStatement对象，并写入到Configuration中</span>
  builderAssistant<span class="token punctuation">.</span><span class="token function">addMappedStatement</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> sqlSource<span class="token punctuation">,</span> statementType<span class="token punctuation">,</span> sqlCommandType<span class="token punctuation">,</span>
      fetchSize<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> parameterMap<span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultTypeClass<span class="token punctuation">,</span>
      resultSetTypeEnum<span class="token punctuation">,</span> flushCache<span class="token punctuation">,</span> useCache<span class="token punctuation">,</span> resultOrdered<span class="token punctuation">,</span>
      keyGenerator<span class="token punctuation">,</span> keyProperty<span class="token punctuation">,</span> keyColumn<span class="token punctuation">,</span> databaseId<span class="token punctuation">,</span> langDriver<span class="token punctuation">,</span> resultSets<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口看到<code>parseStatementNode()</code>方法又臭又长，我们来梳理一下整个流程</p><ol><li>获取标签的id和databaseId，判断当前的语句的databaseId是否是configuration中设置的databaseId，因为MyBatis允许多数据库配置，所以有些语句只对特定数据库生效。</li><li>获取SQL语句的类型，也就是SqlCommandType枚举中的那些类型了。</li><li>获取flushCache、useCache、resultOrdered等属性。</li><li>使用XMLIncludeTransformer类来解析<code>&lt;includ&gt;</code>标签。</li><li>处理<code>useGeneratedKeys</code>属性和<code>&lt;selectKey&gt;</code>标签，用于处理数据库的记录的主键。</li><li>解析标签内的SQL，得到SqlSource对象。</li><li>获取其他属性的值。</li><li>最后调用addMappedStatement方法，构建MappedStatement对象并设置到configuration全局配置类中。</li></ol><h2 id="注解方式" tabindex="-1"><a class="header-anchor" href="#注解方式" aria-hidden="true">#</a> 注解方式</h2><h3 id="注解方式的解析入口" tabindex="-1"><a class="header-anchor" href="#注解方式的解析入口" aria-hidden="true">#</a> 注解方式的解析入口</h3><p>在MapperAnnotationBuilder类的<code>parse() </code>方法中，最终会调用<code>parseStatement(method)</code>方法去解析Statement操作节点</p><h3 id="parsestatement方法" tabindex="-1"><a class="header-anchor" href="#parsestatement方法" aria-hidden="true">#</a> parseStatement方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 解析该方法。主要是解析该方法上的注解信息
 *
 * <span class="token keyword">@param</span> <span class="token parameter">method</span> 要解析的方法
 */</span>
<span class="token keyword">void</span> <span class="token function">parseStatement</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过getParameterType方法获取参数类型</span>
    <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterTypeClass <span class="token operator">=</span> <span class="token function">getParameterType</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取方法的LanguageDriver</span>
    <span class="token keyword">final</span> <span class="token class-name">LanguageDriver</span> languageDriver <span class="token operator">=</span> <span class="token function">getLanguageDriver</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过注解获取SqlSource</span>
    <span class="token function">getAnnotationWrapper</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> statementAnnotationTypes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>statementAnnotation <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// statementAnnotation变量是statementAnnotation类型</span>
        <span class="token keyword">final</span> <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> <span class="token function">buildSqlSource</span><span class="token punctuation">(</span>statementAnnotation<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">,</span> languageDriver<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取SQL语句的类型</span>
        <span class="token keyword">final</span> <span class="token class-name">SqlCommandType</span> sqlCommandType <span class="token operator">=</span> statementAnnotation<span class="token punctuation">.</span><span class="token function">getSqlCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取方法上可能存在的配置信息，配置信息由@Options注解指定</span>
        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token function">getAnnotationWrapper</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Options</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Options</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> mappedStatementId <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 主键自动生成的处理</span>

        <span class="token comment">// 用默认值初始化各项设置</span>

        <span class="token comment">// 返回结果ResultMap处理</span>

        <span class="token comment">// 将获取的映射信息存入Configuration</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法也很长，所以省略了一些内容，其实和XML解析的流程和思想是一样的，只不过解析的对象不一样了，一个是XML，一个是注解。</p>`,32),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","深入浅出Mybatis05：解析Statement操作节点.html.vue"]]);export{d as default};
