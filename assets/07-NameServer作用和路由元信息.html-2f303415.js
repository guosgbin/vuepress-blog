import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,f as e}from"./app-cadb7c17.js";const t="/assets/NameServer的架构和其他角色交互-86007bef.png",p={},o=e('<table><thead><tr><th>版本</th><th>内容</th><th style="text-align:left;">时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td style="text-align:left;">2022年08月01日12:26:16</td></tr><tr><td>V2</td><td>重构，增加NameServer交互图</td><td style="text-align:left;">2023年06月10日01:42:55</td></tr></tbody></table><h2 id="nameserver-的作用" tabindex="-1"><a class="header-anchor" href="#nameserver-的作用" aria-hidden="true">#</a> NameServer 的作用</h2><p>再次拿官网描述：</p><p>NameServer：NameServer 是一个非常简单的 Topic 路由注册中心，其角色类似 Dubbo 中的 zookeeper，支持 Topic、Broker 的动态注册与发现。</p><p>主要包括两个功能：</p><ol><li><strong>Broker 管理</strong>：NameServer 接受 Broker 集群的注册信息并且保存下来作为路由信息的基本数据。然后提供<strong>心跳检测机制，检查 Broker 是否还存活</strong>；</li><li><strong>路由信息管理</strong>：每个 NameServer 将保存关于 Broker 集群的整个路由信息和用于客户端查询的队列信息。然后 Producer 和 Consumer 通过 NameServer 就可以知道整个 Broker 集群的路由信息，从而进行消息的投递和消费；</li></ol><p>**NameServer 几乎无状态节点，因此可集群部署，节点之间无任何信息同步。**Broker 是向每一台 NameServer 注册自己的路由信息，所以每一个 NameServer 实例上面都保存一份完整的路由信息。当某个 NameServer 因某种原因下线了，Broker 仍然可以向其它 NameServer 同步其路由信息， Producer 和 Consumer 仍然可以动态感知 Broker 的路由的信息；</p><p><img src="'+t+`" alt="NameServer的架构和其他角色交互"></p><h2 id="routeinfomanager-路由信息" tabindex="-1"><a class="header-anchor" href="#routeinfomanager-路由信息" aria-hidden="true">#</a> RouteInfoManager 路由信息</h2><p>在 NamesrvController 的构造函数中， 创建了 NameServer 的核心类 RouteInfoManager</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NamesrvController</span><span class="token punctuation">(</span><span class="token class-name">NamesrvConfig</span> namesrvConfig<span class="token punctuation">,</span> <span class="token class-name">NettyServerConfig</span> nettyServerConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   	<span class="token comment">// ...... 省略其他 ......</span>
    
    <span class="token comment">// 创建路由管理类</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>routeInfoManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RouteInfoManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ...... 省略其他 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NameServer 的主要作用是为 Producer 和 Consumer 提供关于 topic 的路由信息，那么 NameServer 就需要存储路由的基础信息，并且能够管理 Broker 节点，包括路由注册、路由删除等功能。</p><p>具体的路由信息保存在 RouteInfoManager 类中，都是 Map 结构。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">BROKER_CHANNEL_EXPIRED_TIME</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReadWriteLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic */</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> topicQueueTable<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerName */</span><span class="token punctuation">,</span> <span class="token class-name">BrokerData</span><span class="token operator">&gt;</span> brokerAddrTable<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* clusterName */</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerName */</span><span class="token operator">&gt;&gt;</span> clusterAddrTable<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerAddr */</span><span class="token punctuation">,</span> <span class="token class-name">BrokerLiveInfo</span><span class="token operator">&gt;</span> brokerLiveTable<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerAddr */</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token comment">/* Filter Server */</span><span class="token operator">&gt;</span> filterServerTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>字段（Map 类型）</th><th>key-value 信息</th><th>含义</th></tr></thead><tbody><tr><td>topicQueueTable</td><td>key 是 topic，value 是 topic 所在队列的元数据</td><td>保存 Topic 和队列的信息，也叫真正的路由信息。一个 Topic 全部的 Queue 可能分布在不同的 Broker 中，也可能分布在同一个 Broker 中，消息发送时根据路由表进行负载均衡；</td></tr><tr><td>brokerAddrTable</td><td>key 是 broker 名称，value 是名称对应的 broker 地址</td><td>存储了 Broker 名字和 Broker 信息的对应信息；</td></tr><tr><td>clusterAddrTable</td><td>key 是集群名称，value 是集群下有那些 brokerName</td><td>集群和 Broker 的对应关系；</td></tr><tr><td>brokerLiveTable</td><td>key 是 broker 的主机地址，value 是 broker 的心跳包内容</td><td>Broker 状态信息，NameServer 每次收到心跳包时会替换该信息；</td></tr><tr><td>filterServerTable</td><td>key 是broker 的主机地址，value 是类模式过滤</td><td>过滤服务器信息。类模式过滤机制在4.4及以后版本被废弃；</td></tr></tbody></table><p>NameServer 的主要工作就是维护这五个变量中存储的信息。</p><p>上面的常量 BROKER_CHANNEL_EXPIRED_TIME 表示 Broker 的默认存活的周期，默认 120 秒，意思就是假如 broker 超过 120 秒没有发送心跳就认为是掉线了，就做路由剔除操作。</p><h3 id="topicqueuetable" tabindex="-1"><a class="header-anchor" href="#topicqueuetable" aria-hidden="true">#</a> topicQueueTable</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic */</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> topicQueueTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>保存 Topic 和队列的信息，也叫真正的路由信息。一个 Topic 全部的 Queue 可能分布在不同的 Broker 中，也可能分布在同一个 Broker 中，消息发送时根据路由表进行负载均衡。</strong></p><p>key 是 topic 的名字，value 是 QueueData 对象的集合。</p><p>单个 QueueData 结构如下所示</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueData</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// broker 名字</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">;</span>
    <span class="token comment">// 读队列个数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> readQueueNums<span class="token punctuation">;</span>
    <span class="token comment">// 写队列个数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> writeQueueNums<span class="token punctuation">;</span>
    <span class="token comment">// 权限</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> perm<span class="token punctuation">;</span>
    <span class="token comment">// topic 同步标记</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> topicSysFlag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="brokeraddrtable" tabindex="-1"><a class="header-anchor" href="#brokeraddrtable" aria-hidden="true">#</a> brokerAddrTable</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerName */</span><span class="token punctuation">,</span> <span class="token class-name">BrokerData</span><span class="token operator">&gt;</span> brokerAddrTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Broker 基础信息，包含 brokerName、所属集群名称、主从 Broker 地址。</strong></p><p>key 是 Broker 的名字，value 是 BrokerData 对象</p><p>BrokerData 结构如下所示</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrokerData</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrokerData</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 集群名字</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cluster<span class="token punctuation">;</span>
    <span class="token comment">// broker 的名字</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">;</span>
    <span class="token comment">// broker 的地址， brokerId 为 0 的是主节点，不是 0 的是从节点</span>
    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Long</span><span class="token comment">/* brokerId */</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token comment">/* broker address */</span><span class="token operator">&gt;</span> brokerAddrs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clusteraddrtable" tabindex="-1"><a class="header-anchor" href="#clusteraddrtable" aria-hidden="true">#</a> clusterAddrTable</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* clusterName */</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerName */</span><span class="token operator">&gt;&gt;</span> clusterAddrTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>存储的是集群中 Cluster 的信息，一个 Cluster 名称对应一个由 BrokerName 组成的集合。</p><p>key 是集群名字，value 是 BrokerName 的集合</p><h3 id="brokerlivetable" tabindex="-1"><a class="header-anchor" href="#brokerlivetable" aria-hidden="true">#</a> brokerLiveTable</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerAddr */</span><span class="token punctuation">,</span> <span class="token class-name">BrokerLiveInfo</span><span class="token operator">&gt;</span> brokerLiveTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Key 是 broker 的地址，value 是 BrokerLiveInfo 对象</p><p>Broker 状态信息，NameServer 每次收到心跳包时会替换该信息。</p><p>BrokerLiveTable 存储的内容是这台 Broker 机器的实时状态，包括上次更新状态的时间戳，<strong>NameServer 会 10 秒检查这个时间戳，那这个时间戳和当前时间戳比较，假如超过 120 秒就认为这个 Broker 无效了，将其从 Broker 列表里清除。</strong></p><p>BrokerLiveInfo 如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">BrokerLiveInfo</span> <span class="token punctuation">{</span>
    <span class="token comment">// 上次收到 Broker 心跳的时间</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lastUpdateTimestamp<span class="token punctuation">;</span>
    <span class="token comment">// 版本号</span>
    <span class="token keyword">private</span> <span class="token class-name">DataVersion</span> dataVersion<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">;</span>
    <span class="token comment">// 主从同步地址，端口</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> haServerAddr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filterservertable" tabindex="-1"><a class="header-anchor" href="#filterservertable" aria-hidden="true">#</a> filterServerTable</h3><p>过滤服务器信息。类模式过滤机制在4.4及以后版本被废弃</p>`,42),r=[o];function l(c,i){return s(),n("div",null,r)}const u=a(p,[["render",l],["__file","07-NameServer作用和路由元信息.html.vue"]]);export{u as default};
