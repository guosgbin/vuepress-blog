import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as e}from"./app-024e0b54.js";const t="/assets/broker长轮询服务-a230073f.png",p="/assets/broker处理消息拉取流程(没有消息读取)-e1b2725d.png",o={},c=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年06月24日15:18:40</td></tr></tbody></table><h2 id="broker-长轮询概述" tabindex="-1"><a class="header-anchor" href="#broker-长轮询概述" aria-hidden="true">#</a> broker 长轮询概述</h2><p>消费者发送拉取消息到 broker，broker 在 PullMessageProcessor#processRequest 中处理消息拉取逻辑。</p><ul><li>假如拉取到消息了，就直接封装消息响应到 Consumer，Consumer 就去消费消息；</li><li>假如没有拉取到消息，就需要将 Consumer 发送来的请求 hold 住，然后开启 broker 端长轮询，当有 Producer 新写消息到 broker 了，broker 发现是该 Consumer 的订阅消息，就会将消息封装响应给 Consumer，结束长轮询。</li></ul><p>broker 长轮询的好处就是防止 broker 端的压力过大，因为如果没有拉取到消息，Consumer 会立即再次发送消息拉取的请求。</p><h2 id="broker-长轮询入口" tabindex="-1"><a class="header-anchor" href="#broker-长轮询入口" aria-hidden="true">#</a> broker 长轮询入口</h2><p>当 Consumer 发送拉消息请求到 broker 端后，如果没有拉取到消息，就需要在 broker 开启长轮询，处理逻辑在 PullMessageProcessor#processRequest 方法，没有拉取到消息的状态码是 ResponseCode.PULL_NOT_FOUND，那么就看这个 switch...case... 分支做的事情。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>brokerAllowSuspend <span class="token operator">&amp;&amp;</span> hasSuspendFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认 1500</span>
    <span class="token keyword">long</span> pollingTimeMills <span class="token operator">=</span> suspendTimeoutMillisLong<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLongPollingEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pollingTimeMills <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getShortPollingTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 拉消息请求的主题</span>
    <span class="token class-name">String</span> topic <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 请求的偏移量</span>
    <span class="token keyword">long</span> offset <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 拉消息请求的队列 id</span>
    <span class="token keyword">int</span> queueId <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建长轮询 PullRequest 对象</span>
    <span class="token class-name">PullRequest</span> pullRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PullRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> pollingTimeMills<span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> subscriptionData<span class="token punctuation">,</span> messageFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将长轮询 PullRequest 对象交给长轮询服务</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getPullRequestHoldService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">suspendPullRequest</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将 response 设置为 null</span>
    <span class="token comment">// 设置成 null 之后，外层的 requestTask 拿到的结果就是 null</span>
    <span class="token comment">// 它是 null 的话，requestTask 内部的 callBack 就不会给客户端发送任何数据了</span>
    response <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 requestHeader 就是消费者发送的拉消息请求的请求头，创建一个 PullRequest 对象，然后交给拉消息长轮询服务 PullRequestHoldService 去处理。</p><p>在分析长轮询的操作之前得分析一些相关类</p><h2 id="broker-长轮询相关类" tabindex="-1"><a class="header-anchor" href="#broker-长轮询相关类" aria-hidden="true">#</a> broker 长轮询相关类</h2><h3 id="pullrequestholdservice-字段分析" tabindex="-1"><a class="header-anchor" href="#pullrequestholdservice-字段分析" aria-hidden="true">#</a> PullRequestHoldService 字段分析</h3><p>PullRequestHoldService 是 broker 的一个后台线程服务，用于处理 broker 拉取消息长轮询的，该类有个关键字段如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 长轮询服务</span>
<span class="token keyword">protected</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic@queueId */</span><span class="token punctuation">,</span> <span class="token class-name">ManyPullRequest</span><span class="token operator">&gt;</span> pullRequestTable <span class="token operator">=</span>
    <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ManyPullRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>key 是 topic@queueId，value 是 ManyPullRequest 类型的值。当 Consumer 发送拉取消息到 broker 后，如果 broker 没有读取到消息，那就需要将此次请求的 topic 和 queueId 作为 key，封装一个 PullRequest 对象放到 ManyPullRequest 中去。其中 ManyPullRequest 其实就是一个存放多个 PullRequest 的容器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManyPullRequest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span> pullRequestList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pullrequest" tabindex="-1"><a class="header-anchor" href="#pullrequest" aria-hidden="true">#</a> PullRequest</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PullRequest</span> <span class="token punctuation">{</span>
    <span class="token comment">// 消费者 rpc 的请求对象</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> requestCommand<span class="token punctuation">;</span>
    <span class="token comment">// 服务器和客户端的 channel</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Channel</span> clientChannel<span class="token punctuation">;</span>
    <span class="token comment">// 长轮询超时时间，默认 15 秒</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">;</span>
    <span class="token comment">// 长轮询开始时间</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> suspendTimestamp<span class="token punctuation">;</span>
    <span class="token comment">// 从 RemotingCommand 中 header 提起出来的本次 pull 队列的 offset</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> pullFromThisOffset<span class="token punctuation">;</span>
    <span class="token comment">// 该主题的订阅数据</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SubscriptionData</span> subscriptionData<span class="token punctuation">;</span>
    <span class="token comment">// 消息过滤器，一般都是 tag 过滤</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageFilter</span> messageFilter<span class="token punctuation">;</span>
 
    
    <span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PullRequest 其实就是封装的来自 Consumer 的请求的数据，如下</p><ul><li><code>RemotingCommand requestCommand</code>：就是来自 Consumer 的拉取消息的请求数据；</li><li><code>Channel clientChannel</code>：Consumer 和 broker 的通信 Channel；</li><li><code>long timeoutMillis</code>：broker 保持长轮询的时间；</li><li><code>long suspendTimestamp</code>：broker 长轮询的开始时间；</li><li><code>long pullFromThisOffset</code>：就是 Consumer 此次需要拉取的消息的偏移量；</li><li><code>SubscriptionData subscriptionData</code>：Consumer 的订阅的 topic 的数据；</li><li><code>MessageFilter messageFilter</code>：消息过滤器；</li></ul><h2 id="broker-长轮询流程" tabindex="-1"><a class="header-anchor" href="#broker-长轮询流程" aria-hidden="true">#</a> broker 长轮询流程</h2><p>先看流程图：</p><p><img src="`+t+`" alt="broker长轮询服务"></p><h3 id="添加-pullrequest-到长轮询服务" tabindex="-1"><a class="header-anchor" href="#添加-pullrequest-到长轮询服务" aria-hidden="true">#</a> 添加 PullRequest 到长轮询服务</h3><p>当 broker 没有读取到 Consumer 需要的消息后，就会封装此次 Consumer 的请求数据为 PullRequest 对象，添加到 PullRequestHoldService 长轮询服务的 Map 字段中，上面已经分析过了，key 是 topic@queueId 格式的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 长轮询服务</span>
<span class="token keyword">protected</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic@queueId */</span><span class="token punctuation">,</span> <span class="token class-name">ManyPullRequest</span><span class="token operator">&gt;</span> pullRequestTable <span class="token operator">=</span>
    <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ManyPullRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pullrequestholdservice-定时任务检查" tabindex="-1"><a class="header-anchor" href="#pullrequestholdservice-定时任务检查" aria-hidden="true">#</a> PullRequestHoldService 定时任务检查</h3><p>PullRequestHoldService 是一个线程服务，关注它的 run 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLongPollingEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 服务器开启长轮询，每次循环休眠 5 秒</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 关闭的请求，每次休眠 1 秒</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getShortPollingTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">long</span> beginLockTimestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>systemClock<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkHoldRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// ...... 省略 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service has exception. &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>broker 是默认开启长轮询的，所以 PullRequestHoldService#run 的意思就是，每 5 秒调用 checkHoldRequest 方法去检查是否有长轮询服务需要检查。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">checkHoldRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestTable<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 循环体内为每个 topic@queueId 的 kv</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> kArray <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">TOPIC_QUEUEID_SEPARATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> kArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取主题</span>
            <span class="token class-name">String</span> topic <span class="token operator">=</span> kArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取队列 id</span>
            <span class="token keyword">int</span> queueId <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>kArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 到存储模块查询该 consumequeue 的最大 offset</span>
            <span class="token keyword">final</span> <span class="token keyword">long</span> offset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxOffsetInQueue</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 通知消息到达的逻辑</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyMessageArriving</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;check hold request failed. topic={}, queueId={}&quot;</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是读取 key 表示的 topic 和 queueId，通过 topic 和 queueId 去读取 broker 中的 ConsumeQueue 的最大逻辑偏移量。我们就可以拿 ConsumeQueue 中的最大逻辑偏移量和 Consumer 发送的拉取消息的请求中的要拉去的逻辑偏移量做比较，如果 ConsumeQueue 中的 maxOffset 大，说明有消息可以给 Consumer 返回了，就可以结束长轮询了，后面具体分析。</p><p>可以看到就是调用了 notifyMessageArriving 方法。</p><h3 id="notifymessagearriving-的两个调用位置" tabindex="-1"><a class="header-anchor" href="#notifymessagearriving-的两个调用位置" aria-hidden="true">#</a> notifyMessageArriving 的两个调用位置</h3><p><strong>（1）消息转发服务 ReputMessageService 中调用</strong></p><p>我们知道当 Producer 写入消息到 CommitLog 后，消息转发服务 ReputMessageService 会将新接收到的消息转发到 ConsumeQueue 和 Index 文件，在这里当读取到一个转发消息后，就会去提醒 broker 的长轮询服务有新的消息来了，你快去检查一下是否有长轮询的请求在等着。方法是 ReputMessageService#doReput：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略 ......</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BrokerRole</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span> <span class="token operator">!=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">.</span><span class="token function">isLongPollingEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageArrivingListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageArrivingListener<span class="token punctuation">.</span><span class="token function">arriving</span><span class="token punctuation">(</span>dispatchRequest<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            dispatchRequest<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getConsumeQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
            dispatchRequest<span class="token punctuation">.</span><span class="token function">getTagsCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            dispatchRequest<span class="token punctuation">.</span><span class="token function">getBitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatchRequest<span class="token punctuation">.</span><span class="token function">getPropertiesMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">notifyMessageArrive4MultiQueue</span><span class="token punctuation">(</span>dispatchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...... 省略 ......         </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到就是调用 MessageArrivingListener#arriving 方法将消息的属性传递过去了，这个方法最终会调用到长轮询服务 PullRequestHoldService 的 notifyMessageArriving 方法。</p><p><strong>（2）消息长轮询服务 PullRequestHoldService 定时调用</strong></p><p>就是上一小节分析的。</p><p>那么接下来分析一下 notifyMessageArriving 做了什么事情</p><h3 id="notifymessagearriving-流程" tabindex="-1"><a class="header-anchor" href="#notifymessagearriving-流程" aria-hidden="true">#</a> notifyMessageArriving 流程</h3><p><strong>（1）第一步：获取 PullRequestHoldService 服务中长轮询的 PullRequest。</strong></p><p><strong>（2）第二步：遍历 PullRequest 列表，依次处理。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span> replayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PullRequest</span> request <span class="token operator">:</span> requestList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么接下来分析单个 PullRequest 是如何处理的</p><p><strong>（3）第三步：如果 ConsumeQueue 的最大逻辑偏移量 maxOffset 比 Consumer 需要拉取的偏移量要大，说明可以给 Consumer 响应消息了，在真正响应消息前，需要通过消息过滤器过滤一下消息，如果是 TAG 过滤，在 broker 端是通过 tag 的哈希值简单过滤的，其实在 Consumer 端会通过真正的 tag 去进行过滤。当过滤后还有消息，就需要继续调用 broker 消息拉取处理器 PullMessageProcessor 的对应方法去读取消息并响应给 Consumer 了。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> newestOffset <span class="token operator">=</span> maxOffset<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>newestOffset <span class="token operator">&lt;=</span> request<span class="token punctuation">.</span><span class="token function">getPullFromThisOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 保证 newestOffset 为 queue 的 maxOffset</span>
    newestOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxOffsetInQueue</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 条件成立说明</span>
<span class="token comment">// 这个 request 关注的 queue 内有本次 pull 查询的数据了，长轮询该结束了</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>newestOffset <span class="token operator">&gt;</span> request<span class="token punctuation">.</span><span class="token function">getPullFromThisOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断消息是否需要被过滤，broker 端使用的是 tagCode 进行过滤的，也就是真正的 tag 的哈希值去过滤的</span>
    <span class="token comment">// 在消费者那边会使用真正的tag 去过滤，因为哈希值可能会重复</span>
    <span class="token keyword">boolean</span> match <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMessageFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMatchedByConsumeQueue</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">,</span>
                                                                       <span class="token keyword">new</span> <span class="token class-name">ConsumeQueueExt<span class="token punctuation">.</span>CqExtUnit</span><span class="token punctuation">(</span>tagsCode<span class="token punctuation">,</span> msgStoreTime<span class="token punctuation">,</span> filterBitMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// match by bit map, need eval again when properties is not null.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>match <span class="token operator">&amp;&amp;</span> properties <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        match <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMessageFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMatchedByCommitLog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将满足条件的 pullRequest 再次封装出 requestTask 提交到线程池内执行</span>
            <span class="token comment">// 会再次调用 pullMessageProcess.processRequest(..)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getPullMessageProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRequestWhenWakeup</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getClientChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                                                     request<span class="token punctuation">.</span><span class="token function">getRequestCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;execute request when wakeup failed.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）第四步：判断 broker 长轮询的时间是否超时，默认是 15 秒，如果超时了，也会调用 broker 消息拉取处理器 PullMessageProcessor 的对应方法去读取消息并响应给 Consumer 了，当然这里没有读到消息也会响应给消费者。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 判断该 pullrequest 长轮询请求是否超时，超时了也是会将其提交到线程池内执行 pullMessageProcess.processRequest(..)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSuspendTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getPullMessageProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRequestWhenWakeup</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getClientChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            request<span class="token punctuation">.</span><span class="token function">getRequestCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;execute request when wakeup failed.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（5）第五步：如果没有新消息写入到 broker，也长轮询没有超时，那么就需要将 PullRequest 归还到长轮询服务 PullRequestHoldService 中，等待下一次检查。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   replayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>replayList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mpr<span class="token punctuation">.</span><span class="token function">addPullRequest</span><span class="token punctuation">(</span>replayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本次分析了 broker 的长轮询服务，broker 处理消息拉取的整体流程图如下：</p><p><img src="`+p+'" alt="broker处理消息拉取流程(没有消息读取)"></p><p>其实退出长轮询后还是调用的是 PullMessageProcessor#processRequest 方法，只是最后一个参数传的是 false，表示此次不允许长轮询，那么就一定会响应给 Consumer 了。</p>',56),l=[c];function u(i,r){return s(),a("div",null,l)}const v=n(o,[["render",u],["__file","22-broker处理消息拉取请求-2-长轮询.html.vue"]]);export{v as default};
