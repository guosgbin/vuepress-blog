import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-105fe43b.js";const t="/assets/image-20230623145403564-7503245-7f809e10.png",p="/assets/image-20230623150157021-7503718-a2a79157.png",c="/assets/消息队列负载均衡机制-a8220478.png",o={},l=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年06月23日15:42:44</td></tr></tbody></table><h2 id="消息拉取入口" tabindex="-1"><a class="header-anchor" href="#消息拉取入口" aria-hidden="true">#</a> 消息拉取入口</h2><h3 id="消息拉取入口-1" tabindex="-1"><a class="header-anchor" href="#消息拉取入口-1" aria-hidden="true">#</a> 消息拉取入口</h3><p>前面在分析 MQClientInstance 的时候，MQClientInstance 启动的时候顺带启动了 PullMessageService 这个后台线程服务，这个服务就是消息消费的入口。</p><p>在 PullMessageService 中有个队列，用于存放 PullRequest 对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span> pullRequestQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再 PullMessageService#run 方法中，主要就是消费这个 PullRequest 对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 每执行一次业务逻辑，检测一下其运行状态，可以通过其他线程将 Stopped 设置为 true，从而停止该线程。</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">PullRequest</span> pullRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 调用 pullMessage 方法进行消息拉取。</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pullMessage</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Pull Message Service Run Method exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就是调用消费者的拉取消息的方法 DefaultMQPushConsumerImpl#pullMessage 尝试去 broker 拉取消息了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pullMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">PullRequest</span> pullRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
    <span class="token keyword">final</span> <span class="token class-name">MQConsumerInner</span> consumer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">selectConsumer</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>consumer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将consumer强制转换为DefaultMQPushConsumerImpl，也就是PullMessageService</span>
        <span class="token class-name">DefaultMQPushConsumerImpl</span> impl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultMQPushConsumerImpl</span><span class="token punctuation">)</span> consumer<span class="token punctuation">;</span>
        impl<span class="token punctuation">.</span><span class="token function">pullMessage</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;No matched consumer for the PullRequest {}, drop it&quot;</span><span class="token punctuation">,</span> pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pullrequest-对象" tabindex="-1"><a class="header-anchor" href="#pullrequest-对象" aria-hidden="true">#</a> PullRequest 对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PullRequest</span> <span class="token punctuation">{</span>
    <span class="token comment">// 消费者组</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">;</span>
    <span class="token comment">// 待拉取消费队列</span>
    <span class="token keyword">private</span> <span class="token class-name">MessageQueue</span> messageQueue<span class="token punctuation">;</span>
    <span class="token comment">// 消息处理队列，从 Broker 中拉取到的消息会先存入 ProcessQueue，然后再提交到消费者消费线程池中进行消费</span>
    <span class="token comment">// 消息本地的队列快照，从服务器拉取下来的消息要先放到该快照队列内，被消费的消息需要从该队列移除走</span>
    <span class="token keyword">private</span> <span class="token class-name">ProcessQueue</span> processQueue<span class="token punctuation">;</span>
    <span class="token comment">// 待拉取的 MessageQueue 偏移量，broker 需要根据这个 offset 定位消息位置，然后才可以获取一批消息</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> nextOffset<span class="token punctuation">;</span>
    <span class="token comment">// 是否被锁定</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> previouslyLocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

	<span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>String consumerGroup</code>：消费者组；</li><li><code>MessageQueue messageQueue</code>：消费者向哪一个队列拉取消息消费；</li><li><code>ProcessQueue processQueue</code>：消息本地的队列快照，从 broker 拉取的消息先存到该快照队列内，然后再提交到消费者消费线程池中去消费，消费完的消息需要从这个队列中移除；</li><li><code>long nextOffset</code>：需要从队列的哪一个偏移量开启拉取消息；</li><li><code>boolean previouslyLocked</code>：是否被锁定，顺序消费要用的；</li></ul><p>既然需要往 PullMessageService 的阻塞队列中存放 PullRequest 对象，消费者才会尝试去 broker 拉取消息，那么 PullRequest 对象是什么时候添加到阻塞队列中的呢？</p><h2 id="消息队列负载均衡" tabindex="-1"><a class="header-anchor" href="#消息队列负载均衡" aria-hidden="true">#</a> 消息队列负载均衡</h2><h3 id="消息队列负载均衡服务" tabindex="-1"><a class="header-anchor" href="#消息队列负载均衡服务" aria-hidden="true">#</a> 消息队列负载均衡服务</h3><p>消息队列的负载均衡和重分布是由 RebalanceService 处理的，同样是在 MQClientInstance 中启动的。这个后台线程服务会每隔 20 秒钟去处理消息队列的负载均衡和重分布。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * RebalanceService 线程默认每隔 20s 执行一次 mqClientFactory.doRebalance() 方法
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认20秒</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span>waitInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mqClientFactory<span class="token punctuation">.</span><span class="token function">doRebalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终会调用到每个消费者内部的 RebalanceImpl#doRebalance 方法，主要就是针对单个主题去做消费队列的负载均衡工作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doRebalance</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> isOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前消费者的订阅信息</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SubscriptionData</span><span class="token punctuation">&gt;</span></span> subTable <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSubscriptionInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subTable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SubscriptionData</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> subTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span> topic <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 针对单个主题进行消息队列重新负载</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rebalanceByTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> isOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>topic<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">RETRY_GROUP_TOPIC_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;rebalanceByTopic Exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 调这个方法的原因，因为可能调用了 unsubscribe 方法取消订阅了主题</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">truncateMessageQueueNotMyTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在真正分析消费队列的重负载工作之前得先了解 RebalanceImpl。</p><h3 id="rebalanceimpl-字段分析" tabindex="-1"><a class="header-anchor" href="#rebalanceimpl-字段分析" aria-hidden="true">#</a> RebalanceImpl 字段分析</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 分配到当前消费者的队列信息，key 是 MessageQueue，value 是 ProcessQueue（队列再消费者端的快照）</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">&gt;</span></span> processQueueTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 主题的队列分布信息</span>
<span class="token comment">// 会在消费者启动的时候主动从 nameserver 拉取一次消息订阅信息</span>
<span class="token comment">// 客户端实例里有定时任务，从 nameserver 里拉取最新的主题路由信息</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic */</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> topicSubscribeInfoTable <span class="token operator">=</span>
    <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 消费者订阅信息，key 是主题，value 是主题的订阅信息</span>
<span class="token comment">// 在程序员的业务代码中，subscribe 订阅主题会添加数据到此 map</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span> <span class="token comment">/* topic */</span><span class="token punctuation">,</span> <span class="token class-name">SubscriptionData</span><span class="token operator">&gt;</span> subscriptionInner <span class="token operator">=</span>
    <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SubscriptionData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当前消费者的消费者组</span>
<span class="token keyword">protected</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">;</span>
<span class="token comment">// 当前消费者的消费模式，并发消费还是顺序消费</span>
<span class="token keyword">protected</span> <span class="token class-name">MessageModel</span> messageModel<span class="token punctuation">;</span>

<span class="token comment">// 队列分配策略</span>
<span class="token keyword">protected</span> <span class="token class-name">AllocateMessageQueueStrategy</span> allocateMessageQueueStrategy<span class="token punctuation">;</span>
<span class="token comment">// MQ 的客户端实例，就是发送和接收网络请求的</span>
<span class="token keyword">protected</span> <span class="token class-name">MQClientInstance</span> mQClientFactory<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先是三个 Map：</p><ol><li><code>processQueueTable</code>：该 Map 存储的是当前消费者负责消费的消息队列和其对应的 ProcessQueue 本地消费快照；</li><li><code>topicSubscribeInfoTable</code>：主题的队列分布信息，在 MQClientInstance 中的定时任务去 NameServer 拉取主题的路由信息，这个Map 的数据就是在这里维护的；</li><li><code>subscriptionInner</code>：当前消费者的消费订阅信息，指定要消费那些主题的消息；</li></ol><p>其他字段：</p><ul><li><code>String consumerGroup</code>：当前消费者的消费者组名字；</li><li><code>MessageModel messageModel</code>：当前消费者的消费模式；</li><li><code>AllocateMessageQueueStrategy allocateMessageQueueStrategy</code>：队列的分配策略；</li><li><code>MQClientInstance mQClientFactory</code>：生产者的客户端实例；</li></ul><h3 id="负载均衡具体流程" tabindex="-1"><a class="header-anchor" href="#负载均衡具体流程" aria-hidden="true">#</a> 负载均衡具体流程</h3><p>继续看消息队列的负载均衡机制，RebalanceImpl#rebalanceByTopic，这里我们主要分析集群模式的负载均衡，不分析广播模式的负载均衡了。</p><p><strong>（1）第一步：获取当前订阅的某个主题在 broker 上的消费队列信息，然后从 broker 获取消费者组内所有的消费者的 id（这个数据是通过心跳包维护的）；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 从 topic 订阅信息缓存表中获取主题对应的队列信息</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicSubscribeInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取当前消费者组下所有客户端 id 集合 （从 broker 获取，broker 中的该数据是心跳维护的）</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cidAll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">findConsumerIdList</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> consumerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）第二步：将 topic 对应的消费队列信息进行排序，消费者组下所有的消费者 id 排序，这样就能保证同一个消费组内看到的视图一致，确保同一个消费队列不会被多个消费者分配；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqAll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mqAll<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>mqSet<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 对cidAll、mqAll进行排序。</span>
<span class="token comment">// 这一步很重要，同一个消费组内看到的视图应保持一致，确保同一个消费队列不会被多个消费者分配。</span>

<span class="token comment">// 队列排序</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>mqAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 客户端 id 排序</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cidAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**（3）第三步：通过队列分配策略获取当前消费者分配到的队列。**这一步的源码不分析了，待会儿直接看图。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 分配策略得到的结果</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> allocateResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回值：分配给当前消费者的队列集合</span>
    allocateResult <span class="token operator">=</span> strategy<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>consumerGroup<span class="token punctuation">,</span> <span class="token comment">// 消费者组</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 当前消费者 id</span>
        mqAll<span class="token punctuation">,</span> <span class="token comment">// 当前全部队列集合（包括所有 broker 上该主题的 mq）</span>
        cidAll<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前消费者组下全部消费者 id 集合</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>

<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> allocateResultSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>allocateResult <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    allocateResultSet<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>allocateResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**（4）第四步：根据此次分配的队列的结果，判断是否需要做队列重分配的工作。**后面具体分析</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateProcessQueueTableInRebalance</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> allocateResultSet<span class="token punctuation">,</span> isOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="队列分配策略" tabindex="-1"><a class="header-anchor" href="#队列分配策略" aria-hidden="true">#</a> 队列分配策略</h3><p>RocketMQ 提供五种队列分配策略，这里分析两种常用的。</p><h4 id="平均分配" tabindex="-1"><a class="header-anchor" href="#平均分配" aria-hidden="true">#</a> 平均分配</h4><p>AllocateMessageQueueAveragely</p><p><img src="`+t+'" alt="image-20230623145403564"></p><p>假如某个 topic 有四个队列</p><ul><li>假如消费者组中有 2 个消费者：每个消费者分两个队列；</li><li>假如消费者组中有 3 个消费者：第一个消费者分两个队列，剩下两个消费者分别消费一个队列；</li><li>假如消费者组中有 4 个消费者：每个消费者分一个队列；</li><li>假如消费者组中有 5 个消费者：因为只有四个队列，所以最后一个消费者无法消费；</li></ul><p>消息队列分配原则为一个消费者可以分配多个消息队列，但同一个消息队列只会分配给一个消费者，如果消费者个数大于消息队列数量，则有些消费者无法消费消息。</p><h4 id="平均环形分配" tabindex="-1"><a class="header-anchor" href="#平均环形分配" aria-hidden="true">#</a> 平均环形分配</h4><p>AllocateMessageQueueAveragelyByCircle</p><p><img src="'+p+'" alt="image-20230623150157021"></p><h3 id="对比消息队列是否变化" tabindex="-1"><a class="header-anchor" href="#对比消息队列是否变化" aria-hidden="true">#</a> 对比消息队列是否变化</h3><p><img src="'+c+`" alt="消息队列负载均衡机制"></p><p>RebalanceImpl#updateProcessQueueTableInRebalance 方法的入参如下：</p><ul><li><code>String topic</code>：当前处理的主题；</li><li><code>Set&lt;MessageQueue&gt; mqSet</code>：新分配的消费队列；</li><li><code>boolean isOrder</code>：是否是顺序消费；</li></ul><p>该方法主要分为两步：</p><ul><li>第一步：获取当前消费者目前正在消费的那些队列信息，和新分配的队列信息做比较：如果某个队列被分配到别的消费者了，当前消费者需要停止消费这个队列的消息，并将自己的消费进度保存起来，如果是集群模式，则是将消费进度发到 broker 端保存起来。</li><li>第二步：如果新的队列分配当前消费者了，则需要创建一个 PullRequest 对象，给拉消息的后台线程服务 PullMessageService 去处理了。</li></ul><h4 id="处理不再消费的队列" tabindex="-1"><a class="header-anchor" href="#处理不再消费的队列" aria-hidden="true">#</a> 处理不再消费的队列</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 队列元信息</span>
    <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 队列在消费者端的快照</span>
    <span class="token class-name">ProcessQueue</span> pq <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 条件成立，说明该 mq 是本次 rbl 分配算法计算的主题，因为processQueueTable中会存放多个 topic 的信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 条件成立：mqSet 最新分配给当前消费者的结果（指定主题）不包含 mq，</span>
        <span class="token comment">// 说明该 mq 经过 rbl 计算之后，被分配到其他 consumer 节点了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mqSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将 pq 的删除状态设置为 true，消费任务会一直检查这个状态，如果这个状态变成删除态，消费任务会立马退出</span>
            pq<span class="token punctuation">.</span><span class="token function">setDropped</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeUnnecessaryMessageQueue</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> pq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 从processQueueTable中移除该 kv</span>
                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 说明当前消费者消费的队列发生了变化</span>
                changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, remove unnecessary mq, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// ...... 省略 ......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要就是将 ProcessQueue 设置为不再消费，<code>pq.setDropped(true);</code>，然后从 ProcessQueue 中移除。</p><h4 id="处理新消费的队列" tabindex="-1"><a class="header-anchor" href="#处理新消费的队列" aria-hidden="true">#</a> 处理新消费的队列</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span> pullRequestList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageQueue</span> mq <span class="token operator">:</span> mqSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 条件成立：说明当前 mq 是 rbl 之后，新分配给当前 consumer 的队列</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略顺序消费的处理 ......</span>
        <span class="token comment">// 删除冗余数据（脏数据） offset</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeDirtyOffset</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 为新分配到当前消费者的 mq，创建 pq（快照队列）</span>
        <span class="token class-name">ProcessQueue</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> nextOffset <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 从服务器拉取 mq 的消费进度</span>
            nextOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computePullFromWhereWithException</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token comment">// ...... 省略 ......</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextOffset <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 保存 kv key：messageQueue value：上面创建的 processQueue</span>
            <span class="token class-name">ProcessQueue</span> pre <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> pq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, mq already exists, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, add a new mq, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 拉消息服务依赖 PullRequest 对象进行拉消息工作</span>
                <span class="token class-name">PullRequest</span> pullRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PullRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                pullRequest<span class="token punctuation">.</span><span class="token function">setConsumerGroup</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pullRequest<span class="token punctuation">.</span><span class="token function">setNextOffset</span><span class="token punctuation">(</span>nextOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pullRequest<span class="token punctuation">.</span><span class="token function">setMessageQueue</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pullRequest<span class="token punctuation">.</span><span class="token function">setProcessQueue</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pullRequestList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
                changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, add new mq failed, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将 PullRequest 加入 PullMessageService，以便唤醒 PullMessageService 线程。</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchPullRequest</span><span class="token punctuation">(</span>pullRequestList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要就是获取当前新加入的队列的消费进度，如果是集群模式就是从 broker 获取了，然后将当前队列封装加入到 ProcessQueue 队列，然后封装一个 PullRequest 对象，从而 PullMessageService 线程就可以去处理消费新队列的逻辑了。</p>`,60),u=[l];function i(k,r){return s(),a("div",null,u)}const v=n(o,[["render",i],["__file","19-消息拉取入口和消息队列负载均衡.html.vue"]]);export{v as default};
