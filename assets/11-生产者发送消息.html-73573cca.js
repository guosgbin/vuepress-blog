import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-e8360c54.js";const t="/assets/image-20230613003433226-378e54eb.png",p="/assets/image-20230613003701672-983bd457.png",o="/assets/image-20230613003858835-c1964487.png",c="/assets/生产者发送消息流程图-0b15ab13.png",l="/assets/image-20230615005759903-11009aef.png",i="/assets/image-20230615005912977-03752826.png",u={},k=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年08月08日09:10:24</td></tr><tr><td>V2</td><td>重构</td><td>2023年06月16日13:27:53</td></tr></tbody></table><h2 id="本文分析流程" tabindex="-1"><a class="header-anchor" href="#本文分析流程" aria-hidden="true">#</a> 本文分析流程</h2><p>来几个疑问：</p><ol><li>RocketMQ 中消息的类型有哪些？</li><li>客户端（生产者和消费者）的 topic 的路由信息是如何维护的？</li><li>发送消息的主体流程是怎么样的？</li><li>要发送的消息队列如何进行负载？</li><li>故障规避机制？</li><li>消息发送重试规则？</li></ol><h2 id="消息发送的类型和入口" tabindex="-1"><a class="header-anchor" href="#消息发送的类型和入口" aria-hidden="true">#</a> 消息发送的类型和入口</h2><p>RocketMQ 消息发送在发送方式上分为三种</p><ol><li>同步发送；</li><li>异步发送；</li><li>单向发送；</li></ol><p>RocketMQ 在发送消息的类型分为以下几种</p><ol><li>普通消息；</li><li>顺序消息；</li><li>延迟消息；</li><li>事务消息；</li><li>单向消息；</li><li>批量消息；</li></ol><p>发送消息的入口在 DefaultMQProducerImpl 类中，本次分析以异步发送消息为例分析，入口是 DefaultMQProducerImpl#send(Message, SendCallback)</p><h2 id="生产者的-topic-路由信息" tabindex="-1"><a class="header-anchor" href="#生产者的-topic-路由信息" aria-hidden="true">#</a> 生产者的 topic 路由信息</h2><h3 id="topic-路由信息对象" tabindex="-1"><a class="header-anchor" href="#topic-路由信息对象" aria-hidden="true">#</a> topic 路由信息对象</h3><blockquote><p>RocketMQ 中的路由消息是持久化在 Broker 中的，NameServer 中的路由信息来自 Broker 的心跳包并存储在内存中。</p></blockquote><p>既然生产者要给某个 topic 发送消息，那么生产者就需要知道这个 topic 的队列分布在那个 broker 上。生产者本地缓存（内存中）保存 topic 的路由信息，当生产者发送消息时，需要尝试获取 topic 的路由信息。</p><p>topic 的路由信息用 TopicPublishInfo 类封装，TopicPublishInfo 类的字段如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicPublishInfo</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是否是顺序消息</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> orderTopic <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 标记是否有 topicRouteData 数据</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> haveTopicRouterInfo <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 队列列表</span>
    <span class="token comment">// 当前主题 topic 在那些 broker 主机上有队列</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> messageQueueList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 线程本地对象，选择发送到哪一个 queue</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ThreadLocalIndex</span> sendWhichQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 主题路由数据，主要是 QueueData 和 brokerDatas</span>
    <span class="token keyword">private</span> <span class="token class-name">TopicRouteData</span> topicRouteData<span class="token punctuation">;</span>
	
    <span class="token comment">// 省略...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>boolean orderTopic</code>：是否是顺序消息；</li><li><code>boolean haveTopicRouterInfo</code>：标记是否有该 topic 的路由信息；</li><li><code>List&lt;MessageQueue&gt; messageQueueList</code>：当前 topic 在那些 broker 主机上有队列；</li><li><code>ThreadLocalIndex sendWhichQueue</code>：用于选择消息发送到那个队列上去；</li><li><code>TopicRouteData topicRouteData</code>：topic 路由信息；</li></ul><h3 id="topic-路由信息的维护原理" tabindex="-1"><a class="header-anchor" href="#topic-路由信息的维护原理" aria-hidden="true">#</a> topic 路由信息的维护原理</h3><p>生产者给 topic 发送一个消息时，需要先查询 topic 的路由信息。在第一次发送某个 topic 的时候会向 NameServer 集群中查找这个 topic 的路由信息，然后把查找的路由信息保存在生产者的内存中。</p><p>而且在生产者启动的时候会启动一个定时任务，这个定时任务会每 30 秒定时从 NameServer 中查询 topic 的最新的路由信息。如果成功查询到路由信息，会更新本地 topic 路由信息缓存。定时任务入口如下：</p><p>我们需要了解一个特殊的主题，RocketMQ 写死的 「TBW102」，也就是 AUTO_CREATE_TOPIC_KEY_TOPIC。这个主题的作用是自动创建主题，当消息发送者向一个不存在的 topic 发送消息时，向 NameServer 查询该 topic 的路由信息会先返回空，如果开启了自动创建 topic 机制，会使用一个默认的 topic 名再次从 NameServer 查询路由信息，然后消息发送者会使用默认 topic 的路由信息进行负载均衡，但不会直接使用默认路由信息为新 topic 创建对应的路由信息。</p><blockquote><p><strong>RocketMQ 中的路由消息是持久化在 Broker 中的，NameServer 中的路由信息来自 Broker 的心跳包并存储在内存中。</strong></p></blockquote><p><strong>（1）发送消息时，本地内存有路由信息的情况：</strong></p><p><img src="`+t+'" alt="image-20230613003433226"></p><p><strong>（2）发送消息时，本地内存中没有 topic 的路由信息，去 NameServer 拉取到了路由信息</strong></p><p><img src="'+p+'" alt="image-20230613003701672"></p><p><strong>（3）发送消息时，本地内存中没有 topic 的路由信息， NameServer 也没有对应的路由信息。如果开启了自动创建 topic 机制，会使用一个默认的主题 TBW102 再次从 NameServer 查询路由信息</strong></p><p><img src="'+o+`" alt="image-20230613003858835"></p><h3 id="topic-路由信息维护的源码分析" tabindex="-1"><a class="header-anchor" href="#topic-路由信息维护的源码分析" aria-hidden="true">#</a> topic 路由信息维护的源码分析</h3><p>在 DefaultMQProducerImpl 类中有个 topicPublishInfoTable 的 Map</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic */</span><span class="token punctuation">,</span> <span class="token class-name">TopicPublishInfo</span><span class="token operator">&gt;</span> topicPublishInfoTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TopicPublishInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到 key 就是 topic 名字，value 就是 TopicPublishInfo 对象了。在给 topic 发送消息时会先查询生产者本地内存保存的 topic 的路由信息。</p><p>那么 topicPublishInfoTable 这个 Map 的数据是怎么维护的呢？</p><p>（1）定时任务从 NameServer 拉取 topic 的路由信息；</p><p>（2）假如第一次给某个 topic 发送消息时，本地内存是没有该 topic 的路由信息的，所以此时会从 NameServer 中拉取该 topic 的路由信息，并保存到本地内存中；</p><p>（3）生产者启动的时候会向 topicPublishInfoTable 中注册一个特殊的主题 「TBW102」的路由信息；</p><h4 id="第一次给-topic-发送消息" tabindex="-1"><a class="header-anchor" href="#第一次给-topic-发送消息" aria-hidden="true">#</a> 第一次给 topic 发送消息</h4><p>在消息发送的方法 DefaultMQProducerImpl#sendDefaultImpl 中，先会尝试获取 topic 的路由信息，也就是下面这一行代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取当前消息 topic 的发布信息，需要依赖他里面的 MessageQueue 信息，选择一个队列后面去发送消息使用</span>
<span class="token class-name">TopicPublishInfo</span> topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryToFindTopicPublishInfo</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>继续跟进 DefaultMQProducerImpl#tryToFindTopicPublishInfo 逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">TopicPublishInfo</span> <span class="token function">tryToFindTopicPublishInfo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从生产者本地发布信息映射表尝试获取 topic 的发布信息</span>
    <span class="token class-name">TopicPublishInfo</span> topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 条件成立说明生产者本地保存的指定 topic 的发布信息是空的，需要从 NameServer 获取发布信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> topicPublishInfo <span class="token operator">||</span> <span class="token operator">!</span>topicPublishInfo<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TopicPublishInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 客户端从 nameserver 更新该 topic 的路由数据</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 正常情况，这里拿到的主题发布信息是有数据的</span>
        <span class="token comment">// 特殊情况，这里可能因为 nameserver 没有 topic 路由数据，所以这里返回的是 new TopicPublishInfo()</span>
        topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 条件成立，说明这个发布信息可用，直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>topicPublishInfo<span class="token punctuation">.</span><span class="token function">isHaveTopicRouterInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> topicPublishInfo<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> topicPublishInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 走到这里，原因是 nameserver 没有 topic 路由数据，所以这里返回的是 new TopicPublishInfo()</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> topicPublishInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的方法很清楚</p><ol><li>会先尝试在生产者本地内存中获取当前 topic 的路由信息，假如有且路由信息可用，则直接返回；</li><li>假如生产者本地缓存在没有当前 topic 的路由信息，那么会调用 MQClientInstance#updateTopicRouteInfoFromNameServer 方法去 NameServer 获取，并保存在本地内存中，假如获取的路由信息可用，也直接返回；</li><li>假如 NameServer 中没有该 topic 的路由信息，则用默认的主题 TBW102 去NameServer 查找 TBW102 的路由信息；</li></ol><p>关于 updateTopicRouteInfoFromNameServer 方法，后面会详细分析，这里知道个流程就行。</p><h4 id="定时任务维护路由信息" tabindex="-1"><a class="header-anchor" href="#定时任务维护路由信息" aria-hidden="true">#</a> 定时任务维护路由信息</h4><p>前面分析过第一次给 topic 发送消息时，会将路由信息保存到 DefaultMQProducerImpl 类中的 topicPublishInfoTable 的 Map 中，然后会有一个定时任务每隔 30 秒去维护之前已经发送过的 topic 的路由信息。</p><p>MQClientInstance#startScheduledTask 中的定时任务，这个定时任务是在生产者启动的过程中启动的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定时任务1，从 nameserver 更新客户端本地的 topic 的路由信息</span>
<span class="token comment">// 30 秒</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduledTask updateTopicRouteInfoFromNameServer exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientConfig<span class="token punctuation">.</span><span class="token function">getPollNameServerInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续跟进 MQClientInstance#updateTopicRouteInfoFromNameServer() 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 客户端关注的主题的集合</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> topicList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略 Consumer 关注的主题的处理 ......</span>

    <span class="token comment">// Producer</span>
    <span class="token comment">// 提取生产者关注的主题</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MQProducerInner</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>producerTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MQProducerInner</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MQProducerInner</span> impl <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>impl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lst <span class="token operator">=</span> impl<span class="token punctuation">.</span><span class="token function">getPublishTopicList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                topicList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 遍历客户端主题集合，从 nameserver 拉取最新的 topic 路由数据</span>
    <span class="token comment">// 与本地客户端的路由数据对比，判断是否需要更新</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> topic <span class="token operator">:</span> topicList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到也是调用 updateTopicRouteInfoFromNameServer 方法去 NameServer 拉取主题路由信息的。关于 updateTopicRouteInfoFromNameServer 方法，后面会详细分析，这里知道个流程就行。</p><h4 id="特殊的主题-「tbw102」" tabindex="-1"><a class="header-anchor" href="#特殊的主题-「tbw102」" aria-hidden="true">#</a> 特殊的主题 「TBW102」</h4><p>特殊的主题名称 「TBW102」，会在生产者启动的时候向 DefaultMQProducerImpl 的 topicPublishInfoTable 的 Map 中直接添加一个空的 TopicPublishInfo。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 添加测试用的 topic，就是 TBW102</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>topicPublishInfoTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getCreateTopicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TopicPublishInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="核心-从-nameserver-拉取路由信息" tabindex="-1"><a class="header-anchor" href="#核心-从-nameserver-拉取路由信息" aria-hidden="true">#</a> 核心-从 NameServer 拉取路由信息</h4><p>从 NameServer 中获取 topic 的路由信息，有两种情况：</p><ul><li>假如 NameServer 中有，则直接拿返回的路由信息去发送消息；</li><li>假如 NameServer 中没有，如果开启了自动创建 topic 机制，会使用一个默认的 topic 名再次从 NameServer 查询路由信息，然后消息发送者会使用默认 topic 的路由信息进行负载均衡。</li></ul><p>MQClientInstance#updateTopicRouteInfoFromNameServer(String, boolean,DefaultMQProducer) 方法分析：</p><p>（1）第一步尝试从 NameServer 获取路由信息：分为两个类型，1）获取指定 topic 的路由信息；2）没找到对应的 topic 的路由信息，尝试用默认的 TBW102 去获取路由信息；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TopicRouteData</span> topicRouteData<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isDefault <span class="token operator">&amp;&amp;</span> defaultMQProducer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取 TBW102 的路由数据</span>
    topicRouteData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientAPIImpl<span class="token punctuation">.</span><span class="token function">getDefaultTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getCreateTopicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientConfig<span class="token punctuation">.</span><span class="token function">getMqClientApiTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ...... 省略其他处理 ......</span>
    
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从 nameserver 拉取最新的路由数据</span>
    topicRouteData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientAPIImpl<span class="token punctuation">.</span><span class="token function">getTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> clientConfig<span class="token punctuation">.</span><span class="token function">getMqClientApiTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）第二步，从 NameServer 获取的 topic 的路由信息，拿它和生产者本地的 topic 的路由信息做对比，如果不同就更新本地路由信息。这部分代码没什么好分析的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>topicRouteData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// old -&gt; 获取当前客户端本地的 topic 路有数据</span>
    <span class="token class-name">TopicRouteData</span> old <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicRouteTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断是否发生变化，即 对比本地路由数据 和 nameserver 中最新拉取到的路由数据是否一致</span>
    <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token function">topicRouteDataIsChange</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> topicRouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略一些操作 ......</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>changed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 克隆一份</span>
        <span class="token class-name">TopicRouteData</span> cloneTopicRouteData <span class="token operator">=</span> topicRouteData<span class="token punctuation">.</span><span class="token function">cloneTopicRouteData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 更新客户端 broker 物理节点映射表</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BrokerData</span> bd <span class="token operator">:</span> topicRouteData<span class="token punctuation">.</span><span class="token function">getBrokerDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>brokerAddrTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bd<span class="token punctuation">.</span><span class="token function">getBrokerAddrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Update Pub info</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>producerTable<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将 topic 路由数据转化为 主题发布数据</span>
            <span class="token class-name">TopicPublishInfo</span> publishInfo <span class="token operator">=</span> <span class="token function">topicRouteData2TopicPublishInfo</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> topicRouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 标记是否有 topicRouteData 数据</span>
            publishInfo<span class="token punctuation">.</span><span class="token function">setHaveTopicRouterInfo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 遍历生产者</span>
            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MQProducerInner</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>producerTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MQProducerInner</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">MQProducerInner</span> impl <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>impl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 生产者将主题发布数据保存到本地，方便发送消息时使用</span>
                    impl<span class="token punctuation">.</span><span class="token function">updateTopicPublishInfo</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> publishInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// ...... 省略消费者相关操作 ......</span>

    <span class="token punctuation">}</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;topicRouteTable.put. Topic = {}, TopicRouteData[{}]&quot;</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> cloneTopicRouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>topicRouteTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> cloneTopicRouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;updateTopicRouteInfoFromNameServer, getTopicRouteInfoFromNameServer return null, Topic: {}. [{}]&quot;</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="准备发送消息的主体流程" tabindex="-1"><a class="header-anchor" href="#准备发送消息的主体流程" aria-hidden="true">#</a> 准备发送消息的主体流程</h2><p>入口 DefaultMQProducerImpl#send(Message, SendCallback)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * DEFAULT ASYNC -------------------------------------------------------
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">,</span>
    <span class="token class-name">SendCallback</span> sendCallback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getSendMsgTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>入参：</p><ol><li>Message：消息对象；</li><li>SendCallback：回调函数；</li><li>超时时间：传入了一个默认的超时时间，值是 3 秒。</li></ol><p>最后会调用到：DefaultMQProducerImpl#sendDefaultImpl。这个方法处理逻辑比较复杂，逐步分析。</p><p>先看下整体流程图：</p><img src="`+c+`" alt="生产者发送消息流程图" style="zoom:50%;"><h3 id="发送消息的前置校验" tabindex="-1"><a class="header-anchor" href="#发送消息的前置校验" aria-hidden="true">#</a> 发送消息的前置校验</h3><p>第一步就是合法性校验，主要就是校验生产者的状态是否是运行中，校验消息的长度等；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 校验生产者状态是否是运行中</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeSureStateOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 校验消息是否合法</span>
<span class="token class-name">Validators</span><span class="token punctuation">.</span><span class="token function">checkMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询当前主题的路由信息" tabindex="-1"><a class="header-anchor" href="#查询当前主题的路由信息" aria-hidden="true">#</a> 查询当前主题的路由信息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取当前消息 topic 的发布信息，需要依赖他里面的 MessageQueue 信息，选择一个队列后面去发送消息使用</span>
<span class="token class-name">TopicPublishInfo</span> topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryToFindTopicPublishInfo</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就是去查询消息要发送的 topic 的路由信息，可能是从生产者本地内存中读到的，也可能是从 NameServer 中查询到的。这里知道获取到了 topic 的路由信息就行了，具体如何获取以及 topic 的路由信息是如何维护的前面已经分析了。</p><h3 id="循环发送消息的一些变量含义" tabindex="-1"><a class="header-anchor" href="#循环发送消息的一些变量含义" aria-hidden="true">#</a> 循环发送消息的一些变量含义</h3><p>既然已经拿到 topic 的路由信息了，就可以准备去发送消息了，先了解下消息发送的一些变量的含义。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 是否超时</span>
<span class="token keyword">boolean</span> callTimeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">// 选中的队列</span>
<span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">Exception</span> exception <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 发送结果</span>
<span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 总共发送的次数</span>
<span class="token comment">// 假如是同步发送，则是 1 + 默认的重试 2 次 = 3，</span>
<span class="token comment">// 其他的 异步发送和单向发送是 1</span>
<span class="token keyword">int</span> timesTotal <span class="token operator">=</span> communicationMode <span class="token operator">==</span> <span class="token class-name">CommunicationMode</span><span class="token punctuation">.</span><span class="token constant">SYNC</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 当前是第几次发送</span>
<span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 数组，存放上次尝试发送的队列的 brokername</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> brokersSent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>timesTotal<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>boolean callTimeout</code>：消息发送是否超时；</li><li><code>MessageQueue mq</code>：某次消息发送，选择的队列；</li><li><code>Exception exception</code>：如果消息发送异常，保存此异常；</li><li><code>SendResult sendResult</code>：发送同步消息的返回值；</li><li><code>int timesTotal</code>：消息最大的发送次数。同步消息最多发送 3 次，异步消息和单向消息最多发送一次；</li><li><code>int times</code>：在循环中表示当前是第几次发送消息；</li><li><code>String[] brokersSent</code>：存放每次循环发送的队列的 brokerName；</li></ul><p>最关键的我们需要知道，在 RocketMQ 中同步和异步消息都会重试，异步的重试操作在异常处理中，后面会具体分析。</p><h3 id="循环发送消息-选择消息队列" tabindex="-1"><a class="header-anchor" href="#循环发送消息-选择消息队列" aria-hidden="true">#</a> 循环发送消息-选择消息队列</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> times <span class="token operator">&lt;</span> timesTotal<span class="token punctuation">;</span> times<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 上次尝试发送至的 brokerName，首次是 null</span>
    <span class="token class-name">String</span> lastBrokerName <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">==</span> mq <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 选择一个 MessageQueue</span>
    <span class="token class-name">MessageQueue</span> mqSelected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>topicPublishInfo<span class="token punctuation">,</span> lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 条件成立：说明已经选择出来一个可以发送的 MessageQueue</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mqSelected <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token comment">// ...... 省略消息发送具体逻辑 ......</span>
        
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DefaultMQProducerImpl#selectOneMessageQueue 选择一个消息队列发送，这里我们只需要知道获取到了 topic 存在的某一个队列就行了，具体如何选择队列的后面具体分析，先把握主体流程。</p><h3 id="循环发送消息-发送消息到队列" tabindex="-1"><a class="header-anchor" href="#循环发送消息-发送消息到队列" aria-hidden="true">#</a> 循环发送消息-发送消息到队列</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> times <span class="token operator">&lt;</span> timesTotal<span class="token punctuation">;</span> times<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 上次尝试发送至的 brokerName，首次是 null</span>
    <span class="token class-name">String</span> lastBrokerName <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">==</span> mq <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 选择一个 MessageQueue</span>
    <span class="token class-name">MessageQueue</span> mqSelected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>topicPublishInfo<span class="token punctuation">,</span> lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 条件成立：说明已经选择出来一个可以发送的 MessageQueue</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mqSelected <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mq <span class="token operator">=</span> mqSelected<span class="token punctuation">;</span>
        brokersSent<span class="token punctuation">[</span>times<span class="token punctuation">]</span> <span class="token operator">=</span> mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 记录本轮发送的开始时间</span>
            beginTimestampPrev <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// ...... 省略一些判断，例如超时判断 ......</span>

            sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendKernelImpl</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> mq<span class="token punctuation">,</span> communicationMode<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> topicPublishInfo<span class="token punctuation">,</span> timeout <span class="token operator">-</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// ...... 省略消息发送后的处理 ......</span>
            
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略异常处理 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略异常处理 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQBrokerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略异常处理 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略异常处理 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心就是 DefaultMQProducerImpl#sendKernelImpl 发送消息，这里我们只需要知道这个方法就真正发送消息到某一个队列的就行了。后面具体详细分析。</p><h3 id="循环发送消息-同步发送结果处理" tabindex="-1"><a class="header-anchor" href="#循环发送消息-同步发送结果处理" aria-hidden="true">#</a> 循环发送消息-同步发送结果处理</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendKernelImpl</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> mq<span class="token punctuation">,</span> communicationMode<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> topicPublishInfo<span class="token punctuation">,</span> timeout <span class="token operator">-</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 故障规避机制</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>communicationMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">ASYNC</span><span class="token operator">:</span>
        <span class="token comment">// 异步消息直接返回 null，异步消息结果处理在回调时处理</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">ONEWAY</span><span class="token operator">:</span>
        <span class="token comment">// 单向消息直接返回 null</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">SYNC</span><span class="token operator">:</span>
        <span class="token comment">// 同步消息，假如不是 SEND_OK，则需要根据设置去尝试重新尝试发送消息</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">SendStatus</span><span class="token punctuation">.</span><span class="token constant">SEND_OK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">isRetryAnotherBrokerWhenNotStoreOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 发送成功直接返回</span>
        <span class="token keyword">return</span> sendResult<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们要知道 RocketMQ 中存在的消息类型有，同步消息、异步消息、单向消息。其中同步消息是有返回值的，而异步消息和单向消息是不用处理返回值的。</p><p>所以在 DefaultMQProducerImpl#sendDefaultImpl 中只会处理同步消息的返回值，这里就是通过判断消息发送的返回值 sendResult 的状态，如果发送成功就返回发送结果并退出，如果消息发送失败就会重试发送消息了。</p><p>上面还有个 DefaultMQProducerImpl#updateFaultItem 方法，这个是故障规避机制，后文会详细分析的。</p><h2 id="消息队列的选择和故障规避机制" tabindex="-1"><a class="header-anchor" href="#消息队列的选择和故障规避机制" aria-hidden="true">#</a> 消息队列的选择和故障规避机制</h2><p>回顾下 topic 的路由信息 TopicPublishInfo 类，其内部有个 messageQueueList 属性。也就是说 topic 的队列可能分布在多个 broker 的队列上，那么我们发送消息时就需要选择一个队列发送。本次就来分析如何选择一个队列去发送。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicPublishInfo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> orderTopic <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 标记是否有 topicRouteData 数据</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> haveTopicRouterInfo <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 队列列表</span>
    <span class="token comment">// 当前主题 topic 在那些 broker 主机上有队列</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> messageQueueList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 线程本地对象，选择发送到哪一个 queue</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ThreadLocalIndex</span> sendWhichQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 主题路由数据，主要是 QueueData 和 brokerDatas</span>
    <span class="token keyword">private</span> <span class="token class-name">TopicRouteData</span> topicRouteData<span class="token punctuation">;</span>

	<span class="token comment">// 省略其他</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>队列的选择在 DefaultMQProducerImpl#sendDefaultImpl 方法中，具体会调用 MQFaultStrategy#selectOneMessageQueue 方法去选择队列。</p><p>在 RocketMQ 中 broker 的故障规避机制有两种：</p><ul><li><strong>消息级别的故障规避机制</strong>：默认策略。RocketMQ 中同步消息和异步消息都会去重试，假如某一次发送消息失败了，再重试的时候是不会再往这个 broker 发送的，除非其它 broker 上没有该 topic 所在的队列；</li><li><strong>生产者级别的故障规避机制</strong>：需要将 sendLatencyFaultEnable 配置设为 true。根据消息发送消耗的时间得到 broker 的不可用时间。假如现在有个时间 A，例如消耗的时间小于 A，则认为 broker 正常。如果某次消息发送的时间大于 A，则认为 broker 可能有点问题，需要在一段时间内不允许向其发送消息；</li></ul><p>因为 topic 的路由信息是持久化在 broker 上的，broker 会每 30 秒向 NameServer 发送带有路由信息的心跳，而 NameServer 又不会主动给 producer 和 consumer 推送变化的路由信息，而是 producer 和 consumer 每隔 30 秒去主动拉取路由信息，所以 producer 和 consumer 的本地保存的路由信息可能不是最新的，在 producer 做 broker 故障规避机制是有必要的。</p><p><strong>单个消息级别的故障规避机制：</strong></p><p><img src="`+l+'" alt="image-20230615005759903"></p><p><strong>单个生产者全局级别的故障规避机制</strong></p><p><img src="'+i+`" alt="image-20230615005912977"></p><h3 id="消息级别的-broker-故障规避机制" tabindex="-1"><a class="header-anchor" href="#消息级别的-broker-故障规避机制" aria-hidden="true">#</a> 消息级别的 broker 故障规避机制</h3><p><strong>默认策略</strong>，具体代码逻辑在 TopicPublishInfo#selectOneMessageQueue(String)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> lastBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastBrokerName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 第一次 lastBrokerName 是 null，</span>
        <span class="token keyword">return</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 走到此处，说明不是第一次发送消息了，是重试</span>
        <span class="token comment">// 需要遍历所有的队列，获取一个队列后，需要判断当前得到的队列的 brokername 和上次队列的 brokername 是否一致</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendWhichQueue<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 说明还没找到队列，选择一个</span>
        <span class="token keyword">return</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendWhichQueue<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>入参 lastBrokerName 是在某次重试消息时，上一次发送的 broker 的名字。假如是第一次发送消息（也就是不是重试的），lastBrokerName 是 null；</p><ul><li><strong>第一次发送消息：直接取模选择一个队列；</strong></li><li><strong>重试消息：同样是取模选择一个队列，但是要规避上一次有问题的发送的 lastBrokerName；</strong></li></ul><h3 id="生产者级别的-broker-故障规避机制" tabindex="-1"><a class="header-anchor" href="#生产者级别的-broker-故障规避机制" aria-hidden="true">#</a> 生产者级别的 broker 故障规避机制</h3><p>需要将 sendLatencyFaultEnable 设置为 true，才能开启生产级别的故障规避机制。</p><p>生产者级别的 broker 的故障规避机制的原理是：从消息发送开始，到得到消息发送的返回值或者出现异常的时间，根据这段消耗的时间给此次消息发送行为的时延分几个级别，在 org.apache.rocketmq.client.latency.MQFaultStrategy 中有两个数组类型的变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 消息发送的延迟时间</span>
<span class="token keyword">private</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> latencyMax <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">50L</span><span class="token punctuation">,</span> <span class="token number">100L</span><span class="token punctuation">,</span> <span class="token number">550L</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">,</span> <span class="token number">3000L</span><span class="token punctuation">,</span> <span class="token number">15000L</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 假如发送消息失败，会将这个 broker 设置为多长时间不可用</span>
<span class="token comment">// 和上面的 latencyMax 的索引是一一对应的</span>
<span class="token keyword">private</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> notAvailableDuration <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">30000L</span><span class="token punctuation">,</span> <span class="token number">60000L</span><span class="token punctuation">,</span> <span class="token number">120000L</span><span class="token punctuation">,</span> <span class="token number">180000L</span><span class="token punctuation">,</span> <span class="token number">600000L</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>latencyMax 数组表示某次发送消息成功 or 失败消耗的时间的区间范围；</li><li>notAvailableDuration 数组表示 broker 的不可用的时间；</li></ul><p>某次消息发送的时延时间会在 latencyMax 数组中得到一个索引，拿这个索引去 notAvailableDuration 表中给 broker 设置一个不可用的时间。例如某次发送失败了，默认时间给了 3000L，那么找到 notAvailableDuration 对应的索引位置的值是 180000L，表示这个 broker 此次会在 180 秒内认为是不可用的。</p><p>在每次消息发送完或者出现异常都会调用 DefaultMQProducerImpl#updateFaultItem 方法，无论是同步消息还是异步消息都会调用。最终会调用到 MQFaultStrategy#updateFaultItem 方法，具体实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFaultItem</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> currentLatency<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isolation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 必须开启了延迟规避机制</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendLatencyFaultEnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 计算 brokerName 的不可用时间</span>
        <span class="token keyword">long</span> duration <span class="token operator">=</span> <span class="token function">computeNotAvailableDuration</span><span class="token punctuation">(</span>isolation <span class="token operator">?</span> <span class="token number">30000</span> <span class="token operator">:</span> currentLatency<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 参数 1：brokeName</span>
        <span class="token comment">// 参数 2：当前消息发送到返回的延迟时间，也有可能是发生异常了（其实就是消耗时间）</span>
        <span class="token comment">// 参数 3：根据 currentLatency 计算出来的 broker 的不可用时间</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>brokerName<span class="token punctuation">,</span> currentLatency<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于该方法的参数：</p><ol><li>brokerName：就是某次消息发送到的 broker；</li><li>currentLatency：就是某次消息的发送时延时间；</li><li>isolation：不是很重要，控制默认值 3000 的，异常情况会走这里；</li></ol><p>computeNotAvailableDuration 方法就是根据某次消息发送时延时间去前面说的 notAvailableDuration 数组中获取一个时间，获取到的时间表示该 broker 的不可用时间。然后将该时间保存起来。</p><p>那么在选择队列时，是如何规避被标记为不可用的 broker 呢？具体看 MQFaultStrategy#selectOneMessageQueue 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">TopicPublishInfo</span> tpInfo<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lastBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendLatencyFaultEnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 遍历所有的队列，取模选择一个队列，校验选择的队列是否可用，</span>
            <span class="token comment">// 如果可以就直接返回，不可用就继续遍历查找</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getSendWhichQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">%</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 验证这个消息队列是否可用</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// ...... 省略 ...... 选择一个优先级最高的 broker 去发送</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred when selecting message queue&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 默认走这里</span>
    <span class="token keyword">return</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>latencyFaultTolerance.isAvailable(mq.getBrokerName()</code> 就是校验选择出来的 broker 的是否可用的。假如 RocketMQ 遍历 topic 所在的所有队列的 broker 都被标记为不可用了，那么最后会选择一个相对来说优先级高的 broker 去发送了。</p><h2 id="发送消息核心方法-sendkernelimpl" tabindex="-1"><a class="header-anchor" href="#发送消息核心方法-sendkernelimpl" aria-hidden="true">#</a> 发送消息核心方法 sendKernelImpl</h2><p>DefaultMQProducerImpl#sendKernelImpl，该方法比较长，分步骤来分析：</p><ol><li>获取要发送的 brokerName 的主节点的地址；</li><li>消息发送的前置处理，例如计算出自定义请求头的一些属性的值；</li><li>用户扩展点，执行钩子方法；</li><li>创建并组装消息发送的自定义请求头 SendMessageRequestHeader 对象；</li><li>真正的消息发送逻辑；</li></ol><h3 id="获取-brokername-主节点地址" tabindex="-1"><a class="header-anchor" href="#获取-brokername-主节点地址" aria-hidden="true">#</a> 获取 brokerName 主节点地址</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 根据选择的队列 获取 broker 的主节点的地址</span>
<span class="token class-name">String</span> brokerAddr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">findBrokerAddressInPublish</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> brokerAddr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 说明没有在生产者本地内存中没找到，rpc 从 NameServer 主动拉取路由信息</span>
    <span class="token function">tryToFindTopicPublishInfo</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    brokerAddr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">findBrokerAddressInPublish</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然要发送消息到 broker，那么就得知道我们此次要发送的 brokerName 对应的 broker 主节点地址咯。假如生产者本地内存没找到，就 rpc 去 NameServer 拉取 topic 的路由信息；</p><h3 id="消息发送预处理" tabindex="-1"><a class="header-anchor" href="#消息发送预处理" aria-hidden="true">#</a> 消息发送预处理</h3><p>主要就是复制消息 id、处理消息压缩、是否是事务预处理消息等。逻辑比较简单：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">MessageBatch</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 消息生成唯一 ID，即在 msg.properties.put(&quot;UNIQ_KEY&quot;, &quot;msgId&quot;)</span>
    <span class="token comment">// 服务器 broker 会给消息按照 UNIQ_KEY 建立一个哈希索引</span>
    <span class="token class-name">MessageClientIDSetter</span><span class="token punctuation">.</span><span class="token function">setUniqID</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ...... 省略 ......</span>

<span class="token keyword">int</span> sysFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> msgBodyCompressed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">// 条件返回 true ，说明消息被压缩了</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryToCompressMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// sysFlag 设置标记位，标明此条消息被压缩过</span>
    sysFlag <span class="token operator">|=</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">COMPRESSED_FLAG</span><span class="token punctuation">;</span>
    msgBodyCompressed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 是否是事务相关的预处理消息</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> tranMsg <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_TRANSACTION_PREPARED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>tranMsg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sysFlag <span class="token operator">|=</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_PREPARED_TYPE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用户扩展点-执行钩子方法" tabindex="-1"><a class="header-anchor" href="#用户扩展点-执行钩子方法" aria-hidden="true">#</a> 用户扩展点-执行钩子方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 用户扩展点，可以注册 hasCheckForbiddenHook 控制消息发送</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasCheckForbiddenHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 钩子方法</span>
    <span class="token class-name">CheckForbiddenContext</span> checkForbiddenContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckForbiddenContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ...... 省略 ......</span>
    
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeCheckForbiddenHook</span><span class="token punctuation">(</span>checkForbiddenContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 用户扩展点，执行 msgHook 的 before 方法，比如实现监控埋点。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasSendMessageHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendMessageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ...... 省略 ......</span>
    
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeSendMessageHookBefore</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给用户扩展的一些地方，我们可以做监控埋点的功能。</p><h3 id="创建发送消息的自定义请求头" tabindex="-1"><a class="header-anchor" href="#创建发送消息的自定义请求头" aria-hidden="true">#</a> 创建发送消息的自定义请求头</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建发送消息的请求头对象</span>
<span class="token class-name">SendMessageRequestHeader</span> requestHeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendMessageRequestHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 生产者组</span>
requestHeader<span class="token punctuation">.</span><span class="token function">setProducerGroup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 消息主题</span>
requestHeader<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 缺省主题 TBW102</span>
requestHeader<span class="token punctuation">.</span><span class="token function">setDefaultTopic</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getCreateTopicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 主题队列数，默认创建 4 个</span>
requestHeader<span class="token punctuation">.</span><span class="token function">setDefaultTopicQueueNums</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getDefaultTopicQueueNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 选中的消息队列 ID</span>
requestHeader<span class="token punctuation">.</span><span class="token function">setQueueId</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 系统标记变量</span>
requestHeader<span class="token punctuation">.</span><span class="token function">setSysFlag</span><span class="token punctuation">(</span>sysFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 消息创建时间</span>
requestHeader<span class="token punctuation">.</span><span class="token function">setBornTimestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 消息的标记，RocketMQ 没用这个</span>
requestHeader<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 消息的 properties</span>
requestHeader<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">messageProperties2String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...... 省略其他的 ......</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要就是创建自定义的请求头对象 SendMessageRequestHeader。简要说下一些字段吧</p><ul><li>生产者组；</li><li>消息主题；</li><li>默认自定创建的主题的主题 TBW102；</li><li>默认自定创建的主题的队列个数；</li><li>此次发送消息选择的 queueId；</li></ul><h3 id="发送消息-rpc" tabindex="-1"><a class="header-anchor" href="#发送消息-rpc" aria-hidden="true">#</a> 发送消息 RPC</h3><p>无论是同步、异步、单向消息最终都会调用到 MQClientAPIImpl#sendMessage(String, String, Message, SendMessageRequestHeader, long, CommunicationMode, SendCallback, TopicPublishInfo, MQClientInstance, int, SendMessageContext, DefaultMQProducerImpl) 方法</p><p>（1）第一步就是根据请求头和请求体转换一个 RocketMQ 中网络传输对象 RemotingCommand。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RemotingCommand</span> request <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> msgType <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_MESSAGE_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> isReply <span class="token operator">=</span> msgType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> msgType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">REPLY_MESSAGE_FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isReply<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略回复消息 ......</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sendSmartMsg <span class="token operator">||</span> msg <span class="token keyword">instanceof</span> <span class="token class-name">MessageBatch</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认情况走这里</span>
        <span class="token comment">// 做消息精简操作</span>
        <span class="token class-name">SendMessageRequestHeaderV2</span> requestHeaderV2 <span class="token operator">=</span> <span class="token class-name">SendMessageRequestHeaderV2</span><span class="token punctuation">.</span><span class="token function">createSendMessageRequestHeaderV2</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建 RemotingCommand</span>
        request <span class="token operator">=</span> <span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token function">createRequestCommand</span><span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">MessageBatch</span> <span class="token operator">?</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_BATCH_MESSAGE</span> <span class="token operator">:</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_MESSAGE_V2</span><span class="token punctuation">,</span> requestHeaderV2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        request <span class="token operator">=</span> <span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token function">createRequestCommand</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_MESSAGE</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将消息的消息体放到网络传输层的 body 中</span>
request<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）第二步就是根据消息发送类型，选择不同的发送方式，例如同步、异步和单向 RPC。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>communicationMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">ONEWAY</span><span class="token operator">:</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>remotingClient<span class="token punctuation">.</span><span class="token function">invokeOneway</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> request<span class="token punctuation">,</span> timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">ASYNC</span><span class="token operator">:</span>
        <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> times <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...... 省略超时判断 ......</span>
        
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendMessageAsync</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> brokerName<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> timeoutMillis <span class="token operator">-</span> costTimeAsync<span class="token punctuation">,</span> request<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> topicPublishInfo<span class="token punctuation">,</span> instance<span class="token punctuation">,</span>
            retryTimesWhenSendFailed<span class="token punctuation">,</span> times<span class="token punctuation">,</span> context<span class="token punctuation">,</span> producer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">SYNC</span><span class="token operator">:</span>
        <span class="token comment">// ...... 省略超时判断 ......</span>
        
        <span class="token comment">// 同步发送消息，将消息传递到 broker，broker 完成存储后或者其他情况都会返回</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendMessageSync</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> brokerName<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> timeoutMillis <span class="token operator">-</span> costTimeSync<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">assert</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，我们消息流程已经分析完毕了。</p><h2 id="消息重试策略" tabindex="-1"><a class="header-anchor" href="#消息重试策略" aria-hidden="true">#</a> 消息重试策略</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>在 org.apache.rocketmq.client.producer.DefaultMQProducer 中有两个数量，控制着同步和异步的重试次数，默认值都是 2，表示最大会重试 2 次，加上最开始发送的 1 次，所有某个消息总共最大会发送 3 次。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> retryTimesWhenSendFailed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> retryTimesWhenSendAsyncFailed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同步消息的重试" tabindex="-1"><a class="header-anchor" href="#同步消息的重试" aria-hidden="true">#</a> 同步消息的重试</h3><p>同步消息的重试在 DefaultMQProducerImpl#sendDefaultImpl 方法中实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">SendResult</span> <span class="token function">sendDefaultImpl</span><span class="token punctuation">(</span>
    <span class="token class-name">Message</span> msg<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">CommunicationMode</span> communicationMode<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">SendCallback</span> sendCallback<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token keyword">long</span> timeout
<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略其他 ......</span>

    <span class="token keyword">int</span> timesTotal <span class="token operator">=</span> communicationMode <span class="token operator">==</span> <span class="token class-name">CommunicationMode</span><span class="token punctuation">.</span><span class="token constant">SYNC</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 当前是第几次发送</span>
    <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// ...... 省略其他 ......</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> times <span class="token operator">&lt;</span> timesTotal<span class="token punctuation">;</span> times<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略其他 ......</span>
        sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendKernelImpl</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> mq<span class="token punctuation">,</span> communicationMode<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> topicPublishInfo<span class="token punctuation">,</span> timeout <span class="token operator">-</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...... 省略其他 ......</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>communicationMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">ASYNC</span><span class="token operator">:</span>
                <span class="token comment">// 异步消息直接返回 null，异步消息结果处理在回调时处理</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">ONEWAY</span><span class="token operator">:</span>
                <span class="token comment">// 单向消息直接返回 null</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">SYNC</span><span class="token operator">:</span>
                <span class="token comment">// 同步消息，假如不是 SEND_OK，则需要根据设置去尝试重新尝试发送消息</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">SendStatus</span><span class="token punctuation">.</span><span class="token constant">SEND_OK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">isRetryAnotherBrokerWhenNotStoreOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 发送成功直接返回</span>
                <span class="token keyword">return</span> sendResult<span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 

    <span class="token comment">// ...... 省略异常处理 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以同步发送就是一个 for 循环，如果消息发送成功就会直接返回消息发送的结果，如果消息发送失败就会在 for 循环中重试。</p><h3 id="异步消息的重试" tabindex="-1"><a class="header-anchor" href="#异步消息的重试" aria-hidden="true">#</a> 异步消息的重试</h3><p>异步消息的重试是在异常处理中做的，首先看发送消息的核心方法 DefaultMQProducerImpl#sendKernelImpl 中调用具体发送方法的入参：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>communicationMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">ASYNC</span><span class="token operator">:</span>
        <span class="token comment">// ...... 省略其他 ......</span>

        <span class="token comment">// 获取 API 对象，调用它的发送方法，完成发送</span>
        sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getMQClientAPIImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>
            brokerAddr<span class="token punctuation">,</span>
            mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            tmpMessage<span class="token punctuation">,</span>
            requestHeader<span class="token punctuation">,</span>
            timeout <span class="token operator">-</span> costTimeAsync<span class="token punctuation">,</span>
            communicationMode<span class="token punctuation">,</span>
            sendCallback<span class="token punctuation">,</span>
            topicPublishInfo<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 异步模式的发送消息的重试次数</span>
            context<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">ONEWAY</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">SYNC</span><span class="token operator">:</span>
         <span class="token comment">// ...... 省略同步和单向消息发送 ......</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">assert</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到关键的<code> this.defaultMQProducer.getRetryTimesWhenSendAsyncFailed()</code>，这就是异步消息的最大重试次数。那我们具体看异步消息发送发生异常情况是如何重试的。</p><p>具体在 org.apache.rocketmq.client.impl.MQClientAPIImpl#onExceptionImpl 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onExceptionImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">,</span>
    <span class="token comment">// ...... 省略参数 ......</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> timesTotal<span class="token punctuation">,</span> <span class="token comment">// 最大重试次数</span>
    <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> curTimes<span class="token punctuation">,</span> <span class="token comment">// 当前是第几次发送消息</span>
    <span class="token comment">// ...... 省略参数 ......</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重试次数自增</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> curTimes<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断是否已经到达了最大重试次数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>needRetry <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">&lt;=</span> timesTotal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略 ...... broker 故障规避机制，选择一个 broker ......</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 消息重试</span>
            request<span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span><span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token function">createNewRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sendMessageAsync</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> retryBrokerName<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> timeoutMillis<span class="token punctuation">,</span> request<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> topicPublishInfo<span class="token punctuation">,</span> instance<span class="token punctuation">,</span>
                timesTotal<span class="token punctuation">,</span> curTimes<span class="token punctuation">,</span> context<span class="token punctuation">,</span> producer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 异常情况还是递归调用当前方法 onExceptionImpl 方法 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingTooMuchRequestException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 异常情况还是递归调用当前方法 onExceptionImpl 方法 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 异常情况还是递归调用当前方法 onExceptionImpl 方法 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 重试了几次发现还是发生异常了</span>

        <span class="token comment">// ...... 省略 ......</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行业务方编写的消息发送失败的回调方法</span>
            sendCallback<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体就是继续异步消息重试，使用 <code>int tmp = curTimes.incrementAndGet();</code> 来控制重试次数，假如最终还是出现异常情况了，就会调用 <code>sendCallback.onException(e);</code> 回调给业务方。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><ol><li>RocketMQ 在发送方式上分为三种 <ol><li>同步发送；</li><li>异步发送；</li><li>单向发送；</li></ol></li><li>RocketMQ 在发送消息的类型分为以下几种 <ol><li>普通消息；</li><li>顺序消息；</li><li>延迟消息；</li><li>事务消息；</li><li>单向消息；</li><li>批量消息；</li></ol></li></ol><p>本篇只讲述了消息是如何发送出去了，并没有分析 broker 是如何接收消息的，后续分析。</p><p><strong>生产者的 topic 的路由管理</strong>：</p><ul><li>三个部分：① broker 持久化的；② broker 上报到 NameServer 的；③ 生产者和消费者贝蒂内存的；首先 topic 的路由信息是持久化在 broker 上的，broker 默认 30 秒给 NameServer 发送心跳包，会带上自己的持久化的 topic 的路由信息。然后生产者和消费者会 30 秒去 NameServer 拉取主题路由信息，然后更新自己的本地内存缓存（Map）的信息</li></ul><p><strong>消息队列的选择：</strong></p><ul><li>生产者选择某个 broker 上的消息队列的策略其实就是轮询，拿一个自增的数去取模得到一个索引，去队列列表获取。</li></ul><p><strong>broker 的故障规避机制</strong>：正是因为 topic 路由管理信息是生产者 30 秒去 NameServer 拉取的，而且 NameServer 不会主动给生产者推送 topic 路由信息，所以生产者感知 topic 路由信息变化是有延迟的，所以 broker 的故障规避机制是很有必要的。</p><ul><li><strong>消息级别的故障规避机制</strong>：默认策略。RocketMQ 中同步消息和异步消息都会去重试，假如某一次发送消息失败了，再重试的时候是不会再往这个 broker 发送的，除非其它 broker 上没有该 topic 所在的队列；</li><li><strong>生产者级别的故障规避机制</strong>：需要将 sendLatencyFaultEnable 配置设为 true。根据消息发送消耗的时间得到 broker 的不可用时间。假如现在有个时间 A，例如消耗的时间小于 A，则认为 broker 正常。如果某次消息发送的时间大于 A，则认为 broker 可能有点问题，需要在一段时间内不允许向其发送消息；</li></ul><p><strong>消息的重试策略</strong>：RocketMQ 中只有同步和异步消息才会重试，默认最大重试次数是 2 次，也就是说最大发送 3 次，消费方需要做好幂等操作。</p>`,170),r=[k];function d(m,v){return s(),a("div",null,r)}const h=n(u,[["render",d],["__file","11-生产者发送消息.html.vue"]]);export{h as default};
