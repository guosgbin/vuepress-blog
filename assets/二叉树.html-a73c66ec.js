import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as s,c as d,b as t,e,d as n}from"./app-9568636d.js";const _={},u=t("p",null,[t("strong",null,"每次写递归，都按照这三要素来写，可以保证大家写出正确的递归算法！")],-1),c=t("ol",null,[t("li",null,[t("strong",null,"确定递归函数的参数和返回值："),e(" 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。")]),t("li",null,[t("strong",null,"确定终止条件："),e(" 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。")]),t("li",null,[t("strong",null,"确定单层递归的逻辑："),e(" 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。")])],-1),h=t("p",null,"递归函数什么时候需要返回值？什么时候不需要返回值？这里总结如下三点：",-1),i={href:"https://leetcode.cn/problems/path-sum-ii/",target:"_blank",rel:"noopener noreferrer"},a={href:"https://programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html",target:"_blank",rel:"noopener noreferrer"},p={href:"https://leetcode.cn/problems/path-sum/",target:"_blank",rel:"noopener noreferrer"},b=t("thead",null,[t("tr",null,[t("th",null,"题目"),t("th",null,"难度"),t("th",null,"备注"),t("th",null,"关联"),t("th")])],-1),f={href:"https://leetcode.cn/problems/binary-tree-preorder-traversal/",target:"_blank",rel:"noopener noreferrer"},m=t("td",null,"简单",-1),g=t("td",null,null,-1),k=t("td",null,null,-1),y=t("td",null,"可以再刷",-1),v={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"},x=t("td",null,"简单",-1),E=t("td",null,null,-1),I=t("td",null,null,-1),B=t("td",null,"可以再刷",-1),w={href:"https://leetcode.cn/problems/binary-tree-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"},A=t("td",null,"简单",-1),N=t("td",null,null,-1),C=t("td",null,null,-1),O=t("td",null,"可以再刷",-1),V={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},j=t("td",null,"中等",-1),F=t("td",null,null,-1),L=t("td",null,null,-1),T=t("td",null,"可以再刷",-1),q={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/",target:"_blank",rel:"noopener noreferrer"},z=t("td",null,"中等",-1),D=t("td",null,null,-1),G=t("td",null,null,-1),H=t("td",null,null,-1),J={href:"https://leetcode.cn/problems/binary-tree-right-side-view/",target:"_blank",rel:"noopener noreferrer"},K=t("td",null,"中等",-1),M={href:"https://leetcode.cn/problems/binary-tree-right-side-view/solutions/214871/jian-dan-bfsdfs-bi-xu-miao-dong-by-sweetiee/",target:"_blank",rel:"noopener noreferrer"},P=t("td",null,null,-1),Q=t("td",null,"了解 dfs",-1),R={href:"https://leetcode.cn/problems/average-of-levels-in-binary-tree/",target:"_blank",rel:"noopener noreferrer"},S=t("td",null,"简单",-1),U=t("td",null,null,-1),W=t("td",null,null,-1),X=t("td",null,"了解 dfs",-1),Y={href:"https://leetcode.cn/problems/n-ary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},Z=t("td",null,"中等",-1),$=t("td",null,null,-1),tt=t("td",null,null,-1),et=t("td",null,null,-1),lt={href:"https://leetcode.cn/problems/find-largest-value-in-each-tree-row/",target:"_blank",rel:"noopener noreferrer"},nt=t("td",null,"中等",-1),ot=t("td",null,null,-1),rt=t("td",null,null,-1),st=t("td",null,"了解 dfs",-1),dt={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/",target:"_blank",rel:"noopener noreferrer"},_t=t("td",null,"中等",-1),ut=t("td",null,null,-1),ct=t("td",null,null,-1),ht=t("td",null,"O(1) 空间复杂度",-1),it={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/",target:"_blank",rel:"noopener noreferrer"},at=t("td",null,"中等",-1),pt={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/solutions/2510505/gong-shui-san-xie-xiang-xi-tu-jie-o1-kon-d6vg/",target:"_blank",rel:"noopener noreferrer"},bt=t("td",null,null,-1),ft=t("td",null,"O(1) 空间复杂度",-1),mt={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},gt=t("td",null,"简单",-1),kt=t("td",null,null,-1),yt=t("td",null,null,-1),vt=t("td",null,null,-1),xt={href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Et=t("td",null,"简单",-1),It=t("td",null,null,-1),Bt=t("td",null,null,-1),wt=t("td",null,"了解 dfs，可以再刷",-1),At={href:"https://leetcode.cn/problems/invert-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Nt=t("td",null,"简单",-1),Ct=t("td",null,null,-1),Ot=t("td",null,null,-1),Vt=t("td",null,null,-1),jt={href:"https://leetcode.cn/problems/symmetric-tree/",target:"_blank",rel:"noopener noreferrer"},Ft=t("td",null,"简单",-1),Lt=t("td",null,null,-1),Tt=t("td",null,null,-1),qt=t("td",null,"可以再刷",-1),zt={href:"https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/",target:"_blank",rel:"noopener noreferrer"},Dt=t("td",null,"简单",-1),Gt=t("td",null,null,-1),Ht=t("td",null,null,-1),Jt=t("td",null,null,-1),Kt={href:"https://leetcode.cn/problems/count-complete-tree-nodes/",target:"_blank",rel:"noopener noreferrer"},Mt=t("td",null,"简单",-1),Pt=t("td",null,[e("使用完全二叉树的性质"),t("br"),e("位运算")],-1),Qt=t("td",null,null,-1),Rt=t("td",null,"可以再刷",-1),St={href:"https://leetcode.cn/problems/balanced-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Ut=t("td",null,"简单",-1),Wt=t("td",null,null,-1),Xt=t("td",null,null,-1),Yt=t("td",null,"可以再刷",-1),Zt={href:"https://leetcode.cn/problems/binary-tree-paths/",target:"_blank",rel:"noopener noreferrer"},$t=t("td",null,"简单",-1),te=t("td",null,"层次遍历的解法比较新颖",-1),ee=t("td",null,null,-1),le=t("td",null,"可以再刷",-1),ne={href:"https://leetcode.cn/problems/sum-of-left-leaves/",target:"_blank",rel:"noopener noreferrer"},oe=t("td",null,"简单",-1),re=t("td",null,null,-1),se=t("td",null,null,-1),de=t("td",null,null,-1),_e={href:"https://leetcode.cn/problems/find-bottom-left-tree-value/",target:"_blank",rel:"noopener noreferrer"},ue=t("td",null,"简单",-1),ce=t("td",null,"深度遍历的思路有点意思",-1),he=t("td",null,null,-1),ie=t("td",null,"可以再刷",-1),ae={href:"https://leetcode.cn/problems/path-sum/",target:"_blank",rel:"noopener noreferrer"},pe=t("td",null,"简单",-1),be=t("td",null,"层次遍历的双队列可以",-1),fe=t("td",null,null,-1),me=t("td",null,"可以再刷",-1),ge={href:"https://leetcode.cn/problems/path-sum-ii/",target:"_blank",rel:"noopener noreferrer"},ke=t("td",null,"中等",-1),ye=t("td",null,"回溯",-1),ve=t("td",null,null,-1),xe=t("td",null,"可以再刷",-1),Ee={href:"https://leetcode.cn/problems/maximum-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Ie=t("td",null,"中等",-1),Be=t("td",null,"构造二叉树",-1),we=t("td",null,null,-1),Ae=t("td",null,"可以再刷",-1),Ne={href:"https://leetcode.cn/problems/merge-two-binary-trees/",target:"_blank",rel:"noopener noreferrer"},Ce=t("td",null,"简单",-1),Oe=t("td",null,"构造二叉树",-1),Ve=t("td",null,null,-1),je=t("td",null,"可以再刷",-1),Fe={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"},Le=t("td",null,"中等",-1),Te=t("td",null,"构造二叉树",-1),qe=t("td",null,null,-1),ze=t("td",null,"可以再刷",-1),De={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"},Ge=t("td",null,"中等",-1),He=t("td",null,"构造二叉树",-1),Je=t("td",null,null,-1),Ke=t("td",null,"可以再刷",-1),Me={href:"https://leetcode.cn/problems/search-in-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},Pe=t("td",null,"简单",-1),Qe=t("td",null,null,-1),Re=t("td",null,null,-1),Se=t("td",null,null,-1),Ue={href:"https://leetcode.cn/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},We=t("td",null,"中等",-1),Xe=t("td",null,null,-1),Ye=t("td",null,null,-1),Ze=t("td",null,"可以再刷",-1),$e={href:"https://leetcode.cn/problems/minimum-absolute-difference-in-bst/",target:"_blank",rel:"noopener noreferrer"},tl=t("td",null,"简单",-1),el=t("td",null,[e("二叉搜索树的中序遍历"),t("br"),e("节点的值是递增的")],-1),ll=t("td",null,null,-1),nl=t("td",null,null,-1),ol={href:"https://leetcode.cn/problems/find-mode-in-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},rl=t("td",null,"简单",-1),sl=t("td",null,null,-1),dl=t("td",null,null,-1),_l=t("td",null,"可以再刷",-1),ul=t("tr",null,[t("td"),t("td"),t("td"),t("td"),t("td")],-1),cl=t("tr",null,[t("td"),t("td"),t("td"),t("td"),t("td")],-1),hl=t("tr",null,[t("td"),t("td"),t("td"),t("td"),t("td")],-1);function il(al,pl){const l=r("ExternalLinkIcon");return s(),d("div",null,[u,c,h,t("ul",null,[t("li",null,[e("如果需要搜索整棵二叉树且不用处理递归返回值，递归函数就不要返回值。（这种情况就是本文下半部分介绍的"),t("a",i,[e("113. 路径总和 II"),n(l)]),e("）")]),t("li",null,[e("如果需要搜索整棵二叉树且需要处理递归返回值，递归函数就需要返回值。 （这种情况我们在"),t("a",a,[e("236. 二叉树的最近公共祖先"),n(l)]),e("中介绍）")]),t("li",null,[e("如果要搜索其中一条符合条件的路径，那么递归一定需要返回值，因为遇到符合条件的路径了就要及时返回。"),t("a",p,[e("112. 路径总和"),n(l)])])]),t("table",null,[b,t("tbody",null,[t("tr",null,[t("td",null,[t("a",f,[e("144.二叉树的前序遍历"),n(l)])]),m,g,k,y]),t("tr",null,[t("td",null,[t("a",v,[e("94.二叉树的中序遍历"),n(l)])]),x,E,I,B]),t("tr",null,[t("td",null,[t("a",w,[e("145.二叉树的后序遍历"),n(l)])]),A,N,C,O]),t("tr",null,[t("td",null,[t("a",V,[e("102. 二叉树的层序遍历"),n(l)])]),j,F,L,T]),t("tr",null,[t("td",null,[t("a",q,[e("107. 二叉树的层序遍历 II"),n(l)])]),z,D,G,H]),t("tr",null,[t("td",null,[t("a",J,[e("199. 二叉树的右视图"),n(l)])]),K,t("td",null,[t("a",M,[e("这个解法可以的"),n(l)])]),P,Q]),t("tr",null,[t("td",null,[t("a",R,[e("637. 二叉树的层平均值"),n(l)])]),S,U,W,X]),t("tr",null,[t("td",null,[t("a",Y,[e("429. N 叉树的层序遍历"),n(l)])]),Z,$,tt,et]),t("tr",null,[t("td",null,[t("a",lt,[e("515. 在每个树行中找最大值"),n(l)])]),nt,ot,rt,st]),t("tr",null,[t("td",null,[t("a",dt,[e("116. 填充每个节点的下一个右侧节点指针"),n(l)])]),_t,ut,ct,ht]),t("tr",null,[t("td",null,[t("a",it,[e("117. 填充每个节点的下一个右侧节点指针 II"),n(l)])]),at,t("td",null,[t("a",pt,[e("这个 O(1) 的解法"),n(l)])]),bt,ft]),t("tr",null,[t("td",null,[t("a",mt,[e("104. 二叉树的最大深度"),n(l)])]),gt,kt,yt,vt]),t("tr",null,[t("td",null,[t("a",xt,[e("111. 二叉树的最小深度"),n(l)])]),Et,It,Bt,wt]),t("tr",null,[t("td",null,[t("a",At,[e("226. 翻转二叉树"),n(l)])]),Nt,Ct,Ot,Vt]),t("tr",null,[t("td",null,[t("a",jt,[e("101. 对称二叉树"),n(l)])]),Ft,Lt,Tt,qt]),t("tr",null,[t("td",null,[t("a",zt,[e("559. N 叉树的最大深度"),n(l)])]),Dt,Gt,Ht,Jt]),t("tr",null,[t("td",null,[t("a",Kt,[e("222. 完全二叉树的节点个数"),n(l)])]),Mt,Pt,Qt,Rt]),t("tr",null,[t("td",null,[t("a",St,[e("110. 平衡二叉树"),n(l)])]),Ut,Wt,Xt,Yt]),t("tr",null,[t("td",null,[t("a",Zt,[e("257. 二叉树的所有路径"),n(l)])]),$t,te,ee,le]),t("tr",null,[t("td",null,[t("a",ne,[e("404. 左叶子之和"),n(l)])]),oe,re,se,de]),t("tr",null,[t("td",null,[t("a",_e,[e("513. 找树左下角的值"),n(l)])]),ue,ce,he,ie]),t("tr",null,[t("td",null,[t("a",ae,[e("112. 路径总和"),n(l)])]),pe,be,fe,me]),t("tr",null,[t("td",null,[t("a",ge,[e("113. 路径总和 II"),n(l)])]),ke,ye,ve,xe]),t("tr",null,[t("td",null,[t("a",Ee,[e("654. 最大二叉树"),n(l)])]),Ie,Be,we,Ae]),t("tr",null,[t("td",null,[t("a",Ne,[e("617. 合并二叉树"),n(l)])]),Ce,Oe,Ve,je]),t("tr",null,[t("td",null,[t("a",Fe,[e("106. 从中序与后序遍历序列构造二叉树"),n(l)])]),Le,Te,qe,ze]),t("tr",null,[t("td",null,[t("a",De,[e("105. 从前序与中序遍历序列构造二叉树"),n(l)])]),Ge,He,Je,Ke]),t("tr",null,[t("td",null,[t("a",Me,[e("700. 二叉搜索树中的搜索"),n(l)])]),Pe,Qe,Re,Se]),t("tr",null,[t("td",null,[t("a",Ue,[e("98. 验证二叉搜索树"),n(l)])]),We,Xe,Ye,Ze]),t("tr",null,[t("td",null,[t("a",$e,[e("530. 二叉搜索树的最小绝对差"),n(l)])]),tl,el,ll,nl]),t("tr",null,[t("td",null,[t("a",ol,[e("501. 二叉搜索树中的众数"),n(l)])]),rl,sl,dl,_l]),ul,cl,hl])])])}const ml=o(_,[["render",il],["__file","二叉树.html.vue"]]);export{ml as default};
