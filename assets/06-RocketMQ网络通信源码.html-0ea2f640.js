import{_ as n}from"./RocketMQ通信协议设计-a474ea90.js";import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,f as t}from"./app-1070b179.js";const p="/assets/image-20230607114242899-6dd5fa9b.png",o="/assets/RocketMQ消息编码器-f01e0d63.png",c="/assets/RocketMQ消息解码器-f314c3e2.png",l="/assets/RocketMQ消息RPC编解码流程-770d5032.png",i="/assets/RocketMQ发送同步消息流程-fb948e1a.png",u="/assets/RocketMQ发送异步消息流程-0df862db.png",k="/assets/RocketMQ发送单向消息流程-75d3498c.png",r={},d=t('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年08月01日23:20:55</td></tr><tr><td>V2</td><td>重构</td><td>2023年06月09日00:55:20</td></tr><tr><td>V3</td><td>新增图片</td><td>2023年06月09日23:35:13</td></tr></tbody></table><h2 id="本章分析流程" tabindex="-1"><a class="header-anchor" href="#本章分析流程" aria-hidden="true">#</a> 本章分析流程</h2><ul><li>分析通信相关类的继承关系，和它们提供的 API；</li><li>分析 RocketMQ 的消息协议设计和编解码；</li><li>分析发送同步消息、异步消息和单向消息的流程，包括双端是如何处理的；</li><li>分析如何处理超时的那些请求；</li></ul><h2 id="通信相关类的继承图" tabindex="-1"><a class="header-anchor" href="#通信相关类的继承图" aria-hidden="true">#</a> 通信相关类的继承图</h2><p><img src="'+p+`" alt="image-20230607114242899"></p><h2 id="接口和抽象类分析" tabindex="-1"><a class="header-anchor" href="#接口和抽象类分析" aria-hidden="true">#</a> 接口和抽象类分析</h2><p>在 RocketMQ 的通信层中有三个重要的接口。</p><ol><li>RemotingService</li><li>RemotingServer</li><li>RemotingClient</li></ol><p>和一个抽象类 NettyRemotingAbstract，这个抽象类是服务端和客户端的实现的公共父类。</p><h3 id="remotingservice-接口" tabindex="-1"><a class="header-anchor" href="#remotingservice-接口" aria-hidden="true">#</a> RemotingService 接口</h3><p>RemotingService 接口是 RocketMQ 网络通信的顶层接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RemotingService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 启动服务</span>
    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 关闭服务</span>
    <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 注册 rpc hook</span>
    <span class="token keyword">void</span> <span class="token function">registerRPCHook</span><span class="token punctuation">(</span><span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是启动服务、关闭服务和注册 RPC 钩子函数。</p><p>关于 RPCHook 钩子函数，其实就是在发送 RPC 的前后调用的方法，有点类似 Spring 的环绕通知。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RPCHook</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">doBeforeRequest</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> remoteAddr<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">doAfterResponse</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> remoteAddr<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span>
        <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="remotingserver-接口" tabindex="-1"><a class="header-anchor" href="#remotingserver-接口" aria-hidden="true">#</a> RemotingServer 接口</h3><p>RemotingServer 接口是 RocketMQ 中作为服务端的接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RemotingServer</span> <span class="token keyword">extends</span> <span class="token class-name">RemotingService</span> <span class="token punctuation">{</span>

    <span class="token comment">// 注册协议处理器</span>
    <span class="token keyword">void</span> <span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">NettyRequestProcessor</span> processor<span class="token punctuation">,</span>
        <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 注册默认的协议处理器</span>
    <span class="token keyword">void</span> <span class="token function">registerDefaultProcessor</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">NettyRequestProcessor</span> processor<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">localListenPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 根据消息 code 获取协议处理器</span>
    <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NettyRequestProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">&gt;</span></span> <span class="token function">getProcessorPair</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> requestCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 同步发送消息</span>
    <span class="token class-name">RemotingCommand</span> <span class="token function">invokeSync</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span>
        <span class="token keyword">final</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingSendRequestException</span><span class="token punctuation">,</span>
        <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">;</span>

    <span class="token comment">// 异步发送消息</span>
    <span class="token keyword">void</span> <span class="token function">invokeAsync</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">,</span>
        <span class="token keyword">final</span> <span class="token class-name">InvokeCallback</span> invokeCallback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span>
        <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingSendRequestException</span><span class="token punctuation">;</span>

    <span class="token comment">// 单向发送消息</span>
    <span class="token keyword">void</span> <span class="token function">invokeOneway</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">,</span>
        <span class="token class-name">RemotingSendRequestException</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>API 分析：</p><ul><li>因为是服务端，它要处理来自客户端的请求，所以需要提供一些注册业务处理器的方法，例如 registerProcessor 方法；</li><li>提供了发送 RPC 请求的 API，例如发送同步消息的 invokeSync 方法；</li></ul><h3 id="remotingclient-接口" tabindex="-1"><a class="header-anchor" href="#remotingclient-接口" aria-hidden="true">#</a> RemotingClient 接口</h3><p>RemotingClient 接口和 RemotingServer 接口提供的 API 差不多，提供了发送 RPC 请求的 API，例如发送同步消息的 invokeSync 方法。</p><p>另外 RemotingClient 提供了获取 NameServer 地址的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RemotingClient</span> <span class="token keyword">extends</span> <span class="token class-name">RemotingService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新 NameServer 的地址</span>
    <span class="token keyword">void</span> <span class="token function">updateNameServerAddressList</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addrs<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取 NameServer 的地址</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNameServerAddressList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nettyremotingabstract-抽象类" tabindex="-1"><a class="header-anchor" href="#nettyremotingabstract-抽象类" aria-hidden="true">#</a> NettyRemotingAbstract 抽象类</h3><p>NettyRemotingAbstract 抽象类是 NettyRemotingServer 和 NettyRemotingClient 公共父类。主要是定义了客户端和服务端都用到的一些属性。例如：</p><p>（1）请求的并发限制，用于防止系统内存占用过高：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 单向请求的并发量，防止系统内存占用过高</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphoreOneway<span class="token punctuation">;</span>

<span class="token comment">// 异步请求的并发量，防止系统内存占用过高</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphoreAsync<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）一个 RPC 都有一个请求 id，在发送 RPC 请求之前将请求 id 存放到 responseTable 中保存，当对端响应数据后又将请求 id 对应的 ResponseFuture 从 responseTable 中移除。通过定时扫描 responseTable 就可以知道那些 RPC 请求超时了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span> <span class="token comment">/* opaque */</span><span class="token punctuation">,</span> <span class="token class-name">ResponseFuture</span><span class="token operator">&gt;</span> responseTable <span class="token operator">=</span>
    <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ResponseFuture</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）请求 code 和对应的业务处理器、线程池的映射关系。也就是说一个 code 对应的请求需要对应的 NettyRequestProcessor 来处理；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token comment">/* request code */</span><span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NettyRequestProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> processorTable <span class="token operator">=</span>
    <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">NettyRequestProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）缺省的业务处理器，也就是说假如 code 对应的业务处理器在（3）的映射关系中没有找到，就用缺省的 defaultRequestProcessor 来处理了。NameServer 用的就是这个 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NettyRequestProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">&gt;</span></span> defaultRequestProcessor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（5）NettyEventExecutor 是 Thread 类型，它的作用是监听 Netty 的 Channel 状态变化。当 Channel 的状态发生改变后，监听状态改变的监听器就会执行对应的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">NettyEventExecutor</span> nettyEventExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyEventExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（6）RPCHook 列表，在执行 RPC 前后时会执行这些钩子函数的逻辑。类似 Spring 的环绕通知。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RPCHook</span><span class="token punctuation">&gt;</span></span> rpcHooks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RPCHook</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关于 NettyRemotingAbstract 实现的方法，就是发送消息、执行钩子函数、检查 RPC 请求是否超时等方法，遇到了再具体分析。</p><h2 id="消息协议设计以及编解码" tabindex="-1"><a class="header-anchor" href="#消息协议设计以及编解码" aria-hidden="true">#</a> 消息协议设计以及编解码</h2><h3 id="协议设计" tabindex="-1"><a class="header-anchor" href="#协议设计" aria-hidden="true">#</a> 协议设计</h3><p>RocketMQ 中的网络传输数据的格式如下：</p><p><img src="`+n+`" alt="RocketMQ通信协议设计"></p><p>可见传输内容主要可以分为以下 4 部分：</p><ol><li>消息长度：总长度，四个字节存储，占用一个 int 类型；</li><li>序列化类型 &amp; 消息头长度：同样占用一个 int 类型，第一个字节表示序列化类型，后面三个字节表示消息头长度；</li><li>消息头 Header 数据：经过序列化后的消息头数据；</li><li>消息体 Body 数据：消息主体的二进制字节数据内容；</li></ol><p>关于消息头的各个字段的格式如下表所示：</p><table><thead><tr><th>Header字段</th><th>类型</th><th>Request 说明</th><th>Response 说明</th></tr></thead><tbody><tr><td>code</td><td>int</td><td>请求操作码，应答方根据不同的请求码进行不同的业务处理</td><td>应答响应码。0表示成功，非0则表示各种错误</td></tr><tr><td>language</td><td>LanguageCode</td><td>请求方实现的语言</td><td>应答方实现的语言</td></tr><tr><td>version</td><td>int</td><td>请求方程序的版本</td><td>应答方程序的版本</td></tr><tr><td>opaque</td><td>int</td><td>相当于 requestId，在同一个连接上的不同请求标识码，与响应消息中的相对应</td><td>应答不做修改直接返回</td></tr><tr><td>flag</td><td>int</td><td>区分是普通 RPC 还是 oneway RPC 的标志</td><td>区分是普通 RPC 还是 onewayRPC 的标志</td></tr><tr><td>remark</td><td>String</td><td>传输自定义文本信息</td><td>传输自定义文本信息</td></tr><tr><td>extFields</td><td>HashMap&lt;String, String&gt;</td><td>请求自定义扩展信息</td><td>响应自定义扩展信息</td></tr></tbody></table><p>以 broker 向 NameServer 注册的 RPC 请求的消息头 Header 为例，它的数据长下面这样，其中 extFields 是每种请求特有自定义的数据，其他数据是所有请求和响应共用的字段。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">103</span><span class="token punctuation">,</span>
    <span class="token property">&quot;extFields&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;brokerId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;bodyCrc32&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1818433699&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;clusterName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DefaultCluster&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;brokerAddr&quot;</span><span class="token operator">:</span> <span class="token string">&quot;172.16.50.43:10911&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;haServerAddr&quot;</span><span class="token operator">:</span> <span class="token string">&quot;172.16.50.43:10912&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;compressed&quot;</span><span class="token operator">:</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;brokerName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;broker-a&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;flag&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;language&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JAVA&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;opaque&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token property">&quot;serializeTypeCurrentRPC&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JSON&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">399</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于传输的消息体，每种类型的消息体都不一样，有的消息其实也没有消息体。同样以 broker 向 NameServer 注册的 RPC 请求的消息体 Body 为例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;filterServerList&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;topicConfigSerializeWrapper&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;dataVersion&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;counter&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
            <span class="token property">&quot;timestamp&quot;</span><span class="token operator">:</span> <span class="token number">1649954601593</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;topicConfigTable&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;SCHEDULE_TOPIC_XXXX&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;order&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;perm&quot;</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
                <span class="token property">&quot;readQueueNums&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
                <span class="token property">&quot;topicFilterType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SINGLE_TAG&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;topicName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SCHEDULE_TOPIC_XXXX&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;topicSysFlag&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;writeQueueNums&quot;</span><span class="token operator">:</span> <span class="token number">18</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            
            <span class="token comment">// ...... 省略其它 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="remotingcommand-消息封装" tabindex="-1"><a class="header-anchor" href="#remotingcommand-消息封装" aria-hidden="true">#</a> RemotingCommand 消息封装</h3><p>在 RocketMQ 中所有要传输的网络数据封装在 RemotingCommand 类中，下面看下它的成员属性，可以很清楚的看到，RemotingCommand 类的属性和我们上一节的协议设计的字段一模一样。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 消息请求或响应的 code</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>
<span class="token comment">// 请求方或响应方使用的语言</span>
<span class="token keyword">private</span> <span class="token class-name">LanguageCode</span> language <span class="token operator">=</span> <span class="token class-name">LanguageCode</span><span class="token punctuation">.</span><span class="token constant">JAVA</span><span class="token punctuation">;</span>
<span class="token comment">// 请求方或响应方程序的版本号</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> version <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// requestId</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> opaque <span class="token operator">=</span> requestId<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 标记位，区分是普通 RPC 还是 oneway RPC 的标志，</span>
<span class="token comment">// 1-响应</span>
<span class="token comment">// 2-oneway</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 传输自定义文本信息</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> remark<span class="token punctuation">;</span>
<span class="token comment">// 自定义扩展信息</span>
<span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extFields<span class="token punctuation">;</span>

<span class="token comment">// 不参与序列化 反射将 customHeader 压入到 extFields</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">CommandCustomHeader</span> customHeader<span class="token punctuation">;</span>

<span class="token comment">// 序列化类型，默认 json</span>
<span class="token keyword">private</span> <span class="token class-name">SerializeType</span> serializeTypeCurrentRPC <span class="token operator">=</span> serializeTypeConfigInThisServer<span class="token punctuation">;</span>

<span class="token comment">// 不参与序列化</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有两个字段需要注意，那就是 customHeader 和 body，这两个字段被 transient 修饰，也就是说这两个字段不参与序列化。</p><ul><li>body：在组装数据的时候就被转换成字节流了；</li><li>customHeader：这个字段会在 NettyEncoder 中处理，其实就是将 customHeader 字段的内容存放到 Map 类型的 extFields 中，再参与序列化；</li></ul><h3 id="nettyencoder-编码器" tabindex="-1"><a class="header-anchor" href="#nettyencoder-编码器" aria-hidden="true">#</a> NettyEncoder 编码器</h3><p>编码器的流程如下：</p><img src="`+o+`" alt="RocketMQ消息编码器" style="zoom:67%;"><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ChannelHandler.Sharable</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyEncoder</span> <span class="token keyword">extends</span> <span class="token class-name">MessageToByteEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RemotingCommand</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InternalLogger</span> log <span class="token operator">=</span> <span class="token class-name">InternalLoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">ROCKETMQ_REMOTING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 编码
     *
     * RemotingCommand 对象里的 customHeader 和 body 不参与序列化
     * 会将 customHeader 里的字段通过反射添加到 extFields（一个 map）中
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> remotingCommand<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> out<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">ByteBuffer</span> header <span class="token operator">=</span> remotingCommand<span class="token punctuation">.</span><span class="token function">encodeHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            out<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> remotingCommand<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                out<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;encode exception, &quot;</span> <span class="token operator">+</span> <span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">parseChannelRemoteAddr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>remotingCommand <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>remotingCommand<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">RemotingUtil</span><span class="token punctuation">.</span><span class="token function">closeChannel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么关键就是 RemotingCommand#encodeHeader() 方法：</p><p>代码很简单：</p><ol><li>调用重载的 encodeHeader 方法， <ol><li>假如 RemotingCommand 的 body 属性有值就传入 body 的长度；</li><li>假如没有值就传 0；</li></ol></li><li>调用 RemotingCommand#headerEncode 将 RemotingCommand 序列化；（注意 transient 修饰的字段不被序列化）</li><li>依次添加，消息总长度 length，序列化类型 + headerLength，header Data 到 ByteBuffer 里；</li></ol><p>那么问题来了，我们的 body Data 怎么没添加到 ByteBuffer 里啊？这个是在 NettyEncoder 中添加的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ByteBuffer</span> <span class="token function">encodeHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">encodeHeader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">ByteBuffer</span> <span class="token function">encodeHeader</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> bodyLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1&gt; header length size</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

    <span class="token comment">// 2&gt; header data length</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> headerData<span class="token punctuation">;</span>
    headerData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">headerEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    length <span class="token operator">+=</span> headerData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

    <span class="token comment">// 3&gt; body data length</span>
    length <span class="token operator">+=</span> bodyLength<span class="token punctuation">;</span>

    <span class="token comment">// 申请堆内内存 4 + (4 + headerData.length)</span>
    <span class="token class-name">ByteBuffer</span> result <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> length <span class="token operator">-</span> bodyLength<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// length 4个字节</span>
    result<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// header length  4个字节</span>
    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">markProtocolType</span><span class="token punctuation">(</span>headerData<span class="token punctuation">.</span>length<span class="token punctuation">,</span> serializeTypeCurrentRPC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// header data</span>
    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>headerData<span class="token punctuation">)</span><span class="token punctuation">;</span>

    result<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK 这里已经知道 RocketMQ 是如何编码的了。</p><h3 id="nettydecoder-解码器" tabindex="-1"><a class="header-anchor" href="#nettydecoder-解码器" aria-hidden="true">#</a> NettyDecoder 解码器</h3><p>NettyDecoder 继承自 LengthFieldBasedFrameDecoder，为了解决粘包拆包问题。</p><p>构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NettyDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// |长度 4 字节| - | 数据 |</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">FRAME_MAX_LENGTH</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据它的构造方法，可以得到的信息是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lengthFieldOffset = 0
lengthFieldLength  = 4
lengthAdjustment   = 0
initialBytesToStrip = 4

BEFORE DECODE (16 bytes)         AFTER DECODE (12 bytes)
+------------+----------------+      +----------------+
|   Length   | Actual Content |-----&gt;| Actual Content |
| 0x0000000C | &quot;HELLO, WORLD&quot; |      | &quot;HELLO, WORLD&quot; |
+------------+----------------+      +----------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解码流程：</p><ol><li>获取一帧数据；</li><li>将该 Netty 的 ByteBuf 转为 JDK NIO 的ByteBuffer；</li><li>调用 RemotingCommand#decode(ByteBuffer) 方法解码，将网络数据转换为 RemotingCommand 实例；</li></ol><img src="`+c+`" alt="RocketMQ消息解码器" style="zoom:67%;"><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">LengthFieldBasedFrameDecoder</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InternalLogger</span> log <span class="token operator">=</span> <span class="token class-name">InternalLoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">ROCKETMQ_REMOTING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">FRAME_MAX_LENGTH</span> <span class="token operator">=</span>
        <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;com.rocketmq.remoting.frameMaxLength&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;16777216&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">NettyDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// |长度 4 字节| - | 数据 |</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">FRAME_MAX_LENGTH</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteBuf</span> frame <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>

            frame <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 转换为 ByteBuffer</span>
            <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">nioBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token comment">// 此时的 ByteBuffer 是</span>
            <span class="token comment">// | 4 字节（1 个存序列化协议类型，3 个存headerData.length）| - | headerData 数据| - | body 数据 |</span>
            <span class="token keyword">return</span> <span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;decode exception, &quot;</span> <span class="token operator">+</span> <span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">parseChannelRemoteAddr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RemotingUtil</span><span class="token punctuation">.</span><span class="token function">closeChannel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                frame<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么关键就是 RemotingCommand#decode(ByteBuffer) 方法，这个方法里面就是 JDK NIO 的 API 操作了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RemotingCommand</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> byteBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemotingCommandException</span> <span class="token punctuation">{</span>
        <span class="token comment">// headerData.length + body.length</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> byteBuffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这个 oriHeaderLen 里包含了 协议类型 和 headerData.length</span>
        <span class="token keyword">int</span> oriHeaderLen <span class="token operator">=</span> byteBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 headerData.length</span>
        <span class="token keyword">int</span> headerLength <span class="token operator">=</span> <span class="token function">getHeaderLength</span><span class="token punctuation">(</span>oriHeaderLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> headerData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>headerLength<span class="token punctuation">]</span><span class="token punctuation">;</span>
        byteBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>headerData<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取协议类型，解码 headerData</span>
        <span class="token class-name">RemotingCommand</span> cmd <span class="token operator">=</span> <span class="token function">headerDecode</span><span class="token punctuation">(</span>headerData<span class="token punctuation">,</span> <span class="token function">getProtocolType</span><span class="token punctuation">(</span>oriHeaderLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 计算 body 的长度</span>
        <span class="token keyword">int</span> bodyLength <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">-</span> headerLength<span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bodyData <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bodyLength <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bodyData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>bodyLength<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取 body 数据</span>
            byteBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bodyData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cmd<span class="token punctuation">.</span>body <span class="token operator">=</span> bodyData<span class="token punctuation">;</span>

        <span class="token keyword">return</span> cmd<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>十分明了啦，解码后得到 RemotingCommand 实例。</p><h3 id="消息协议和编解码小结" tabindex="-1"><a class="header-anchor" href="#消息协议和编解码小结" aria-hidden="true">#</a> 消息协议和编解码小结</h3><p><img src="`+l+'" alt="RocketMQ消息RPC编解码流程"></p><h2 id="发送消息" tabindex="-1"><a class="header-anchor" href="#发送消息" aria-hidden="true">#</a> 发送消息</h2><p>在 RocketMQ 中，发送 RPC 消息有三种类型：</p><ul><li>发送同步消息；</li><li>发送异步消息；</li><li>发送单向消息；</li></ul><h3 id="发送同步消息" tabindex="-1"><a class="header-anchor" href="#发送同步消息" aria-hidden="true">#</a> 发送同步消息</h3><p>以 NettyRemotingClient#invokeSync 分析，Server 端也有类似的。首先看下发送同步消息的整体流程图：</p><p><img src="'+i+`" alt="RocketMQ发送同步消息流程"></p><h4 id="发送同步消息准备" tabindex="-1"><a class="header-anchor" href="#发送同步消息准备" aria-hidden="true">#</a> 发送同步消息准备</h4><p>主要流程：</p><ol><li>因为是客户端，首先需要和服务端建立连接，所以需要调用 NettyRemotingClient#getAndCreateChannel 方法获取连接 Channel；</li><li>校验连接状态后，首先执行所有的前置的 RPC hook 函数；</li><li>校验执行前置 RPC 钩子函数的时候是否超时；</li><li>执行抽象类的 NettyRemotingAbstract#invokeSyncImpl 方法发送同步消息；</li><li>执行所有的后置的 RPC hook 函数；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">invokeSync</span><span class="token punctuation">(</span><span class="token class-name">String</span> addr<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingConnectException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingSendRequestException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTimeoutException</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> beginStartTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取或者创建一个客户端和服务端的通道 Channel，</span>
    <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndCreateChannel</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 校验通道的状态，条件成立则说明客户端和服务端的通到已经连接，可以通信</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> channel<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行 RPC 钩子函数</span>
            <span class="token function">doBeforeRpcHooks</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginStartTime<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutMillis <span class="token operator">&lt;</span> costTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">(</span><span class="token string">&quot;invokeSync call the addr[&quot;</span> <span class="token operator">+</span> addr <span class="token operator">+</span> <span class="token string">&quot;] timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 同步获得服务端的响应数据 response</span>
            <span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invokeSyncImpl</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> request<span class="token punctuation">,</span> timeoutMillis <span class="token operator">-</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行 RPC 钩子函数</span>
            <span class="token function">doAfterRpcHooks</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">parseChannelRemoteAddr</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> response<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingSendRequestException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// ...... 省略异常处理 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingTimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略异常处理 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeChannel</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingConnectException</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="发送同步消息过程" tabindex="-1"><a class="header-anchor" href="#发送同步消息过程" aria-hidden="true">#</a> 发送同步消息过程</h4><p>OK 下面来分析 NettyRemotingAbstract#invokeSyncImpl 做了什么</p><p>发送同步消息的入参就分为三个：</p><ol><li>连接的 Channel；</li><li>网络数据的封装对象 RemotingCommand；</li><li>RPC 超时时间；</li></ol><p>NettyRemotingAbstract#invokeSyncImpl 方法比较长，我们分步分析该方法的逻辑：</p><p><strong>（1）首先获取此次的请求 id，代表当前请求。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">int</span> opaque <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（2）创建 ResponseFuture 对象，该对象保存了当前请求相关的数据，如 Channel、请求 id、RPC 超时时间。将 ResponseFuture 保存到 NettyRemotingAbstract#responseTable 中，这是一个 Map。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建 ResponseFuture 对象</span>
<span class="token keyword">final</span> <span class="token class-name">ResponseFuture</span> responseFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseFuture</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> opaque<span class="token punctuation">,</span> timeoutMillis<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加到请求的映射表内 key 是 opaque</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>responseTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>opaque<span class="token punctuation">,</span> responseFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）发送数据到对端，并添加监听器。(监听器的代码这里先省略不看)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// request 写入到客户端 Channel，并注册监听器</span>
channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> f<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略监听器的代码 ......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）因为是同步发送消息，需要等待服务端的数据返回。所以这里用 CountDownLatch 来做线程通信。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 因为同步调用，业务线程在这里挂起，指定超时时间</span>
<span class="token class-name">RemotingCommand</span> responseCommand <span class="token operator">=</span> responseFuture<span class="token punctuation">.</span><span class="token function">waitResponse</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ResponseFuture#waitResponse 方法的实现如下，其中 CountDownLatch 的初始值是 1。当 CountDownLatch 的值减少到了 0 时，就会返回 responseCommand 的数据了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">waitResponse</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>responseCommand<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（5）数据是否发送成功，可以通过前面在 ctx.writeAndFlush(xxx) 的监听器中知道，监听器的代码如下：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// request 写入到客户端 Channel，并注册监听器</span>
channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> f<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 请求写成功了</span>
            responseFuture<span class="token punctuation">.</span><span class="token function">setSendRequestOK</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 写失败了...</span>
            responseFuture<span class="token punctuation">.</span><span class="token function">setSendRequestOK</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 走到此处，前置条件是写失败了...</span>
        <span class="token comment">// 当前请求的 responseFuture 从映射表移除</span>
        responseTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置失败原因</span>
        responseFuture<span class="token punctuation">.</span><span class="token function">setCause</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 唤醒 countDownLatch#await 的线程</span>
        responseFuture<span class="token punctuation">.</span><span class="token function">putResponse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;send a request command to channel &lt;&quot;</span> <span class="token operator">+</span> addr <span class="token operator">+</span> <span class="token string">&quot;&gt; failed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>成功发送数据到对端：设置 sendRequestOK 的值为 true 后，直接返回；</li><li>数据未成功发送：设置 sendRequestOK 的值为 false 后，将该请求 id 对应的 ResponseFuture 从 Map 中删除，同时调用 ResponseFuture#putResponse 将 CountDownLatch 的值减为 0，唤醒前面发送消息的线程。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putResponse</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> responseCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>responseCommand <span class="token operator">=</span> responseCommand<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（6）这里分析数据成功发送到服务端后，服务端响应数据到客户端，最终会调用到 NettyRemotingAbstract#processResponseCommand 方法，可以看到也是将该请求 id 对应的 ResponseFuture 从 Map 中删除，同时调用 ResponseFuture#putResponse 将 CountDownLatch 的值减为 0，唤醒前面发送消息的线程</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResponseCommand</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取响应的 opaque</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> opaque <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">getOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从响应的映射表 responseTable 中获取 ResponseFuture</span>
    <span class="token keyword">final</span> <span class="token class-name">ResponseFuture</span> responseFuture <span class="token operator">=</span> responseTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFuture <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置客户端 cmd</span>
        responseFuture<span class="token punctuation">.</span><span class="token function">setResponseCommand</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 通过 opaque 移除 ResponseFuture</span>
        responseTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFuture<span class="token punctuation">.</span><span class="token function">getInvokeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略异步处理 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 同步走这里</span>
            <span class="token comment">// 设置 future 的结果，这里会调用 CountDownLatch 的 countDown() 方法</span>
            <span class="token comment">// 将同步调用的业务线程唤醒</span>
            responseFuture<span class="token punctuation">.</span><span class="token function">putResponse</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            responseFuture<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略日志打印 ......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（7）最后是返回响应数据 responseCommand。有三种情况：</p><ul><li>正常情况：对端返回数据了，将发送同步消息的线程唤醒；</li><li>异常情况：countDownLatch#await 超时自动唤醒；</li><li>异常情况：发送数据到服务端失败，例如写缓冲区满了；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> responseCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFuture<span class="token punctuation">.</span><span class="token function">isSendRequestOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// CASE2:超时</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">parseSocketAddressAddr</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">,</span> timeoutMillis<span class="token punctuation">,</span>
            responseFuture<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// CASE3:发送失败</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingSendRequestException</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">parseSocketAddressAddr</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">,</span> responseFuture<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// CASE1:正常情况，返回客户端请求结果</span>
<span class="token keyword">return</span> responseCommand<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送异步消息" tabindex="-1"><a class="header-anchor" href="#发送异步消息" aria-hidden="true">#</a> 发送异步消息</h3><p>既然是发送异步消息，那么就必须要一个回调函数，当对端处理完消息时需要回调这个函数。</p><p>RocketMQ 中的 org.apache.rocketmq.remoting.InvokeCallback 接口就是定义回调函数的接口，就一个方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvokeCallback</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ResponseFuture</span> responseFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NettyRemotingClient#invokeAsync 发送异步方法的流程和上面发送同步消息的流程基本上一样。先看流程图：</p><p><img src="`+u+`" alt="RocketMQ发送异步消息流程"></p><p>直接来看 NettyRemotingAbstract#invokeAsyncImpl 吧。</p><p>入参：</p><ol><li>连接通道 Channel；</li><li>网络请求对象 RemotingCommand；</li><li>RPC 超时时间；</li><li>回调函数；</li></ol><p>前面已经分析过发送同步 RPC 消息的过程，在分析发送异步消息的流程就简单点，主要分析差异点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeAsyncImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">,</span>
        <span class="token keyword">final</span> <span class="token class-name">InvokeCallback</span> invokeCallback<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingSendRequestException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 开始时间</span>
        <span class="token keyword">long</span> beginStartTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 请求 id</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> opaque <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 因为有发送异步消息有并发度的限制，尝试获取一个信号量许可证，会阻塞线程</span>
        <span class="token keyword">boolean</span> acquired <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>semaphoreAsync<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>acquired<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// SemaphoreReleaseOnlyOnce 对象封装了释放信号量的操作</span>
            <span class="token keyword">final</span> <span class="token class-name">SemaphoreReleaseOnlyOnce</span> once <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SemaphoreReleaseOnlyOnce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>semaphoreAsync<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginStartTime<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutMillis <span class="token operator">&lt;</span> costTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 已经超时了，需要释放信号量</span>
                once<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">(</span><span class="token string">&quot;invokeAsyncImpl call timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 注意剩余的超时时间是 timeoutMillis - costTime</span>
            <span class="token comment">// 创建 ResponseFuture 对象</span>
            <span class="token keyword">final</span> <span class="token class-name">ResponseFuture</span> responseFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseFuture</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> opaque<span class="token punctuation">,</span> timeoutMillis <span class="token operator">-</span> costTime<span class="token punctuation">,</span> invokeCallback<span class="token punctuation">,</span> once<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 添加到映射表</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>responseTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>opaque<span class="token punctuation">,</span> responseFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 业务线程将数据交给 Netty，netty 的 IO 线程做写和刷新的操作</span>
                <span class="token comment">// 使用客户端 Channel 发送 request，注册监听器，监听器是 IO 线程调用的</span>
                channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> f<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            responseFuture<span class="token punctuation">.</span><span class="token function">setSendRequestOK</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">return</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token comment">// 设置发送失败，删除映射表 responseTable 的数据，执行回调函数</span>
                        <span class="token function">requestFail</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;send a request command to channel &lt;{}&gt; failed.&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">parseChannelRemoteAddr</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token comment">// ...... 省略异常处理 ......</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
           <span class="token comment">// ...... 省略获取许可证失败的处理，并发度过高 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里主要分析异步 RPC 消息和同步 RPC 消息的差异点。</p><ul><li><p>在 RocketMQ 中异步消息和 one way 消息都是用并发限制的，使用 Semaphore 来做并发限制；</p></li><li><p>同样是创建 ResponseFuture 对象，异步 RPC 消息多了 InvokeCallback 和 SemaphoreReleaseOnlyOnce 类型的参数。</p><ul><li>InvokeCallback：是异步消息发送成功或者发送失败后需要回调的函数，由业务自定义；</li><li>SemaphoreReleaseOnlyOnce：我们说了异步消息是有并发度限制的，当异步消息发送成功或失败后需要释放此次获取的许可证；</li></ul></li><li><p>最后在 channel.writeAndFlush(xxx) 的监听器中发送数据失败时调用了 NettyRemotingAbstract#requestFail 方法，它的实现如下，做的事情注释写的比较清楚。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">requestFail</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> opaque<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 移除映射表</span>
    <span class="token class-name">ResponseFuture</span> responseFuture <span class="token operator">=</span> responseTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFuture <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        responseFuture<span class="token punctuation">.</span><span class="token function">setSendRequestOK</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 里面会调用 countDownLatch.countDown()</span>
        responseFuture<span class="token punctuation">.</span><span class="token function">putResponse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行回调方法</span>
            <span class="token function">executeInvokeCallback</span><span class="token punctuation">(</span>responseFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;execute callback in requestFail, and callback throw&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 释放 Semaphore 许可证</span>
            responseFuture<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>那么问题来了，前面只分析了异步消息发送失败后会做什么，那么异步消息发送成功后，对端响应消息后是如何执行回调函数的呢？</p><p>和同步 RPC 消息一样，同样是在 NettyRemotingAbstract#processResponseCommand 方法中处理的，就是调用自定义的 InvokeCallback 回调函数了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResponseCommand</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取响应的 opaque</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> opaque <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">getOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从响应的映射表 responseTable 中获取 ResponseFuture</span>
    <span class="token keyword">final</span> <span class="token class-name">ResponseFuture</span> responseFuture <span class="token operator">=</span> responseTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFuture <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置客户端 cmd</span>
        responseFuture<span class="token punctuation">.</span><span class="token function">setResponseCommand</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 通过 opaque 移除 ResponseFuture</span>
        responseTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFuture<span class="token punctuation">.</span><span class="token function">getInvokeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 异步走这里</span>
            <span class="token comment">// 回调对象处理结果</span>
            <span class="token function">executeInvokeCallback</span><span class="token punctuation">(</span>responseFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略同步的处理 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略 ......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送单向消息" tabindex="-1"><a class="header-anchor" href="#发送单向消息" aria-hidden="true">#</a> 发送单向消息</h3><p>先看流程图：</p><p><img src="`+k+`" alt="RocketMQ发送单向消息流程"></p><p>NettyRemotingClient#invokeOneway</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeOneway</span><span class="token punctuation">(</span><span class="token class-name">String</span> addr<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span>
<span class="token class-name">RemotingConnectException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingSendRequestException</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndCreateChannel</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> channel<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">doBeforeRpcHooks</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invokeOnewayImpl</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> request<span class="token punctuation">,</span> timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingSendRequestException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略异常处理 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略异常处理 ......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两步骤：</p><ul><li>获取已有连接，或者创建一个新的连接；</li><li>执行所有前置 RPC Hook 方法；</li></ul><p>NettyRemotingClient#invokeOneway 发送单向消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeOnewayImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingSendRequestException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置单向发送的标记，对端检查标记就可以知道是请求是单向请求</span>
        request<span class="token punctuation">.</span><span class="token function">markOnewayRPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 申请信号量</span>
        <span class="token keyword">boolean</span> acquired <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>semaphoreOneway<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>acquired<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 释放信号量逻辑的封装对象</span>
            <span class="token keyword">final</span> <span class="token class-name">SemaphoreReleaseOnlyOnce</span> once <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SemaphoreReleaseOnlyOnce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>semaphoreOneway<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 将数据交给 Channel，这里数据发送的逻辑由 Netty 线程完成</span>
                <span class="token comment">// 注册监听器，由 Netty 的 IO 线程回调</span>
                channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> f<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 只要操作完成，就释放信号量</span>
                        once<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;send a request command to channel &lt;&quot;</span> <span class="token operator">+</span> channel<span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&gt; failed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                once<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// ...... 省略异常处理 ......</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略 发送单向消息并发太高，获取许可证超时 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送单向消息相对于同步消息和异步消息简单很多，因为它不需要处理对端的响应。</p><ul><li>单向消息的请求头特殊点，request.markOnewayRPC() 将 flag 改为 2，表示是单向消息，这样服务端就不用响应了；</li><li>单向消息同样是需要控制并发度的，也是通过 Semaphore 来控制的；</li><li>然后直接 channel.writeAndFlush(xxx) 发送数据到对端，应为是单向消息，所以不需要处理响应；</li></ul><h2 id="接收处理消息" tabindex="-1"><a class="header-anchor" href="#接收处理消息" aria-hidden="true">#</a> 接收处理消息</h2><h3 id="接收消息入口" tabindex="-1"><a class="header-anchor" href="#接收消息入口" aria-hidden="true">#</a> 接收消息入口</h3><p>服务端和客户端都有一个处理器专门用来接收对端发送过来的消息。</p><ol><li>NettyRemotingClient.NettyClientHandler</li><li>NettyRemotingServer.NettyServerHandler</li></ol><p>以 NettyRemotingServer.NettyServerHandler 为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ChannelHandler.Sharable</span>
<span class="token keyword">class</span> <span class="token class-name">NettyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RemotingCommand</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token function">processMessageReceived</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们最终都调用到了 NettyRemotingAbstract#processMessageReceived 方法，根据消息类型的不同做不同的处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processMessageReceived</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> cmd <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 处理请求</span>
            <span class="token keyword">case</span> <span class="token constant">REQUEST_COMMAND</span><span class="token operator">:</span>
                <span class="token function">processRequestCommand</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token comment">// 处理响应走这里</span>
            <span class="token keyword">case</span> <span class="token constant">RESPONSE_COMMAND</span><span class="token operator">:</span>
                <span class="token function">processResponseCommand</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理请求类型消息" tabindex="-1"><a class="header-anchor" href="#处理请求类型消息" aria-hidden="true">#</a> 处理请求类型消息</h3><p>TODO-KWOK 上图</p><p>NettyRemotingAbstract#processRequestCommand</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequestCommand</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据业务 code，得到对应的处理器和线程池</span>
        <span class="token keyword">final</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NettyRequestProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">&gt;</span></span> matched <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processorTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 假如没有找到对应的处理器和线程池，则使用缺省的处理器和线程池</span>
        <span class="token keyword">final</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NettyRequestProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">==</span> matched <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultRequestProcessor <span class="token operator">:</span> matched<span class="token punctuation">;</span>
        <span class="token comment">// 获取请求 id</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> opaque <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">getOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>pair <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 封装一个 Runnable 对象，核心逻辑入口</span>
            <span class="token class-name">Runnable</span> run <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// ...... 省略 Runnable 的具体实现 ......</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token comment">// ...... 省略是否忽略该请求的校验 ......</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 将上面封装的 Runnable 和 Channel 和 cmd 封装为 RequestTask 对象</span>
                <span class="token keyword">final</span> <span class="token class-name">RequestTask</span> requestTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestTask</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 获取处理器对应的线程池，提交任务</span>
                pair<span class="token punctuation">.</span><span class="token function">getObject2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>requestTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// ...... 省略异常处理 ......</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略没有找到 code 对应的处理器的情况的处理 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程如下：</p><ol><li>根据 RemotingCommand 的 code 获取对应的协议处理器；</li><li>封装一个 Runnable 对象，这个 Runable 是干什么的下面分析；</li><li>封装一个 RequestTask 对象，将 Runnable 对象提交到对应的线程池中执行；</li></ol><p>前面知道了就是封装一个 Runnable 对象并且执行，现在类分析 Runnable 对象做了什么：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Runnable</span> run <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> remoteAddr <span class="token operator">=</span> <span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">parseChannelRemoteAddr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// RPC 前置钩子函数</span>
            <span class="token function">doBeforeRpcHooks</span><span class="token punctuation">(</span>remoteAddr<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// callback 封装响应客户端的逻辑</span>
            <span class="token keyword">final</span> <span class="token class-name">RemotingResponseCallback</span> callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemotingResponseCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token class-name">RemotingCommand</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// RPC 后置钩子函数</span>
                    <span class="token function">doAfterRpcHooks</span><span class="token punctuation">(</span>remoteAddr<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cmd<span class="token punctuation">.</span><span class="token function">isOnewayRPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            response<span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            response<span class="token punctuation">.</span><span class="token function">markResponseType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                <span class="token comment">// 将 response 写到对端</span>
                                ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                               <span class="token comment">// ...... 省略异常处理 ......</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">// namesrv 使用的 DefaultRequestProcessor，是 AsyncNettyRequestProcessor 子类</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">getObject1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">AsyncNettyRequestProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">AsyncNettyRequestProcessor</span> processor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AsyncNettyRequestProcessor</span><span class="token punctuation">)</span>pair<span class="token punctuation">.</span><span class="token function">getObject1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 处理请求</span>
                processor<span class="token punctuation">.</span><span class="token function">asyncProcessRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">NettyRequestProcessor</span> processor <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getObject1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                callback<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略异常处理 ......</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程：</p><ol><li>首先执行后置 RPC hook；</li><li>创建一个 RemotingResponseCallback 对象， <ol><li>这个对象是在协议处理器处理完消息后会回调的方法；</li><li>首先是执行后置 RPC hook；</li><li>根据当前 RPC 是单向请求，还是异步 or 同步走不同的分支 <ol><li>假如是单向的 RPC 请求则不处理；</li><li>假如是同步或者异步，需要将响应的 RemotingCommand 对象写到对端；</li></ol></li></ol></li><li>根据协议处理器是否是 AsyncNettyRequestProcessor 类型走不同的分支，但是都是调用协议处理器的处理方法，并且在最后都调用 RemotingResponseCallback#callback 回调方法。</li></ol><h3 id="处理响应类型消息" tabindex="-1"><a class="header-anchor" href="#处理响应类型消息" aria-hidden="true">#</a> 处理响应类型消息</h3><p>NettyRemotingAbstract#processResponseCommand</p><p><strong>服务端或客户端发送消息到对端后，假如是异步或同步消息时，对端处理完后需要响应消息。</strong></p><p>前面我们已经知道了发送异步或同步消息时，会将当前请求 id 和 对应的 ResponseFuture 对象添加到 NettyRemotingAbstract#responseTable 中，那么当对端响应一条消息时，需要从 responseTable 中得到请求 id 对应的 ResponseFuture 进行处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processResponseCommand</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取响应的 opaque</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> opaque <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">getOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从响应的映射表 responseTable 中获取 ResponseFuture</span>
    <span class="token keyword">final</span> <span class="token class-name">ResponseFuture</span> responseFuture <span class="token operator">=</span> responseTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFuture <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置客户端 cmd</span>
        responseFuture<span class="token punctuation">.</span><span class="token function">setResponseCommand</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 通过 opaque 移除 ResponseFuture</span>
        responseTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFuture<span class="token punctuation">.</span><span class="token function">getInvokeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 异步走这里</span>
            <span class="token comment">// 回调对象处理结果</span>
            <span class="token function">executeInvokeCallback</span><span class="token punctuation">(</span>responseFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 同步走这里</span>
            <span class="token comment">// 设置 future 的结果，这里会调用 CountDownLatch 的 countDown() 方法</span>
            <span class="token comment">// 将同步调用的业务线程唤醒</span>
            responseFuture<span class="token punctuation">.</span><span class="token function">putResponse</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            responseFuture<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;receive response, but not matched any request, &quot;</span> <span class="token operator">+</span> <span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">parseChannelRemoteAddr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里很明显：</p><ol><li>根据请求 id 得到发送消息时创建的 ResponseFuture 对象。（这里有一种可能得到的是 null，可能是请求超时被移除了）；</li><li>假如 responseFuture 中的 invokeCallback 属性不为 null，说明当前响应消息响应的是异步消息； <ol><li>响应的是异步消息，执行 invokeCallback 回调方法；</li><li>响应的是同步消息，countDownLatch 唤醒当前的同步发送代码中 wait 等待的代码；</li></ol></li></ol><h2 id="请求超时处理" tabindex="-1"><a class="header-anchor" href="#请求超时处理" aria-hidden="true">#</a> 请求超时处理</h2><p>在 NettyRemotingServer#start 和 NettyRemotingClient#start 中有个定时任务，每 1 秒扫描一次 NettyRemotingAbstract#responseTable 表，将超时的 responseFuture 从 responseTable 中移除，并执行它的回调方法（假如存在的话），</p><p>具体方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scanResponseTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 超时的 responseFuture 的集合</span>
    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseFuture</span><span class="token punctuation">&gt;</span></span> rfList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseFuture</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ResponseFuture</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>responseTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ResponseFuture</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ResponseFuture</span> rep <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 校验时间是否超时</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rep<span class="token punctuation">.</span><span class="token function">getBeginTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> rep<span class="token punctuation">.</span><span class="token function">getTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 释放信号量</span>
            rep<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 从 responseTable 中移除</span>
            it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 添加到超时的 responseFuture 的集合</span>
            rfList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rep<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;remove timeout request, &quot;</span> <span class="token operator">+</span> rep<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 一次回调超时的 ResponseFuture 的回调方法</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ResponseFuture</span> rf <span class="token operator">:</span> rfList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">executeInvokeCallback</span><span class="token punctuation">(</span>rf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;scanResponseTable, operationComplete Exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,171),m=[d];function v(b,y){return a(),e("div",null,m)}const f=s(r,[["render",v],["__file","06-RocketMQ网络通信源码.html.vue"]]);export{f as default};
