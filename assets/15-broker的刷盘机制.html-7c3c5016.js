import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-105fe43b.js";const e="/assets/image-20230618202606326-e1db1ecb.png",p="/assets/各种刷盘类型对比-49dbb4d3.png",o={},c=t('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年06月18日22:19:54</td></tr></tbody></table><h2 id="broker-的刷盘机制" tabindex="-1"><a class="header-anchor" href="#broker-的刷盘机制" aria-hidden="true">#</a> broker 的刷盘机制</h2><p>消息存储完成后会被操作系统持久化到磁盘。</p><p>RocketMQ 支持两种刷盘方式，同步刷盘和异步刷盘。刷盘功能涉及下面三个线程服务：</p><p><img src="'+e+'" alt="image-20230618202606326"></p><ul><li>GroupCommitService：同步刷盘服务；</li><li>FlushRealTimeService：异步刷盘服务；</li><li>CommitRealTimeService：内存级读写分离机制用的，消息首先会写到堆外内存，然后通过 commit 写到 os pageCache，最后由 os 异步刷新到磁盘；</li></ul><p><img src="'+p+`" alt="各种刷盘类型对比"></p><h2 id="刷盘机制的入口" tabindex="-1"><a class="header-anchor" href="#刷盘机制的入口" aria-hidden="true">#</a> 刷盘机制的入口</h2><p>Broker 在处理 Producer 发送来的消息，最终会调用到 CommitLog#asyncPutMessage 方法，在这个方法里面会去通知刷盘线程去刷盘。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 通知刷盘线程</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">&gt;</span></span> flushResultFuture <span class="token operator">=</span> <span class="token function">submitFlushRequest</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>看一下 CommitLog#submitFlushRequest 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">&gt;</span></span> <span class="token function">submitFlushRequest</span><span class="token punctuation">(</span><span class="token class-name">AppendMessageResult</span> result<span class="token punctuation">,</span> <span class="token class-name">MessageExt</span> messageExt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Synchronization flush</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FlushDiskType</span><span class="token punctuation">.</span><span class="token constant">SYNC_FLUSH</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlushDiskType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">GroupCommitService</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">GroupCommitService</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flushCommitLogService<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">isWaitStoreMsgOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 参数 1：当前写的位置 + 此次写的数据的字节数</span>
            <span class="token comment">// 参数 2：同步刷新的超时时间</span>
            <span class="token comment">// 创建同步刷盘任务</span>
            <span class="token class-name">GroupCommitRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupCommitRequest</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getWroteOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getWroteBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSyncFlushTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            flushDiskWatcher<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 添加同步刷盘任务</span>
            service<span class="token punctuation">.</span><span class="token function">putRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            service<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">PUT_OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Asynchronous flush</span>
    <span class="token comment">// 唤醒异步刷盘线程</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTransientStorePoolEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 唤醒异步刷盘服务</span>
            flushCommitLogService<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span>  <span class="token punctuation">{</span>
            <span class="token comment">// 内存级读写分离，唤醒提交到 page cache 服务</span>
            commitLogService<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">PUT_OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是根据配置获取当前 broker 的刷盘策略，然后去做不同的处理。主要就是前面提到的三种刷盘机制。接下来依次分析同步刷盘机制、异步刷盘、异步内存读写分离式刷盘。</p><h2 id="同步刷盘机制" tabindex="-1"><a class="header-anchor" href="#同步刷盘机制" aria-hidden="true">#</a> 同步刷盘机制</h2><p>同步刷盘是一个后台线程服务，先看下 GroupCommitService 的属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 同步刷盘任务暂存容器，是待刷新到磁盘的数据</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GroupCommitRequest</span><span class="token punctuation">&gt;</span></span> requestsWrite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GroupCommitRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// GroupCommitService 线程每次处理的 request 容器，避免任务提交和任务执行的锁冲突</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GroupCommitRequest</span><span class="token punctuation">&gt;</span></span> requestsRead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GroupCommitRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 自旋锁</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PutMessageSpinLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PutMessageSpinLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>requestsWrite 和 requestsRead 读写分析，也就是任务会提交到 requestsWrite 集合中，真正处理的时候会交换 requestsWrite 的数据到 requestsRead 中，然后处理 requestsRead 中的数据。交换操作如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swapRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GroupCommitRequest</span><span class="token punctuation">&gt;</span></span> tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestsWrite<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>requestsWrite <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键点就是 GroupCommitService#doCommit 方法了，这个方法会在 run 方法内每隔 10ms 死循环去执行的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历集合</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GroupCommitRequest</span> req <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// There may be a message in the next file, so a maximum of two times the flush</span>
            <span class="token comment">// 是否已经刷新完毕</span>
            <span class="token keyword">boolean</span> flushOK <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getFlushedWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> req<span class="token punctuation">.</span><span class="token function">getNextOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>flushOK<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 传 0 强制刷新</span>
                <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                flushOK <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getFlushedWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> req<span class="token punctuation">.</span><span class="token function">getNextOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 唤醒之前添加刷盘任务的线程</span>
            req<span class="token punctuation">.</span><span class="token function">wakeupCustomer</span><span class="token punctuation">(</span>flushOK <span class="token operator">?</span> <span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">PUT_OK</span> <span class="token operator">:</span> <span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">FLUSH_DISK_TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 处理完所有同步刷盘任务后，更新刷盘检测点 StoreCheckpoint 中 的 physicMsgTimestamp，</span>
        <span class="token comment">// 但并没有执行检测点的刷盘操作，刷盘检测点的刷盘操作将在刷写消息队列文件时触发。</span>
        <span class="token keyword">long</span> storeTimestamp <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>storeTimestamp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPhysicMsgTimestamp</span><span class="token punctuation">(</span>storeTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>requestsRead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Because of individual messages is set to not sync flush, it</span>
        <span class="token comment">// will come to this process</span>
        <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次刷盘前都需要做一些检查，以确认当前同步刷盘请求对应偏移量的消息是否已经被刷盘，如果已经被刷盘，当前刷盘请求就不需要执行。刷盘完成后，需要唤醒之前添加刷盘任务的线程，因为是同步刷盘嘛。</p><h2 id="异步刷盘机制" tabindex="-1"><a class="header-anchor" href="#异步刷盘机制" aria-hidden="true">#</a> 异步刷盘机制</h2><p>如果 Broker 配置了内存级别的读写分离，异步刷盘流程还包含提交到堆外内存的步骤。</p><h3 id="未配置内存读写分离" tabindex="-1"><a class="header-anchor" href="#未配置内存读写分离" aria-hidden="true">#</a> 未配置内存读写分离</h3><p>主要看 FlushRealTimeService 服务，刷盘流程主要在 FlushRealTimeService#run 中实现的，下面的操作都是在死循环中进行的：</p><p><strong>（1）第一步获取一些刷盘参数</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 控制线程休眠方式： true 使用 sleep 休眠，false 使用的是 countDownLatch.wait() 休眠，默认是 true</span>
<span class="token keyword">boolean</span> flushCommitLogTimed <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFlushCommitLogTimed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 异步刷盘间隔</span>
<span class="token keyword">int</span> interval <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlushIntervalCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 异步刷盘脏页最小值</span>
<span class="token keyword">int</span> flushPhysicQueueLeastPages <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlushCommitLogLeastPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 强制刷盘的时间间隔</span>
<span class="token keyword">int</span> flushPhysicQueueThoroughInterval <span class="token operator">=</span>
    <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlushCommitLogThoroughInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 是否打印刷盘进度</span>
<span class="token keyword">boolean</span> printFlushProgress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要关注「异步刷盘的间隔」、「异步刷盘的脏页的最小值」、「强制刷盘的时间间隔」，下面说下这三个参数的作用：</p><ul><li>异步刷盘的间隔：因为是在 while 循环中，要控制下每次循环的时间间隔，避免将 cpu 占用太长时间，导致无法执行其他更紧急的任务；</li><li>异步刷盘的脏页的最小值：每次消息来都刷盘、或者很长时间才去刷盘，前者会影响整个系统的性能，后者可能会导致消息不能及时写到磁盘。所以需要一个折中点，当写到内存中的数据达到一定页数的时候，就会去执行刷盘操作了；</li><li>强制刷盘的时间间隔：上次刷盘时间和此次间隔到一定值时，不管内存中脏页多少都会去强制刷盘的；</li></ul><p><strong>（2）第二步就是判断是否需要强制刷盘了</strong>，如果上次刷盘时间和此次间隔到一定值时，需要将 flushPhysicQueueLeastPages 设置为 0，表示强制刷盘。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 是否打印刷盘进度</span>
<span class="token keyword">boolean</span> printFlushProgress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// Print flush progress</span>
<span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>currentTimeMillis <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastFlushTimestamp <span class="token operator">+</span> flushPhysicQueueThoroughInterval<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 强制刷盘时间</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastFlushTimestamp <span class="token operator">=</span> currentTimeMillis<span class="token punctuation">;</span>
    <span class="token comment">// 设置为 0，表示强制置刷盘</span>
    flushPhysicQueueLeastPages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    printFlushProgress <span class="token operator">=</span> <span class="token punctuation">(</span>printTimes<span class="token operator">++</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）第三步就是休眠动作了，防止占用 CPU 时间过长</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 休眠逻辑，避免将 cpu 占用太长时间，导致无法执行其他更紧急的任务</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>flushCommitLogTimed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）第四步就是做真正的刷盘操作了</strong>，顺带记录一下 Checkpoint 信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 刷盘动作</span>
<span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span>flushPhysicQueueLeastPages<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 更新checkpoint文件的CommitLog文件更新时间戳，</span>
<span class="token comment">// checkpoint文件的刷盘动作在刷盘ConsumeQueue线程中执行，其入口为DefaultMessageStore#FlushConsumeQueueService。</span>

<span class="token comment">// 获取最后一条数据的存储时间</span>
<span class="token keyword">long</span> storeTimestamp <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>storeTimestamp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 记录 checkpoint 的时间</span>
    <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getStoreCheckpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPhysicMsgTimestamp</span><span class="token punctuation">(</span>storeTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内存读写分离的刷盘" tabindex="-1"><a class="header-anchor" href="#内存读写分离的刷盘" aria-hidden="true">#</a> 内存读写分离的刷盘</h3><p>先说一下流程：</p><ul><li>生产者写消息到 broker，broker 处理消息；</li><li>broker 先写到直接内存；</li><li>通过 CommitRealTimeService 线程服务将数据写到 page cache；</li><li>然后通过 FlushRealTimeService 线程服务区刷盘；</li></ul><p>这里主要关注 CommitRealTimeService 服务的逻辑，FlushRealTimeService 上一小节已经分析过了。主要关注 CommitRealTimeService#run 方法，下面的逻辑也是再死循环中进行的</p><p><strong>（1）首先获取提交的一些参数，并判断是否需要强制提交</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取刷新间隔时间</span>
<span class="token keyword">int</span> interval <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCommitIntervalCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取最小 刷盘的页数</span>
<span class="token keyword">int</span> commitDataLeastPages <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCommitCommitLogLeastPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> commitDataThoroughInterval <span class="token operator">=</span>
 <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCommitCommitLogThoroughInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastCommitTimestamp <span class="token operator">+</span> commitDataThoroughInterval<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastCommitTimestamp <span class="token operator">=</span> begin<span class="token punctuation">;</span>
    commitDataLeastPages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）提交操作。如果返回的 result 是 false，唤醒异步刷盘线程。返回 false 并不是表示没有数据被提交到 page cache中，而是说明有部分数据提交成功，部分数据提交失败，所以可以唤醒刷盘线程执行刷盘操作。而如果转存成功，则正常进行异步刷盘即可。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>commitDataLeastPages<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastCommitTimestamp <span class="token operator">=</span> end<span class="token punctuation">;</span> <span class="token comment">// result = false means some data committed.</span>
        <span class="token comment">//now wake up flush thread.</span>
        flushCommitLogService<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin <span class="token operator">&gt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Commit data to file costs {} ms&quot;</span><span class="token punctuation">,</span> end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="刷盘机制的对比" tabindex="-1"><a class="header-anchor" href="#刷盘机制的对比" aria-hidden="true">#</a> 刷盘机制的对比</h2><table><thead><tr><th>刷盘机制</th><th>异步实时刷盘</th><th>异步刷盘（内存读写分离）</th><th>同步刷盘</th></tr></thead><tbody><tr><td>数据一致性</td><td>中</td><td>低</td><td>高</td></tr><tr><td>数据可靠性</td><td>低</td><td>低</td><td>高</td></tr><tr><td>数据可用性</td><td>中</td><td>低</td><td>高</td></tr><tr><td>系统吞吐量</td><td>高</td><td>高</td><td>低</td></tr></tbody></table><p>解释一下：</p><ul><li><strong>同步刷盘</strong>：因为只有消息落盘成功后，broker 才会给 producer 响应，所有它的消息可靠性是最高的，但是正是要等待落盘完成才响应给 producer，所有吞吐量也是最差的；</li><li><strong>异步实时落盘</strong>：当 broker 把消息写到内存映射上（其实就算 page cache 了），然后就会给 producer 响应了。当写到 page cache 上后，只要系统正常，os 就会有一个异步线程去刷盘。RocketMQ 也有一些后台线程去强制刷盘。但是如果写到 page cache，宿主机崩溃了，这部分数据就丢失了。这时系统吞吐量虽然高了，但是有丢失数据的风险；</li><li><strong>异步刷盘（内存级别读写分离）</strong>：这个机制首先是先提交到直接内存，然后通过后台线程去写到 page cache，最后是后台线程去刷盘。在写 page cache 和刷盘这两步都有丢失数据的风险；</li></ul>`,47),l=[c];function i(u,k){return s(),a("div",null,l)}const m=n(o,[["render",i],["__file","15-broker的刷盘机制.html.vue"]]);export{m as default};
