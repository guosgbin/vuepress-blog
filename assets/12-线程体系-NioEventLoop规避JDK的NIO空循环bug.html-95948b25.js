import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-c9bd35d8.js";const e="/assets/规避NIO空循环bug-369f6710.png",p={},o=t(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年2月23日18:38:06</td></tr><tr><td>V2</td><td>重构</td><td>2023年05月22日21:22:17</td></tr></tbody></table><h2 id="nioeventloop-run-方法回顾" tabindex="-1"><a class="header-anchor" href="#nioeventloop-run-方法回顾" aria-hidden="true">#</a> NioEventLoop#run 方法回顾</h2><p>在前面的文章中已经详细分析了 NioEventLoop#run 方法的处理流程，这里简单回顾下：</p><ul><li>检查是否有 I/O 事件就绪，是否有普通任务和调度任务需要执行；</li><li>处理 I/O 事件，处理普通任务和调度任务；</li><li>检查执行器 NioEventLoop 是否被关闭，如果被关闭了，需要走关闭执行器的逻辑；</li></ul><p>需要注意的是，JDK 的 NIO epoll 是有空循环 bug 的，会导致 Reactor 线程在没有任何事情可做的情况下被唤醒，导致 CPU 空转。Netty 在 NioEventLoop#run 中有处理这个空循环的问题，但是仅仅是规避这个问题，而不是解决。</p><blockquote><p>https://bugs.java.com/bugdatabase/view_bug?bug_id=6403933</p></blockquote><h2 id="netty-规避空循环-bug" tabindex="-1"><a class="header-anchor" href="#netty-规避空循环-bug" aria-hidden="true">#</a> Netty 规避空循环 bug</h2><h3 id="检查空循环-bug-的发生" tabindex="-1"><a class="header-anchor" href="#检查空循环-bug-的发生" aria-hidden="true">#</a> 检查空循环 bug 的发生</h3><p>既然要规避 NIO epoll 空循环 bug，那么就需要检查该问题是否发生。Netty 的做法是用一个变量统计出现空循环的次数，假如空循环次数到达了一个阈值的时候就认为出现了 NIO epoll 空循环的 bug。</p><p>NioEventLoop 中有一个常量 SELECTOR_AUTO_REBUILD_THRESHOLD，表示空循环的阈值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 超过指定次数就会重建 Selector，为了修复NIO的空轮询bug</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SELECTOR_AUTO_REBUILD_THRESHOLD</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个值是可以配置的，默认值是 512，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Workaround for JDK NIO bug.</span>
<span class="token comment">//</span>
<span class="token comment">// See:</span>
<span class="token comment">// - https://bugs.java.com/view_bug.do?bug_id=6427854</span>
<span class="token comment">// - https://github.com/netty/netty/issues/203</span>
<span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;sun.nio.ch.bugLevel&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> bugLevel <span class="token operator">=</span> <span class="token class-name">SystemPropertyUtil</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bugLevel <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to get/set System Property: &quot;</span> <span class="token operator">+</span> key<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> selectorAutoRebuildThreshold <span class="token operator">=</span> <span class="token class-name">SystemPropertyUtil</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;io.netty.selectorAutoRebuildThreshold&quot;</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectorAutoRebuildThreshold <span class="token operator">&lt;</span> <span class="token constant">MIN_PREMATURE_SELECTOR_RETURNS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        selectorAutoRebuildThreshold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token constant">SELECTOR_AUTO_REBUILD_THRESHOLD</span> <span class="token operator">=</span> selectorAutoRebuildThreshold<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;-Dio.netty.noKeySetOptimization: {}&quot;</span><span class="token punctuation">,</span> <span class="token constant">DISABLE_KEY_SET_OPTIMIZATION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;-Dio.netty.selectorAutoRebuildThreshold: {}&quot;</span><span class="token punctuation">,</span> <span class="token constant">SELECTOR_AUTO_REBUILD_THRESHOLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的检查 bug 发生的处理逻辑是在 NioEventLoop#run 方法中的，下面的代码省略了一些逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// epoll bug的一个特征计数变量</span>
    <span class="token keyword">int</span> selectCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            
            <span class="token comment">// ...... 省略执行 I/O 事件和任务的代码 ......</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>ranTasks <span class="token operator">||</span> strategy <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 要么有任务运行，要么有 IO 事件处理</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>selectCnt <span class="token operator">&gt;</span> <span class="token constant">MIN_PREMATURE_SELECTOR_RETURNS</span> <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Selector.select() returned prematurely {} times in a row for Selector {}.&quot;</span><span class="token punctuation">,</span>
                            selectCnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 正常流程进到这里面，NioEventLoop线程从Selector唤醒后工作，是因为有IO事件</span>
                selectCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 处理nio的bug</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unexpectedSelectorWakeup</span><span class="token punctuation">(</span>selectCnt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Unexpected wakeup (unusual case)</span>
                <span class="token comment">// 即没有任务运行，也没有IO 事件处理，就有可能是 JDK 的 epoll 的空轮询 BUG</span>
                <span class="token comment">// 调用 unexpectedSelectorWakeup(selectCnt) 方法处理。</span>
                <span class="token comment">// 可能会重新建立 Select</span>
                selectCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancelledKeyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Harmless exception - log anyway</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">CancelledKeyException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; raised by a Selector {} - JDK bug?&quot;</span><span class="token punctuation">,</span>
                        selector<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">handleLoopException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>

            <span class="token comment">// ...... 省略检查执行器关闭的代码 ......</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键点就是 selectCnt 变量，它就是 epoll bug的一个特征计数变量。关于 <code>if (ranTasks || strategy &gt; 0)</code> 这个判断，其中的 ranTasks 表示执行的普通任务和调度任务的个数，strategy 表示处理的 I/O 事件的个数。当代码执行到这里的时候，如果这两个条件都不满足的话，就说明出现了 nio epoll 空循环 bug 了，就需要调用 NioEventLoop#unexpectedSelectorWakeup 方法去处理了。</p><h3 id="规避空循环-bug-重建-selector" tabindex="-1"><a class="header-anchor" href="#规避空循环-bug-重建-selector" aria-hidden="true">#</a> 规避空循环 bug，重建 Selector</h3><p>NioEventLoop#unexpectedSelectorWakeup</p><p>关键点就是假如变量 selectCnt 的值，也就是空循环次数已经到达了阈值 512 次了，那么就会调用 NioEventLoop#rebuildSelector 方法去重建一个新的 Selector。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// returns true if selectCnt should be reset</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">unexpectedSelectorWakeup</span><span class="token punctuation">(</span><span class="token keyword">int</span> selectCnt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Thread was interrupted so reset selected keys and break so we not run into a busy loop.</span>
        <span class="token comment">// As this is most likely a bug in the handler of the user or it&#39;s client library we will</span>
        <span class="token comment">// also log it.</span>
        <span class="token comment">//</span>
        <span class="token comment">// See https://github.com/netty/netty/issues/2426</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Selector.select() returned prematurely because &quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;Thread.currentThread().interrupt() was called. Use &quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;NioEventLoop.shutdownGracefully() to shutdown the NioEventLoop.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 轮训超过默认的512次 就认为是bug状态了</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SELECTOR_AUTO_REBUILD_THRESHOLD</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
            selectCnt <span class="token operator">&gt;=</span> <span class="token constant">SELECTOR_AUTO_REBUILD_THRESHOLD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// The selector returned prematurely many times in a row.</span>
        <span class="token comment">// Rebuild the selector to work around the problem.</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Selector.select() returned prematurely {} times in a row; rebuilding Selector {}.&quot;</span><span class="token punctuation">,</span>
                selectCnt<span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">rebuildSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NioEventLoop#rebuildSelector 方法需要保证是在 EventLoop 绑定的线程中执行的，最后会调用到 NioEventLoop#rebuildSelector0 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rebuildSelector0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Selector</span> oldSelector <span class="token operator">=</span> selector<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">SelectorTuple</span> newSelectorTuple<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldSelector <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 开启新的Selector</span>
            newSelectorTuple <span class="token operator">=</span> <span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create a new Selector.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Register all channels to the new Selector.</span>
        <span class="token keyword">int</span> nChannels <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历旧的Selector上的key</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token operator">:</span> oldSelector<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> a <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>newSelectorTuple<span class="token punctuation">.</span>unwrappedSelector<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 取消旧的Selector上触发的事件</span>
                <span class="token keyword">int</span> interestOps <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 把Channel注册到新的Selector上</span>
                <span class="token class-name">SelectionKey</span> newKey <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>newSelectorTuple<span class="token punctuation">.</span>unwrappedSelector<span class="token punctuation">,</span> interestOps<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">AbstractNioChannel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// Update SelectionKey</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractNioChannel</span><span class="token punctuation">)</span> a<span class="token punctuation">)</span><span class="token punctuation">.</span>selectionKey <span class="token operator">=</span> newKey<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                nChannels <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token comment">// ...... 省略异常处理逻辑 ......</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        selector <span class="token operator">=</span> newSelectorTuple<span class="token punctuation">.</span>selector<span class="token punctuation">;</span>
        unwrappedSelector <span class="token operator">=</span> newSelectorTuple<span class="token punctuation">.</span>unwrappedSelector<span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// time to close the old selector as everything else is registered to the new one</span>
            <span class="token comment">// 关闭旧的Selector</span>
            oldSelector<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to close the old Selector.&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Migrated &quot;</span> <span class="token operator">+</span> nChannels <span class="token operator">+</span> <span class="token string">&quot; channel(s) to the new Selector.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单来说：</p><ul><li>创建一个新的 Selector；</li><li>将原来的 Selector 中注册的事件全部取消；</li><li>将可用事件重新注册到新的 Selector 并激活；</li></ul><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>JDK 的 NIO 的 bug 会导致 reactor 线程一直空循环，导致 CPU 空转，使用率上升。Netty 通过一个计数变量记录空循环的次数，当空循环的次数达到默认的 512 次（可配置）时，Netty 会重新构建一个 Selector，将旧的 Selector 上的事件都取消掉，然后注册 Channel 到新的 Selector 上，并关注对应的感兴趣的事件，旧的 Selector 关闭掉。</p><p>Netty 的处理并不是解决 JDK NIO 的空循环的 bug，而只是通过手段来规避这个 bug 导致的问题。实际开发中，我们也可以借鉴这个思路，假如某个问题无法彻底解决，或者解决这个问题投入的产出比不高时，我们可以考虑换一种思路去绕过这个问题，从而达到同样的效果。</p><p>下面是 Netty 规避这个 bug 的整体流程图：</p><img src="`+e+'" alt="规避NIO空循环bug" style="zoom:67%;">',29),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","12-线程体系-NioEventLoop规避JDK的NIO空循环bug.html.vue"]]);export{d as default};
