import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as e}from"./app-c5a35b28.js";const p="/assets/image-20230611220507734-f4518ed0.png",t={},o=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td></td></tr></tbody></table><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h2><p>以源码中的案例来看一个简单的生产者的代码，org.apache.rocketmq.example.quickstart.Producer</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ...... 省略消息发送代码 ......</span>

        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到就是创建一个 DefaultMQProducer 类，设置一些参数并启动。关键点就是 DefaultMQProducer。</p><p>DefaultMQProducer 类是应用用来投递消息的入口，开箱即用，可通过无参构造方法快速创建一个生产者。主要负责消息的发送，支持同步/异步/oneway的发送方式，这些发送方式均支持批量发送。可以通过该类提供的getter/setter方法，调整发送者的参数。</p><h2 id="defaultmqproducer-生产者类" tabindex="-1"><a class="header-anchor" href="#defaultmqproducer-生产者类" aria-hidden="true">#</a> DefaultMQProducer 生产者类</h2><h3 id="defaultmqproducer-继承关系" tabindex="-1"><a class="header-anchor" href="#defaultmqproducer-继承关系" aria-hidden="true">#</a> DefaultMQProducer 继承关系</h3><p><img src="`+p+`" alt="image-20230611220507734"></p><p>首先分析 DefaultMQProducer 继承关系，DefaultMQProducer 继承 ClientConfig 类，实现了 MQProducer 接口。</p><ul><li>ClientConfig：该类是客户端角色的公共配置类，保存了客户端向改的配置信息；</li><li>MQProducer 和 MQAdmin 提供了一些发送消息、创建主题等 API；</li></ul><p>而 DefaultMQProducer 提供的接口的功能，一般都是委托给 DefaultMQProducerImpl 实例去处理的。</p><p>对于生产者来说 DefaultMQProducerImpl 类，和该类的一个 MQClientInstance 字段是核心。</p><h3 id="defaultmqproducer-的属性" tabindex="-1"><a class="header-anchor" href="#defaultmqproducer-的属性" aria-hidden="true">#</a> DefaultMQProducer 的属性</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">DefaultMQProducerImpl</span> defaultMQProducerImpl<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InternalLogger</span> log <span class="token operator">=</span> <span class="token class-name">ClientLogger</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> retryResponseCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
        <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">TOPIC_NOT_EXIST</span><span class="token punctuation">,</span>
        <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SERVICE_NOT_AVAILABLE</span><span class="token punctuation">,</span>
        <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">,</span>
        <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">NO_PERMISSION</span><span class="token punctuation">,</span>
        <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">NO_BUYER_ID</span><span class="token punctuation">,</span>
        <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">NOT_IN_CURRENT_UNIT</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> producerGroup<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> createTopicKey <span class="token operator">=</span> <span class="token class-name">TopicValidator</span><span class="token punctuation">.</span><span class="token constant">AUTO_CREATE_TOPIC_KEY_TOPIC</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> defaultTopicQueueNums <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> sendMsgTimeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> compressMsgBodyOverHowmuch <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> retryTimesWhenSendFailed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> retryTimesWhenSendAsyncFailed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> retryAnotherBrokerWhenNotStoreOK <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> maxMessageSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 4M</span>
<span class="token keyword">private</span> <span class="token class-name">TraceDispatcher</span> traceDispatcher <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>defaultMQProducerImpl：真正处理发送消息的实例；</li><li>retryResponseCodes：需要重试的响应码；</li><li>producerGroup：生产者组。相同的分组名称表明生产者实例在概念上归属于同一分组。这对事务消息十分重要，如果原始生产者在事务之后崩溃，那么 broker 可以联系同一生产者分组的不同生产者实例来提交或回滚事务；</li><li>createTopicKey：TBW102，测试或者demo使用，生产环境下不建议打开自动创建配置。broker 写死的主题队列信息，当发送消息指定的 topic 在 nameserver 上未找到路由信息时，则使用该 TBW102 作为模板去创建主题发布信息；</li><li>defaultTopicQueueNums：默认 broker 给每个 topic 创建的队列数；</li><li>sendMsgTimeout：消息发送的超时时间 默认 3s；</li><li>compressMsgBodyOverHowmuch：压缩阈值，当 msg 的 body 超过 4k 后，使用压缩；</li><li>retryTimesWhenSendFailed：同步模式下发送失败最大重试次数默认 2 次，加上本来的 1 次，总共 3 次。这可能会导致消息重复发送，需要开发人员自行解决；</li><li>retryTimesWhenSendAsyncFailed：异步模式下发送失败最大重试次数默认 2 次，加上本来的 1 次，总共 3 次。这可能会导致消息重复发送，需要开发人员自行解决；</li><li>retryAnotherBrokerWhenNotStoreOK：消息未存储成功是否选择其他 broker 节点来进行消息重试。一般设置成 true，假如是 false，上面的消息重试也不会去发了；</li><li>maxMessageSize：最大消息限制 默认 4m，当消息体的字节数超过maxMessageSize就发送失败；</li><li>traceDispatcher：基于RPCHooK实现的消息轨迹插件。在开启消息轨迹后，该类通过 hook 的方式把消息生产者，消息存储的 broker 和消费者消费消息的信息像链路一样记录下来。在构造生产者时根据构造入参 enableMsgTrace 来决定是否创建该对象；</li></ul><h2 id="message-消息类" tabindex="-1"><a class="header-anchor" href="#message-消息类" aria-hidden="true">#</a> Message 消息类</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8445773977080406428L</span><span class="token punctuation">;</span>

    <span class="token comment">// 主题</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> topic<span class="token punctuation">;</span>
    <span class="token comment">// 消息标记</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> flag<span class="token punctuation">;</span>
    <span class="token comment">// 消息扩展属性</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">;</span>
    <span class="token comment">// 消息体</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">;</span>
    <span class="token comment">// 事务</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> transactionId<span class="token punctuation">;</span>
 
    <span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>flag 字段，在 RocketMQ 中并未直接使用。</p>`,19),c=[o];function l(i,r){return n(),a("div",null,c)}const k=s(t,[["render",l],["__file","09-生产者相关类分析.html.vue"]]);export{k as default};
