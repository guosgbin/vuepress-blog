import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-42161907.js";const e="/assets/Netty的SingleThreadEventExecutor的执行器状态-39e5686f.png",p={},o=t(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年2月18日18:34:24</td></tr><tr><td>V2</td><td>重构</td><td>2023年05月20日23:54:04</td></tr></tbody></table><h2 id="案例引入" tabindex="-1"><a class="header-anchor" href="#案例引入" aria-hidden="true">#</a> 案例引入</h2><p>前面我们已经说过 NioEventLoop 内部属性存储了一个本地 Java 线程，并且在 NioEventLoop 的生命周期内，NioEventLoop 绑定的线程不会改变。</p><p>那么 NioEventLoop 内的 Thread 属性是什么时候被赋值的呢？也就是说 NioEventLoop 怎么绑定一个线程的？这里先通过一个案例引入：</p><p>既然 NioEventLoop 是 java.util.concurrent.Executor 的实现类，那么就能够调用 execute() 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">EventLoopGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EventLoop</span> eventLoop <span class="token operator">=</span>  group<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventLoop<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你好哇......&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实 NioEventLoop 和线程绑定就是在 execute() 方法里面做的。NioEventLoop 类本身并没有实现 execute() 方法，这个方法在它的父类 SingleThreadEventExecutor 中实现的。接下来分析这个 execute() 方法。</p><h2 id="执行器的状态" tabindex="-1"><a class="header-anchor" href="#执行器的状态" aria-hidden="true">#</a> 执行器的状态</h2><p>SingleThreadEventExecutor 执行器有 5 个状态，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 执行器分为5个状态: ST_TERMINATED &gt; ST_SHUTDOWN &gt; ST_SHUTTING_DOWN &gt; ST_STARTED &gt; ST_NOT_STARTED</span>

<span class="token comment">// 表示执行器还未开始运行</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_NOT_STARTED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 表示执行器正在运行</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_STARTED</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 表示执行器开始 shutdown</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_SHUTTING_DOWN</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">// 表示执行器已经 shutdown</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_SHUTDOWN</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token comment">// 表示执行器已经 terminated</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_TERMINATED</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>ST_NOT_STARTED</strong>：SingleThreadEventExecutor 刚初始化的默认状态，此时执行器的线程还未启动；</p></li><li><p><strong>ST_STARTED</strong>：表示线程已经成功调用了 <code>startThread();</code> 方法，此时会调用子类的 run 方法，子类的 run 方法一般都是死循环，除非调用了关闭执行器的方法。此时执行器已经是开启状态了；</p></li><li><p><strong>ST_SHUTTING_DOWN</strong>：表示线程调用了关闭执行器的方法，如<code>shutdownGracefully()</code>。这个状态会将 schedule 队列里的调度任务都 cancel 掉，然后运行 taskQueue 中的所有普通任务和 shutdownHooks 关闭的钩子任务。Netty 会根据设置的静默期和超时时间来决定是否在关闭期间接收任务；（下面详细解释）</p></li><li><p><strong>ST_SHUTDOWN</strong>：ST_SHUTTING_DOWN 状态下在一段时间没有新的任务加入或者等待超时时才会切换到这个状态，（直接调用 <code>shutdown()</code> 方法也会直接切到这个状态），这个状态是不接受新的任务的；</p></li><li><p><strong>ST_TERMINATED</strong>：当执行器中的资源清理完成，任务也全部完成后就会修改成这个状态；</p></li></ul><p>关于执行器的状态转换的流程图如下：</p><img src="`+e+`" alt="Netty的SingleThreadEventExecutor的执行器状态" style="zoom:67%;"><h2 id="singlethreadeventexecutor-execute" tabindex="-1"><a class="header-anchor" href="#singlethreadeventexecutor-execute" aria-hidden="true">#</a> SingleThreadEventExecutor#execute</h2><h3 id="execute-方法入口" tabindex="-1"><a class="header-anchor" href="#execute-方法入口" aria-hidden="true">#</a> execute 方法入口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&quot;task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token punctuation">(</span>task <span class="token keyword">instanceof</span> <span class="token class-name">LazyRunnable</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wakesUpForTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重载方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token keyword">boolean</span> immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断执行当前代码的线程是否是 eventloop的线程，是则true，否则fasle</span>
    <span class="token keyword">boolean</span> inEventLoop <span class="token operator">=</span> <span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将任务添加到待执行任务队列taskQueue中</span>
    <span class="token comment">// 注意这里是可以被不同线程调用的，所以有并发冲突问题。</span>
    <span class="token comment">// 因此任务队列taskQueue 必须是一个线程安全的队列</span>
    <span class="token function">addTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inEventLoop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行当前代码的线程不是eventloop线程，需要开启线程</span>
        <span class="token comment">// 这个方法做了判断，只有当执行器状态是 ST_NOT_STARTED 才会开启执行器线程</span>
        <span class="token function">startThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果执行器状态已经 Shutdown 之后，就要拒绝任务。</span>
            <span class="token comment">// 注意这里的状态是已经 Shutdown 之后，所以不包括开始 Shutdown 的状态。</span>
            <span class="token keyword">boolean</span> reject <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 移除任务</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">removeTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    reject <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedOperationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 是否唤醒可能阻塞的执行器线程</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>addTaskWakesUp <span class="token operator">&amp;&amp;</span> immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">wakeup</span><span class="token punctuation">(</span>inEventLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单分析这个方法的流程：</p><ol><li>首先调用 addTask(task) 将任务添加到一个线程安全的队列，taskQueue，这个队列需要保证线程安全的原因是 execute() 方法可能会有多个线程来调用，默认情况用的是 LinkedBlockingQueue；</li><li>如果当前执行代码的线程不是 EventLoop 绑定的线程，那么就需要将 EventLoop 和一个线程绑定，并且启动这个线程；</li><li>一般情况下 startThread() 方法里面的实现都是一个死循环去处理，所以只有 NioEventLoop 关闭的时候才会从 startThread() 方法退出。</li><li>退出后，假如 NioEventLoop 已经是 SHUTDOWN 状态了，这时候就需要把 taskQueue 任务队列中的任务移出队列，并且拒绝后面添加的任务；</li></ol><h3 id="绑定并启动线程" tabindex="-1"><a class="header-anchor" href="#绑定并启动线程" aria-hidden="true">#</a> 绑定并启动线程</h3><p>SingleThreadEventExecutor#startThread</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token constant">ST_NOT_STARTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 假如是线程未启动状态，使用CAS设置为线程启动状态</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">ST_NOT_STARTED</span><span class="token punctuation">,</span> <span class="token constant">ST_STARTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">doStartThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">ST_STARTED</span><span class="token punctuation">,</span> <span class="token constant">ST_NOT_STARTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先是通过 CAS 修改执行器的状态，然后调用 SingleThreadEventExecutor#doStartThread 方法去真正的绑定和启动线程。</p><p>这里只展示 SingleThreadEventExecutor#doStartThread 的绑定线程和启动线程的代码，省略了关闭执行器的操作，这部分后面文章再分析。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doStartThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span> thread <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里直接调用 executor.execute 方法，</span>
    <span class="token comment">// 我们要确保该方法每次都能提供新线程，</span>
    <span class="token comment">// 否则多个执行器绑定的线程是同一个，是会有问题。</span>
    <span class="token comment">// 因为一般 SingleThreadEventExecutor.this.run() 方法都是死循环，</span>
    <span class="token comment">// 这就导致它会占用线程，导致共享线程的其他执行器，是没有办法执行任务的。</span>
    executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取当前线程，赋值给 thread，就是执行器线程</span>
            thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 调用interruptThread()中断当前任务时没有thread值时会设置interrupted标识,现在来调用interrupt方法</span>
                thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token comment">// 更新最近一次执行任务时间</span>
            <span class="token function">updateLastExecutionTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这个方法由子类实现，一般情况下，这个方法里面利用死循环，</span>
                <span class="token comment">// 来获取待执行任务队列 taskQueue 中的任务并运行。</span>
                <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected exception from an event executor: &quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                
                <span class="token comment">// ...... 省略关闭执行器的代码......</span>
                
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>thread = Thread.currentThread();</code>将新创建出来的线程赋值给了 SingleThreadEventExecutor 的 thread 属性了，这样 NioEventLoop 就和一个线程绑定了。</p><p>最终调用了这一行代码 <code>SingleThreadEventExecutor.this.run();</code>，这个一般就是子类来实现的，例如 io.netty.channel.nio.NioEventLoop#run，这个也就是我们下一篇文章要分析的内容了。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>NioEventLoop 内部持有一个 thread 属性，和一个线程绑定，在 NIoEventLoop 的生命周期中这个 thread 属性都不会改变。线程绑定成功就会启动线程，对于 NioEventLoop 来说，就是调用 NioEventLoop#run 方法，这里面是一个死循环，除非调用执行器的关闭方法。</p><p>执行器和 JDK 的线程池一样，也有多个状态，分别是 ST_TERMINATED、ST_SHUTDOWN、 ST_SHUTTING_DOWN、 ST_STARTED、 ST_NOT_STARTED。它们的含义和状态转换见上面小节的分析。</p>`,31),c=[o];function i(l,u){return s(),a("div",null,c)}const r=n(p,[["render",i],["__file","10-线程体系-NioEventLoop绑定线程.html.vue"]]);export{r as default};
