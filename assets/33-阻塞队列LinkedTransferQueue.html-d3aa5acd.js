import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as e}from"./app-2523771a.js";const p="/assets/48-LinkedTransferQueue入队出队简要流程-404a1ea0.png",t={},o=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td></td></tr></tbody></table><h2 id="linkedtransferqueue-简介" tabindex="-1"><a class="header-anchor" href="#linkedtransferqueue-简介" aria-hidden="true">#</a> LinkedTransferQueue 简介</h2><p>LinkedTransferQueue 是 JDK1.7 引入的一个支持并发的无界的阻塞队列。相对于之前的 LinkedBlockingQueue 和SynchronousQueue 有了很多改进的地方，性能也更加强大。</p><p>在 LinkedTransferQueue 源码的注释中有下面几句话：</p><ul><li>Blocking Dual Queues arrange that threads enqueuing unmatched requests block until other threads provide the match.</li><li>Dual Synchronous Queues (see Scherer, Lea, &amp; Scott http://www.cs.rochester.edu/u/scott/papers/2009_Scherer_CACM_SSQ.pdf) additionally arrange that threads enqueuing unmatched data also block.</li><li>Dual Transfer Queues support all of these modes, as dictated by callers.</li></ul><p>LinkedTransferQueue 底层是一个单链表组成的双重队列，和 SynchronousQueue 的公平模式有点类似。</p><h2 id="transferqueue-接口" tabindex="-1"><a class="header-anchor" href="#transferqueue-接口" aria-hidden="true">#</a> TransferQueue 接口</h2><p>LinkedTransferQueue 实现了 TransferQueue 接口。</p><p>这是相对于其他的阻塞队列额外提供的一些方法，接口定义如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransferQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">/*
     * 假如有消费者在等待（take 方法或者 poll(long,TimeUnit)），立刻传递元素到已经在等待的消费者
     * 假如没有消费者在等待，则返回 false，不进行入队操作，也就意味着直接丢弃尝试入队的数据
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">tryTransfer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     * 假如有消费者在等待（take 方法或者 poll(long,TimeUnit)），立刻传递元素到已经在等待的消费者
     * 假如没有消费者在等待，当前生产者需要等待直到一个消费者接收数据
     */</span>
    <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     * 假如有消费者在等待，立刻传递元素到已经在等待的消费者
     * 假如没有消费者在等待，等待指定时间后，假如还没有消费者在等待，则返回 false，不进行入队操作
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">tryTransfer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     * 返回 true 表示至少有一个消费者在等待获取元素，一般是消费者线程调用 take 或者 poll 方法
     * 这个返回值表示某个时候瞬时的状态
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">hasWaitingConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     * 获取有多少个消费者在 take 或者 poll 显示等待
     * 这是一个估计值（近似值）
     * 可能是错误估计，消费者可能已经完成获取元素或者放弃等待了。
     * 这个值可以在监控的时候有用，
     */</span>
    <span class="token keyword">int</span> <span class="token function">getWaitingConsumerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TransferQueue 接口就是扩展了 BlockingQueue 接口，提供了一些额外的方法。</p><p>主要是 tryTransfer 和 tryTransfer 方法</p><ol><li><code>tryTransfer(E)</code>：尝试传递数据到消费者，假如消费者已经在等待了（take 或者 poll(long,TimeUnit)），那么直接传递数据到消费者。否则不进行入队，直接将数据丢弃；</li><li><code>tryTransfer(E, long, TimeUnit)</code>：<code>tryTransfer(E)</code>方法的支持超时版本。</li><li><code>transfer</code>：尝试传递数据到消费者，假如消费者已经在等待数据，那么直接传递数据到消费者，否则等待直到有消费者在等待；</li><li><code>hasWaitingConsumer</code>：判断是否有消费者在等待（瞬态值）；</li><li><code>getWaitingConsumerCount</code>：获取有多少个消费者在等待数据；</li></ol><h2 id="节点对象" tabindex="-1"><a class="header-anchor" href="#节点对象" aria-hidden="true">#</a> 节点对象</h2><p>LinkedTransferQueue 是底层是基于单链表的，看一下它的节点对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token comment">// false 表示请求 Node，就是消费者啦，REQUEST</span>
    <span class="token comment">// true 表示生产者，DATA</span>
    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isData<span class="token punctuation">;</span>   <span class="token comment">// false if this is a request node</span>
    <span class="token comment">// 生产者的数据，假如是消费者那就是匹配到的数据</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Object</span> item<span class="token punctuation">;</span>   <span class="token comment">// initially non-null if isData; CASed to match</span>
    <span class="token comment">// 节点的后驱</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>
    <span class="token comment">// 不为 null 时，表示阻塞的线程</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> waiter<span class="token punctuation">;</span> <span class="token comment">// null until waiting</span>
    
    <span class="token comment">// ... 省略 ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td><code>boolean isData</code></td><td>true - 生产者 DATA<br>false - 消费者 REQUEST</td></tr><tr><td><code>Object item</code></td><td>生产者时表示等待匹配的数据</td></tr><tr><td><code>Node next</code></td><td>当前节点的后驱指针</td></tr><tr><td><code>Thread waiter</code></td><td>当节点需要阻塞时，用于存放等待的线程</td></tr></tbody></table><h2 id="属性和常量介绍" tabindex="-1"><a class="header-anchor" href="#属性和常量介绍" aria-hidden="true">#</a> 属性和常量介绍</h2><p>LinkedTransferQueue 是一个单链表，用 head 和 tail 指针指向队列的头节点和尾结点。</p><p>但是 head 和 tail 指针在实际可能并不是指向真正的头节点和尾结点，这个后面分析。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** head of the queue; null until first enqueue */</span>
<span class="token comment">// 指向队列头节点的指针，在第一次入队前是 null</span>
<span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>

<span class="token doc-comment comment">/** tail of the queue; null until first append */</span>
<span class="token comment">// 指向队列尾结点的指针，在第一次入队前是 null</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> tail<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LinkedTransferQueue 支持很多模式。</p><p>LinkedBlockingQueue 当阻塞队列中没有元素时，调用方尝试获取元素时会阻塞线程；</p><p>SynchronousQueue 需要入队节点和出队节点相匹配，假如仅有入队节点，或者仅有出队节点，此时会阻塞入队或者出队线程。</p><p>而 LinkedTransferQueue 支持这些所有模式，还有一些普通阻塞队列的模式。</p><p>为了区分这些模式，LinkedTransferQueue 里面定义了一些常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 立刻操作，不会阻塞线程</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NOW</span>   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// for untimed poll, tryTransfer</span>
<span class="token comment">// 异步，不会阻塞线程</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ASYNC</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// for offer, put, add</span>
<span class="token comment">// 同步操作，会阻塞线程</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SYNC</span>  <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// for transfer, take</span>
<span class="token comment">// 同步操作，会阻塞线程，指定超时时间</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TIMED</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// for timed poll, tryTransfer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>NOW：表示该操作不会阻塞线程，主要用在不支持超时的 poll 和 不支持超时 tryTransfer 方法；</li><li>ASYNC：表示该操作是一个异步操作，不会阻塞线程，主要在 put，offer，和 add 方法中；</li><li>SYNC：表示该操作是一个同步操作，会阻塞线程，主要在 transfer 和 take 方法中；</li><li>TIMED：表示该操作是一个支持超时的操作，只要用在支持超时的 poll 和 tryTransfer 方法中；</li></ul><p>下面是 LinkedTransferQueue 主要的一些方法的模式：</p><table><thead><tr><th>方法</th><th>入队 or 出队</th><th>模式</th></tr></thead><tbody><tr><td><code>put(E)</code></td><td>入队</td><td>ASYNC</td></tr><tr><td><code>offer(E,long,TimeUnit)</code></td><td>入队</td><td>ASYNC</td></tr><tr><td><code>offer(E)</code></td><td>入队</td><td>ASYNC</td></tr><tr><td><code>add(E)</code></td><td>入队</td><td>ASYNC</td></tr><tr><td><code>tryTransfer(E)</code></td><td>入队</td><td>NOW</td></tr><tr><td><code>transfer(E)</code></td><td>入队</td><td>SYNC</td></tr><tr><td><code>tryTransfer(E,long,TimeUnit)</code></td><td>入队</td><td>TIMED</td></tr><tr><td><code>take</code></td><td>出队</td><td>SYNC</td></tr><tr><td><code>poll(long,TimeUnit)</code></td><td>出队</td><td>TIMED</td></tr><tr><td><code>poll</code></td><td>出队</td><td>NOW</td></tr></tbody></table><h2 id="核心方法-xfer" tabindex="-1"><a class="header-anchor" href="#核心方法-xfer" aria-hidden="true">#</a> 核心方法 xfer</h2><p>所有的入队和出队方法都是调用的一个 xfer 方法，通过传入不同的入参实现。</p><p>先看下 xfer 方法的整体实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">xfer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> haveData<span class="token punctuation">,</span> <span class="token keyword">int</span> how<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>haveData <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token comment">// the node to append, if needed</span>
    retry<span class="token operator">:</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">// restart on append race</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">,</span> p <span class="token operator">=</span> h<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// find &amp; match first node</span>
            <span class="token keyword">boolean</span> isData <span class="token operator">=</span> p<span class="token punctuation">.</span>isData<span class="token punctuation">;</span>
            <span class="token class-name">Object</span> item <span class="token operator">=</span> p<span class="token punctuation">.</span>item<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">==</span> isData<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// unmatched</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isData <span class="token operator">==</span> haveData<span class="token punctuation">)</span>   <span class="token comment">// can&#39;t match</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">casItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// match</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> q <span class="token operator">=</span> p<span class="token punctuation">;</span> q <span class="token operator">!=</span> h<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Node</span> n <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment">// update by 2 unless singleton </span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span> <span class="token function">casHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> n <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> q <span class="token operator">:</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            h<span class="token punctuation">.</span><span class="token function">forgetNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>                 <span class="token comment">// advance and retry</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span>   <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
                            <span class="token punctuation">(</span>q <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isMatched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment">// unless slack &lt; 2</span>
                    <span class="token punctuation">}</span>
                    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>waiter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token class-name">LinkedTransferQueue</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token function">cast</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Node</span> n <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            p <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Use head if p offlist</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>how <span class="token operator">!=</span> <span class="token constant">NOW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// No matches available</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> haveData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Node</span> pred <span class="token operator">=</span> <span class="token function">tryAppend</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> haveData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>           <span class="token comment">// lost race vs opposite mode</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>how <span class="token operator">!=</span> <span class="token constant">ASYNC</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token function">awaitMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token punctuation">(</span>how <span class="token operator">==</span> <span class="token constant">TIMED</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> e<span class="token punctuation">;</span> <span class="token comment">// not waiting</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看上去就几十行代码，其实麻烦的不行。</p><p>先分析下入参的意义：</p><ol><li><code>E e</code>：入队的方法传的值表示要入队的数据，出队的方法传的是 null；</li><li><code>boolean haveData</code>：true 表示入队，false 表示出队；</li><li><code>int how</code>：模式，NOW，ASYNC，SYNC，TIMED；</li><li><code>long nanos</code>：假如是 TIMED 模式，这个参数表示的是线程等待的超时时间；</li></ol><p>整体逻辑都在一个自旋中，大致可以分为两部分，①从头开始遍历链表，找到一个与当前 xfer 的相匹配的节点，假如能匹配则进行匹配操作；②假如遍历完发现都不能匹配，那么就需要根据 xfer 的入参 how 来决定是否入队，是否挂起线程等待了；</p><p>下面按照步骤分析代码</p><h3 id="xfer-第一步-查找能匹配的节点并匹配" tabindex="-1"><a class="header-anchor" href="#xfer-第一步-查找能匹配的节点并匹配" aria-hidden="true">#</a> xfer 第一步：查找能匹配的节点并匹配</h3><p>先看第一步，就是遍历链表查找一个可以匹配的节点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 从 head 遍历找到一个可匹配的节点。假如没找到，说明队列中的元素都是当前 xfer 的模式，那就入队</span>
<span class="token comment">// p 是遍历链表的指针</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">,</span> p <span class="token operator">=</span> h<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// find &amp; match first node</span>
    <span class="token keyword">boolean</span> isData <span class="token operator">=</span> p<span class="token punctuation">.</span>isData<span class="token punctuation">;</span>
    <span class="token class-name">Object</span> item <span class="token operator">=</span> p<span class="token punctuation">.</span>item<span class="token punctuation">;</span>
    <span class="token comment">/*
     * item != p 表示 p 节点尚未取消，也没有匹配（或者匹配的流程还没走完），
     * 因为 p 在匹配完成或者取消后会将它的 item 指向自己
     * (item != null) == isData， 表示这个节点还未匹配
     * CASE1:这个就是判断 p 是否已经匹配了,true 表示未匹配
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">==</span> isData<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// unmatched</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isData <span class="token operator">==</span> haveData<span class="token punctuation">)</span>   <span class="token comment">// can&#39;t match</span>
            <span class="token comment">// 模式相同，无法匹配，当前操作需要去入队</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">/*
         * CAS 将 p 的 item 改为当前 xfer 的 e，交换数据
         * 如果CAS失败，那么表示匹配失败，可能是被取消了，或者被其他请求抢先匹配了
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">casItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// match</span>
            <span class="token comment">/*
             * 走到这里说明匹配成功，需要做匹配后的操作
             * 这个循环的操作是尝试查找并移除已经被匹配/取消的节点，以及更新 head 引用的指向
             * 假如队列中只有一个元素，那么就不更新 head 指针，否则每次更新 head 向后移两位
             * 只有在更新head 指针成功后才去移除已经匹配的节点，这就是&quot;松弛度&quot;
             */</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> q <span class="token operator">=</span> p<span class="token punctuation">;</span> q <span class="token operator">!=</span> h<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Node</span> n <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment">// update by 2 unless singleton</span>
                <span class="token comment">/*
                 * 假如head还是指向 h，就是说没有被别的线程修改，此时需要将 head 改为指向 q 或者 n
                 * 移除元素，三元运算是为了判断移除一个还是两个，一般是移除两个
                 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span> <span class="token function">casHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> n <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> q <span class="token operator">:</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    h<span class="token punctuation">.</span><span class="token function">forgetNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原来的 head 可以出队了</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>                 <span class="token comment">// advance and retry</span>
                <span class="token comment">/*
                 * 到这里说明上面的 head != null，或者 cas 失败了，也就是 head 指针被别的线程给改了
                 * 有可能此时h被其他请求移除了，有可能此时h和p都被其他请求帮助移除了
                 * 此时 h 指向最新的 head，q 是 head.next
                 * h == null 新的头是 null
                 * h != null &amp;&amp; q == null 说明就一个元素
                 * h != null &amp;&amp; q != null &amp;&amp; !q.isMatched() 说明 head.next 节点未匹配
                 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span>   <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
                    <span class="token punctuation">(</span>q <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isMatched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token comment">// 即如果结点数量小于2，或被匹配和取消的结点数量小于2，那么break跳出第二层内循环</span>
                    <span class="token comment">// 继续循环的条件那就是节点的数量不小于 2，至少有两个元素已经匹配了，那么需要继续循环移除元素</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment">// unless slack &lt; 2</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 走出上面的 for 循环 说明&quot;松弛度&quot;已经控制好了</span>
            <span class="token comment">// 唤醒可能阻塞的线程</span>
            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>waiter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这是所有的入队、传递、出队方法在主动匹配成功之后的共同唯一出口</span>
            <span class="token keyword">return</span> <span class="token class-name">LinkedTransferQueue</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token function">cast</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 当前节点匹配失败，遍历链表继续后移查找</span>
    <span class="token class-name">Node</span> n <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token comment">// 如果 p 已经出队则使用 head 再去遍历</span>
    p <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Use head if p offlist</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体流程可看代码的注释。</p><p>这里解释下大概的流程：</p><ol><li>首先从链表头开始遍历链表，校验链表中的元素是否已经匹配（或者正在匹配中），假如已经匹配，则继续向后查找未匹配的节点；</li><li>假如查找完整个链表还未找到未匹配的节点，那么就需要去入队了；</li><li>假如查找到当中某个节点未匹配时，且该节点的模式和当前 xfer 的模式相同，则无法匹配，需要去入队了；</li><li>假如查找到当中某个节点未匹配时，且该节点的模式和当前 xfer 的模式不相同，则尝试去匹配； <ol><li>交换节点的 item 和 xfer 入参 e 的值；</li><li>尝试修改 head 指针；</li><li>假如因为并发原因导致修改 head 指针失败，则需要保证链表的头部已匹配的节点的松弛度小于等于 2；</li><li>唤醒可能阻塞的线程，并组装返回值；</li></ol></li></ol><h3 id="xfer-第二步-未匹配成功后的操作" tabindex="-1"><a class="header-anchor" href="#xfer-第二步-未匹配成功后的操作" aria-hidden="true">#</a> xfer 第二步：未匹配成功后的操作</h3><p>假如在链表中未找到能够匹配的节点，此时就需要根据 xfer 方法的入参「模式」来做不同的处理。</p><p>模式有下面几种</p><ul><li>NOW：表示该操作不会阻塞线程，主要用在不支持超时的 poll 和 不支持超时 tryTransfer 方法；</li><li>ASYNC：表示该操作是一个异步操作，不会阻塞线程，主要在 put，offer，和 add 方法中；</li><li>SYNC：表示该操作是一个同步操作，会阻塞线程，主要在 transfer 和 take 方法中；</li><li>TIMED：表示该操作是一个支持超时的操作，只要用在支持超时的 poll 和 tryTransfer 方法中；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * 可能是队列为空，也可能是遍历完队列后还是没有可以匹配的节点，做入队操作
 * 假如是 NOW 模式则立即返回，此时数据也丢了，并没有入队，直接返回
 * 假如不是 NOW 模式则需要创建节点入队了
 */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>how <span class="token operator">!=</span> <span class="token constant">NOW</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// No matches available</span>
    <span class="token comment">// 创建一个新的 Node</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> haveData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*
     * 调用 tryAppend 方法尝试将 s 节点追加到队列尾部，返回值如下：
     * 1、null，追加失败
     * 2、s 的前驱
     * 3、this 自身，表示 s 没有前驱
     */</span>
    <span class="token class-name">Node</span> pred <span class="token operator">=</span> <span class="token function">tryAppend</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> haveData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>           <span class="token comment">// lost race vs opposite mode， 竞争失败重新自旋重试</span>
    <span class="token comment">// 到这里说明追加节点成功</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>how <span class="token operator">!=</span> <span class="token constant">ASYNC</span><span class="token punctuation">)</span> <span class="token comment">// ASYNC 模式不走下面的等待方法，直接下面 return 了</span>
        <span class="token comment">/*
         * 不是异步的情况，就要去等待了
         * 在awaitMatch方法中等待直到被后续的请求匹配或者被取消
         * 1.如果匹配成功，返回匹配的请求的 item 值；
         * 2.假如因为超时或者中断被取消等待，返回当前节点的 e（item）
         */</span>
        <span class="token keyword">return</span> <span class="token function">awaitMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token punctuation">(</span>how <span class="token operator">==</span> <span class="token constant">TIMED</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> e<span class="token punctuation">;</span> <span class="token comment">// not waiting</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这部分代码就比较好理解了</p><ol><li>假如 xfer 的模式是 NOW，那么直接 return 了；</li><li>假如 xfer 的模式不是 NOW，那么可能就是 ASYNC，SYNC，TIMED 中的一种了。此时需要创建一个 Node 节点。并调用 tryAppend 方法尝试将新建的 Node 追加到链表尾部。</li><li>追加节点成功后 <ol><li>假如当前 xfer 的模式是 ASYNC 异步，此时直接返回；</li><li>假如当前 xfer 的模式是 SYNC 或者 TIMED，则会调用 awaitMatch 方法去「自旋/yields/阻塞」；</li></ol></li></ol><p>xfer 方法的整体大概流程基本到这里就分析完了，下面分析下一些私有方法。</p><h3 id="追加节点-tryappend" tabindex="-1"><a class="header-anchor" href="#追加节点-tryappend" aria-hidden="true">#</a> 追加节点 tryAppend</h3><p>tryAppend 的作用是追加节点到链表尾部。</p><p>这个方法的实现比较复杂，就是开启一个自旋，然后处理不同的情况，这里大概说下ß流程吧：</p><ol><li>CASE1：假如 tail 指针和 head 指针都是 null，说明链表还未初始化，此时需要初始化链表，将 head 指向节点 s；</li><li>CASE2：假如 tail 指针不是 null，调用 cannotPrecede 方法判断节点 s 是否能够追加到链表尾部 <ol><li>假如不能追加，则返回 null，在调用方处理；</li><li>假如能追加，就继续向下走 CASE3；</li></ol></li><li>CASE3：前置条件是可以追加到链表尾部，这里<code>(n = p.next) != null</code>的作用是，判断 p 是不是最新的尾结点，假如不是就找到真正的尾结点，然后循环重试；</li><li>CASE4：走到这里说明已经找到真正的尾结点了，尝试 CAS 将当前节点追加到链表尾部。 <ol><li>追加成功，就走 CASE5；</li><li>追加失败，修改 p 的指向，继续自旋重试；</li></ol></li><li>CASE5：走到此处说明追加节点到链表尾部成功，这里是处理尾部的松弛度的操作，在松弛度大于等于 2 的时候更新 tail；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">tryAppend</span><span class="token punctuation">(</span><span class="token class-name">Node</span> s<span class="token punctuation">,</span> <span class="token keyword">boolean</span> haveData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 自旋，初始值 t=p=tail</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">,</span> p <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// move p to last node and append</span>
        <span class="token comment">// n保存临时后继，u保存临时tail</span>
        <span class="token class-name">Node</span> n<span class="token punctuation">,</span> u<span class="token punctuation">;</span>                        <span class="token comment">// temps for reads of next &amp; tail</span>
        <span class="token comment">// CASE1: 条件成立，说明队列尚未初始化</span>
        <span class="token comment">// 如果 p == null，那么说明 尾结点的引用是 null，或者被移除出队了，此时将 p 指针指向 head，表示从头开始查找</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将 s 设置为 head 节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casHead</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> s<span class="token punctuation">;</span>                 <span class="token comment">// initialize</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 走到这里说明 p 不是 null</span>
        <span class="token comment">// CASE2: 校验 p 节点能否作为 s 节点的前驱</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">cannotPrecede</span><span class="token punctuation">(</span>haveData<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">// 如果不能追加，那么返回null</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                  <span class="token comment">// lost race vs opposite mode</span>
        <span class="token comment">// 获取p的后继n，如果n不为null，说明此时又新追加了结点到队列，</span>
        <span class="token comment">// 或者tail不是真正的队尾，或者还没有遍历完整个队列（重头开始的情况），需要向后推进</span>
        <span class="token comment">// CASE3: 判断 p 的 next 节点是否存在</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token comment">// not last; keep traversing</span>
            p <span class="token operator">=</span> p <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> <span class="token punctuation">(</span>u <span class="token operator">=</span> tail<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> u<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token comment">// stale tail</span>
                <span class="token punctuation">(</span>p <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment">// restart if off list</span>
        <span class="token comment">// CASE4: 尝试将 p 的 next 指针由 null 改为 s，假如失败了，就 p = p.next，就是入队</span>
        <span class="token comment">/*
         * 到这里，p的后继为null，作为最后一个结点，开始追加，尝试CAS的将p的后继从null设置为s
         * 返回true表示成功，返回false表示失败
         */</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                   <span class="token comment">// re-read on CAS failure</span>
        <span class="token comment">/*如果CAS成功，那么尝试改变tail的指向*/</span>
        <span class="token comment">// CASE5: 处理松弛操作</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// update if slack now &gt;= 2</span>
               <span class="token comment">//直到：本线程CAS改变tail成功，或者tail后面的结点小于等于两个，或者tail被移除队列了</span>
                <span class="token comment">// 有两个 next，表示松弛度两个，在松弛度大于等于 2 的时候更新 tail</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tail <span class="token operator">!=</span> t <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">casTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                       <span class="token punctuation">(</span>t <span class="token operator">=</span> tail<span class="token punctuation">)</span>   <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
                       <span class="token punctuation">(</span>s <span class="token operator">=</span> t<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// advance and retry</span>
                       <span class="token punctuation">(</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">!=</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="等待方法-awaitmatch" tabindex="-1"><a class="header-anchor" href="#等待方法-awaitmatch" aria-hidden="true">#</a> 等待方法 awaitMatch</h3><p>这个方法只会在模式是 SYNC 和 TIMED 时才会调用。</p><p>内部实现就是典型的 <strong>Spins/yields/blocks</strong>。</p><p>主要就是<strong>先尝试自旋一段时间，假如自旋一段时间后还未匹配成功，就去将线程挂起了</strong>。</p><p>需要说一下的是，当线程被中断或者等待超时了，会尝试将节点的 item 指向自己，然后将节点从链表中移除（unsplice 方法）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * Spins/yields/blocks
 * 自旋/让步/阻塞 直到节点匹配到了数据，或者调用方放弃了
 *
 * @param s     等待匹配的节点
 * @param pred  s 的前驱，如果是 s 自身表示 s 没有前驱，  如果未知，则为null（null情况不会出现在任何当前调用中，但可能出现在未来的扩展中）
 * @param e     用于检查匹配的比较值
 * @param timed 是否支持超时
 * @param nanos 超时时间
 * @return
 */</span>
<span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">awaitMatch</span><span class="token punctuation">(</span><span class="token class-name">Node</span> s<span class="token punctuation">,</span> <span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> timed <span class="token operator">?</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanos <span class="token operator">:</span> <span class="token number">0L</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> w <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> spins <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// initialized after first item and cancel checks</span>
    <span class="token class-name">ThreadLocalRandom</span> randomYields <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// bound if needed</span>

    <span class="token comment">// 自旋，等待被匹配或者取消 Spins/yields/blocks</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> item <span class="token operator">=</span> s<span class="token punctuation">.</span>item<span class="token punctuation">;</span>
        <span class="token comment">// item != e，说明 item 已经和对方交换了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment">// matched</span>
            <span class="token comment">// assert item != s;</span>
            <span class="token comment">// 表示匹配完成</span>
            s<span class="token punctuation">.</span><span class="token function">forgetContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// avoid garbage</span>
            <span class="token keyword">return</span> <span class="token class-name">LinkedTransferQueue</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token function">cast</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// (被中断 || 超时) &amp;&amp; (s 的 item 指向自己)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">casItem</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// cancel</span>
            <span class="token comment">// 取消节点移除</span>
            <span class="token function">unsplice</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>spins <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment">// establish spins at/near front</span>
            <span class="token comment">// 获取自旋次数</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>spins <span class="token operator">=</span> <span class="token function">spinsFor</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> s<span class="token punctuation">.</span>isData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                randomYields <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>spins <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// spin</span>
            <span class="token comment">// 自旋次数减 1</span>
            <span class="token operator">--</span>spins<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>randomYields<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token constant">CHAINED_SPINS</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// occasionally yield</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>waiter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            s<span class="token punctuation">.</span>waiter <span class="token operator">=</span> w<span class="token punctuation">;</span>                 <span class="token comment">// request unpark then recheck</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>timed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&gt;</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                <span class="token comment">// 计时等待</span>
                <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 无限等待</span>
            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="入队出队案例图解" tabindex="-1"><a class="header-anchor" href="#入队出队案例图解" aria-hidden="true">#</a> 入队出队案例图解</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LinkedTransferQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedTransferQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;我是第1个&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;我是第2个&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;我是第3个&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;我是第4个&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+'" alt="48-LinkedTransferQueue入队出队简要流程"></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>LinkedTransferQueue 小结。</p><p>LinkedTransferQueue 是一个<strong>无界的、FIFO 的、无锁化</strong>的阻塞队列。</p><p>LinkedTransferQueue 和 SynchronousQueue 相比，</p><ul><li><strong>LinkedTransferQueue 可以存储元素，而 SynchronousQueue 是不能存储元素的；</strong></li><li><strong>LinkedTransferQueue 支持的模式比 SynchronousQueue 多。LinkedTransferQueue 支持非阻塞的 API；</strong></li></ul><p>关于 LinkedTransferQueue 的松弛度的理解，LinkedTransferQueue 在队列的头尾的松弛度为 2。</p><p>队首的松弛度表示 head 指针与第一个未匹配的节点的最大值，队尾的松弛值同理。</p><p><strong>松弛度是一个折中的设计</strong>，假如每次出队或者入队都更新头指针或者尾指针，那么可能就会增加 CAS 更新的开销；假如每次都不更新头尾指针就会增加遍历查找匹配节点的时间。</p><p>松弛度的值使用 1 - 3 范围内的非常小的常数在一系列平台上效果最好。较大的值会增加遍历链表过多的风险，而较小的值则会增加 CAS 争用和开销。</p>',76),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(t,[["render",l],["__file","33-阻塞队列LinkedTransferQueue.html.vue"]]);export{k as default};
