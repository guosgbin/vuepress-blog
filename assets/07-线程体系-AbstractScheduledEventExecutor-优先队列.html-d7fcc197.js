import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as e}from"./app-6e156c4f.js";const t="/assets/image-20230516224752554-e03c2f3b.png",p="/assets/image-20230516221643051-6767967e.png",o="/assets/image-20230516225415656-0c4297c8.png",c="/assets/ScheduledFutureTask的run方法-781cc389.png",l={},i=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年2月13日14:51:20</td></tr><tr><td>V2</td><td>重构，增加和 JDK 调度执行器的对比</td><td>2023年05月17日22:38:53</td></tr></tbody></table><h2 id="netty-调度线程池相关类" tabindex="-1"><a class="header-anchor" href="#netty-调度线程池相关类" aria-hidden="true">#</a> Netty 调度线程池相关类</h2><p>AbstractScheduledEventExecutor 是一个调度线程池，也就是一个提供延迟和周期性执行任务的线程池。可以把它和 JDK 的 ScheduledThreadPoolExecutor 关联起来看，它们的实现原理其实是一样的，都是通过一个优先队列来实现的。</p><p>AbstractScheduledEventExecutor 实现延迟和周期性执行任务，需要几个类配合使用：</p><ol><li>io.netty.util.internal.PriorityQueue 接口：<strong>优先队列</strong>，默认实现 DefaultPriorityQueue；</li><li>io.netty.util.concurrent.ScheduledFutureTask：封装的<strong>任务对象</strong>；</li><li>io.netty.util.internal.PriorityQueueNode：优先队列存的元素的类型，为优先队列的元素<strong>提供索引功能</strong>；</li></ol><h2 id="priorityqueue-接口" tabindex="-1"><a class="header-anchor" href="#priorityqueue-接口" aria-hidden="true">#</a> PriorityQueue 接口</h2><p>Netty 的 PriorityQueue 接口继承 JDK 的 Queue 接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 和 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 方法一样，只是使用了泛型
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">removeTyped</span><span class="token punctuation">(</span><span class="token class-name">T</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 和 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 方法一样，只是使用了泛型
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">containsTyped</span><span class="token punctuation">(</span><span class="token class-name">T</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     *
     * 假如优先队列中的某个元素的属性值发生改变了，就可以使用这个方法修改优先级了
     */</span>
    <span class="token keyword">void</span> <span class="token function">priorityChanged</span><span class="token punctuation">(</span><span class="token class-name">T</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 只有在确定删除的节点不会被重新插入到这个或任何其他的PriorityQueue 中，
     * 并且这个PriorityQueue 队列本身将在调用之后被垃圾回收时，才应该使用这个方法。
     */</span>
    <span class="token keyword">void</span> <span class="token function">clearIgnoringIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="priorityqueuenode-接口" tabindex="-1"><a class="header-anchor" href="#priorityqueuenode-接口" aria-hidden="true">#</a> PriorityQueueNode 接口</h2><p>优先队列使用堆来实现，堆使用数组来表示。是优先队列中的元素是 PriorityQueueNode 类型，PriorityQueueNode 接口提供了索引功能，这样就可以快速的获取指定位置的元素了。下面是 PriorityQueueNode 接口源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PriorityQueueNode</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * -1 表示节点不在队列中
     */</span>
    <span class="token keyword">int</span> <span class="token constant">INDEX_NOT_IN_QUEUE</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 返回当前节点在优先队列中的索引
     */</span>
    <span class="token keyword">int</span> <span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token class-name">DefaultPriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 设置当前节点在优先队列中的索引
     */</span>
    <span class="token keyword">void</span> <span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token class-name">DefaultPriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优先队列-defaultpriorityqueue" tabindex="-1"><a class="header-anchor" href="#优先队列-defaultpriorityqueue" aria-hidden="true">#</a> 优先队列 DefaultPriorityQueue</h2><h3 id="继承关系" tabindex="-1"><a class="header-anchor" href="#继承关系" aria-hidden="true">#</a> 继承关系</h3><img src="`+t+`" alt="image-20230516224752554" style="zoom:50%;"><h3 id="成员属性" tabindex="-1"><a class="header-anchor" href="#成员属性" aria-hidden="true">#</a> 成员属性</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PriorityQueueNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">EMPTY_ARRAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueueNode</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 使用比较器 Comparator 进行排序</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> comparator<span class="token punctuation">;</span>
<span class="token comment">// 使用数组存储堆</span>
<span class="token keyword">private</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queue<span class="token punctuation">;</span>
<span class="token comment">// 表示队列中节点的数量</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DefaultPriorityQueue 使用数组表示堆。</p><p>关于DefaultPriorityQueue 成员方法下面分析完 AbstractScheduledEventExecutor 后再分析。</p><h2 id="任务对象-scheduledfuturetask" tabindex="-1"><a class="header-anchor" href="#任务对象-scheduledfuturetask" aria-hidden="true">#</a> 任务对象 ScheduledFutureTask</h2><h3 id="scheduledfuturetask-继承关系" tabindex="-1"><a class="header-anchor" href="#scheduledfuturetask-继承关系" aria-hidden="true">#</a> ScheduledFutureTask 继承关系</h3><img src="`+p+`" alt="image-20230516221643051" style="zoom:50%;"><p>可以看到 ScheduledFutureTask 的继承关系十分复杂，主要关注下下面几个接口：</p><ul><li>java.lang.Comparable：排序接口；</li><li>java.util.concurrent.Delayed：计算剩余时间的接口；</li><li>io.netty.util.internal.PriorityQueueNode：优先队列中存放的元素对象；</li></ul><h3 id="成员属性-1" tabindex="-1"><a class="header-anchor" href="#成员属性-1" aria-hidden="true">#</a> 成员属性</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">START_TIME</span> <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常量 START_TIME 意义是：使用 Netty 程序刚开始运行时的纳秒时间作为 Netty 的基准时间，后续的延迟任务和周期性任务依赖这个时间。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// set once when added to priority queue</span>
<span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">long</span> deadlineNanos<span class="token punctuation">;</span>
<span class="token comment">/* 0 - no repeat, &gt;0 - repeat at fixed rate, &lt;0 - repeat with fixed delay */</span>
<span class="token comment">// 0 不重复</span>
<span class="token comment">// &gt; 0 以固定速率重复  周期任务</span>
<span class="token comment">// &lt; 0 以固定延迟重复  延迟任务</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> periodNanos<span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">int</span> queueIndex <span class="token operator">=</span> <span class="token constant">INDEX_NOT_IN_QUEUE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>id：当前任务的 id；</li><li>deadlineNanos：任务执行的截止时间；</li><li>periodNanos：这个变量表示当前任务的类型； <ul><li>0 表示不重复的任务；</li><li>大于 0 表示以固定速率重复 周期任务 ；</li><li>小于 0 表示以固定延迟重复 延迟任务 ；</li></ul></li><li>queueIndex：节点在优先队列中的索引。任务需要放在堆中，这是任务节点在堆中的索引 ；</li></ul><p>关于 ScheduledFutureTask 的核心成员 run 方法，在分析完 AbstractScheduledEventExecutor 后再分析；</p><h2 id="abstractscheduledeventexecutor" tabindex="-1"><a class="header-anchor" href="#abstractscheduledeventexecutor" aria-hidden="true">#</a> AbstractScheduledEventExecutor</h2><h3 id="继承关系-1" tabindex="-1"><a class="header-anchor" href="#继承关系-1" aria-hidden="true">#</a> 继承关系</h3><img src="`+o+`" alt="image-20230516225415656" style="zoom:50%;"><h3 id="成员属性-2" tabindex="-1"><a class="header-anchor" href="#成员属性-2" aria-hidden="true">#</a> 成员属性</h3><p><strong>（1）SCHEDULED_FUTURE_TASK_COMPARATOR</strong>：任务的 Comparator，根据任务的执行时间判断；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">SCHEDULED_FUTURE_TASK_COMPARATOR</span> <span class="token operator">=</span>
    <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> o1<span class="token punctuation">,</span> <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）scheduledTaskQueue</strong>：任务的优先队列；</p><p><strong>（3）nextTaskId</strong>：为优先队列中的任务提供 ID，每次自增；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 任务优先队列</span>
<span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> scheduledTaskQueue<span class="token punctuation">;</span>

<span class="token keyword">long</span> nextTaskId<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="成员方法概述" tabindex="-1"><a class="header-anchor" href="#成员方法概述" aria-hidden="true">#</a> 成员方法概述</h3><p>重要的成员方法概述：</p><ul><li>scheduledTaskQueue：获取优先队列，假如没有则创建一个默认的优先队列；</li><li>cancelScheduledTasks：取消所有的任务；</li><li>peekScheduledTask：获取优先队列的队首任务，可能返回 null；</li><li>pollScheduledTask：获取并移除优先队列的队首任务，可能返回 null；</li><li>nextScheduledTaskNano：获取优先队列的队首任务的执行时间的剩余纳秒，返回 -1 表示队列中没有任务；</li><li>nextScheduledTaskDeadlineNanos：获取优先队列的队首任务的执行时间，返回 -1 表示队列中没有任务；</li><li>schedule：发布延迟执行的任务；</li><li>scheduleAtFixedRate：发布固定周期的周期性任务；</li><li>scheduleWithFixedDelay：发布固定延迟的周期性任务；</li></ul><h3 id="scheduledtaskqueue-获取优先队列" tabindex="-1"><a class="header-anchor" href="#scheduledtaskqueue-获取优先队列" aria-hidden="true">#</a> scheduledTaskQueue：获取优先队列</h3><p>获取一个优先队列，假如没有设置，就获取一个默认的优先队列的实现 DefaultPriorityQueue，默认的比较规则。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获得任务优先队列，没有的话就创建一个默认的优先队列 DefaultPriorityQueue
 */</span>
<span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">scheduledTaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduledTaskQueue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scheduledTaskQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
            <span class="token constant">SCHEDULED_FUTURE_TASK_COMPARATOR</span><span class="token punctuation">,</span>
            <span class="token comment">// Use same initial capacity as java.util.PriorityQueue</span>
            <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> scheduledTaskQueue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发布任务相关方法" tabindex="-1"><a class="header-anchor" href="#发布任务相关方法" aria-hidden="true">#</a> 发布任务相关方法</h3><ul><li>schedule：发布延迟执行的任务；</li><li>scheduleAtFixedRate：发布固定周期的周期性任务；</li><li>scheduleWithFixedDelay：发布固定延迟的周期性任务；</li></ul><p>上面几种方法最终会调用到 AbstractScheduledEventExecutor#schedule(ScheduledFutureTask)，可以看到就是最终就是将当前封装好的 ScheduledFutureTask 对象添加到优先队列中：</p><p>scheduleFromEventLoop 方法和 execute 方法都会把 ScheduledFutureTask 对象添加到优先队列中，关于 execute 方法会在 io.netty.util.concurrent.SingleThreadEventExecutor 中具体分析（后续单独章节），这里只需要知道会添加到优先队列中即可。</p><p>判断当前线程是否是绑定的 EventLoop 线程的目的是，让所有操作都让绑定的 EventLoop 线程去处理，就不会有线程安全的问题了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前线程就是Executor的线程，那么直接将计划任务 task 添加到计划任务队列中</span>
        <span class="token function">scheduleFromEventLoop</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 当前执行的线程不是 Executor 所在的线程</span>
        <span class="token comment">// 获取计划任务的截止时间</span>
        <span class="token keyword">final</span> <span class="token keyword">long</span> deadlineNanos <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">deadlineNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// task will add itself to scheduled task queue when run if not expired</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">beforeScheduledTaskSubmitted</span><span class="token punctuation">(</span>deadlineNanos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果任务未过期，则通过 execute 方法在运行时将自己添加到计划任务队列中</span>
            <span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果任务已经过期，通过 lazyExecute 方法将在运行时从计划任务队列中删除自己</span>
            <span class="token function">lazyExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Second hook after scheduling to facilitate race-avoidance</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">afterScheduledTaskSubmitted</span><span class="token punctuation">(</span>deadlineNanos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">execute</span><span class="token punctuation">(</span><span class="token constant">WAKEUP_TASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> task<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 将这个计划任务 task 添加到计划任务优先级队列中
 */</span>
<span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">scheduleFromEventLoop</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// nextTaskId a long and so there is no chance it will overflow back to 0</span>
    <span class="token function">scheduledTaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token operator">++</span>nextTaskId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cancelscheduledtasks-取消所有任务" tabindex="-1"><a class="header-anchor" href="#cancelscheduledtasks-取消所有任务" aria-hidden="true">#</a> cancelScheduledTasks：取消所有任务</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Cancel all scheduled tasks.
 *
 * This method MUST be called only when <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.
 *
 * 取消所有任务
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">cancelScheduledTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span> <span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> scheduledTaskQueue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledTaskQueue<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>scheduledTaskQueue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">final</span> <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> scheduledTasks <span class="token operator">=</span>
            scheduledTaskQueue<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 循环遍历所有的任务并取消</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> task<span class="token operator">:</span> scheduledTasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 取消任务</span>
        task<span class="token punctuation">.</span><span class="token function">cancelWithoutRemove</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    scheduledTaskQueue<span class="token punctuation">.</span><span class="token function">clearIgnoringIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="peekscheduledtask-查看队首任务" tabindex="-1"><a class="header-anchor" href="#peekscheduledtask-查看队首任务" aria-hidden="true">#</a> peekScheduledTask：查看队首任务</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取优先级队列的头节点,即最早需要执行的计划任务，有可能是 null
 */</span>
<span class="token keyword">final</span> <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">peekScheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> scheduledTaskQueue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledTaskQueue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> scheduledTaskQueue <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> scheduledTaskQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pollscheduledtask-获取队首任务" tabindex="-1"><a class="header-anchor" href="#pollscheduledtask-获取队首任务" aria-hidden="true">#</a> pollScheduledTask：获取队首任务</h3><p>判断队首任务时间是否到达执行时间，如果到了执行时间，将任务从优先队列移除，并返回该任务给调用方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 返回已经到了截止时间的计划任务，即准备执行的 Runnable，如果没有，那么返回 null
 *
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">pollScheduledTask</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span></span>
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> <span class="token function">pollScheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">pollScheduledTask</span><span class="token punctuation">(</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Return the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Runnable</span></span><span class="token punctuation">}</span> which is ready to be executed with the given <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">nanoTime</span></span><span class="token punctuation">}</span>.
 * You should use <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> to retrieve the correct <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">nanoTime</span></span><span class="token punctuation">}</span>.
 *
 * 返回准备用给定的 nanoTime 内要执行执行的计划任务 Runnable。
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> <span class="token function">pollScheduledTask</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanoTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span> <span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 查看队首任务对象 也就是最早需要执行的任务</span>
    <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> scheduledTask <span class="token operator">=</span> <span class="token function">peekScheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 假如队首没有任务，或者队首的任务的执行时间还未到，直接返回null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduledTask <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> scheduledTask<span class="token punctuation">.</span><span class="token function">deadlineNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> nanoTime <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 移除队首的任务</span>
    scheduledTaskQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将这个计划任务的截止时间设置为 0</span>
    scheduledTask<span class="token punctuation">.</span><span class="token function">setConsumed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> scheduledTask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="队首任务相关时间" tabindex="-1"><a class="header-anchor" href="#队首任务相关时间" aria-hidden="true">#</a> 队首任务相关时间</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Return the nanoseconds until the next scheduled task is ready to be run or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token operator">-</span><span class="token number">1</span></span></span><span class="token punctuation">}</span> if no task is scheduled.
 *
 * 假如队首有任务对象，返回该任务对象的执行的剩余时间的纳秒值
 * 假如队首没有任务对象 返回-1
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">nextScheduledTaskNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查看队首任务对象</span>
    <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> scheduledTask <span class="token operator">=</span> <span class="token function">peekScheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> scheduledTask <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> scheduledTask<span class="token punctuation">.</span><span class="token function">delayNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Return the deadline (in nanoseconds) when the next scheduled task is ready to be run or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token operator">-</span><span class="token number">1</span></span></span><span class="token punctuation">}</span>
 * if no task is scheduled.
 * 获取 可调用任务 的执行截至时间
 *
 * 假如队首有任务对象，返回该任务对象的 执行时间的纳秒值
 * 假如队首没有任务对象 返回-1
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">nextScheduledTaskDeadlineNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查看堆顶任务对象</span>
    <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> scheduledTask <span class="token operator">=</span> <span class="token function">peekScheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> scheduledTask <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> scheduledTask<span class="token punctuation">.</span><span class="token function">deadlineNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="defaultpriorityqueue-的成员方法" tabindex="-1"><a class="header-anchor" href="#defaultpriorityqueue-的成员方法" aria-hidden="true">#</a> DefaultPriorityQueue 的成员方法</h2><p>在看完 AbstractScheduledEventExecutor 的成员方法后，可以发现基本上最终就是调用的 DefaultPriorityQueue 的一些成员方法。本小节分析 DefaultPriorityQueue 的成员方法，主要包括：</p><ul><li>添加元素到堆中；</li><li>弹出堆顶元素；</li><li>删除堆中某个元素；</li></ul><h3 id="添加元素到堆中" tabindex="-1"><a class="header-anchor" href="#添加元素到堆中" aria-hidden="true">#</a> 添加元素到堆中</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 添加元素到优先队列
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">T</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据索引判断，当前待添加的元素是否在队列中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">INDEX_NOT_IN_QUEUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;e.priorityQueueIndex(): &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                <span class="token string">&quot; (expected: &quot;</span> <span class="token operator">+</span> <span class="token constant">INDEX_NOT_IN_QUEUE</span> <span class="token operator">+</span> <span class="token string">&quot;) + e: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token comment">// 检查是否需要扩容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 与JDK的优先级队列策略相同，“小”时加倍，“大”时增加50%。</span>
        queue <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> queue<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                                                     <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span>
                                                     <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 计划在最后一个位置插入节点元素e，然后向上遍历树上浮，保持最小堆属性。</span>
    <span class="token function">bubbleUp</span><span class="token punctuation">(</span>size<span class="token operator">++</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 上浮节点
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bubbleUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">T</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当 k==0 时，就到了堆二叉树的根节点了，跳出循环</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父节点位置坐标, 相当于(k - 1) / 2</span>
        <span class="token keyword">int</span> iParent <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取父节点位置元素</span>
        <span class="token class-name">T</span> parent <span class="token operator">=</span> queue<span class="token punctuation">[</span>iParent<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 待添加的元素比父节点大(或等于)，说明已经找到要插入的位置了，直接跳出循环</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 前置条件待添加的元素比父节点小，就将父节点元素存放到k位置</span>
        queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">;</span>
        <span class="token comment">// 设置父节点的姓索引为k</span>
        parent<span class="token punctuation">.</span><span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 重新赋值k，寻找元素key应该插入到堆二叉树的那个节点</span>
        k <span class="token operator">=</span> iParent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 我们已经找到了节点的位置，并且仍然满足最小堆属性，因此将它放入队列中。</span>
    queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
    node<span class="token punctuation">.</span><span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程分析：</p><ul><li>首先是根据索引判断当前任务对象是否已经在优先队列中了；</li><li>检查是否需要扩容，按需扩容；</li><li>堆，向上冒泡插入节点；</li></ul><h3 id="弹出堆顶元素" tabindex="-1"><a class="header-anchor" href="#弹出堆顶元素" aria-hidden="true">#</a> 弹出堆顶元素</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 返回堆顶元素
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果队列为空，返回 null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 记录树根节点</span>
    <span class="token class-name">T</span> result <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置树根节点的索引值</span>
    result<span class="token punctuation">.</span><span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">INDEX_NOT_IN_QUEUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 得到堆最后一个节点， 并将队列节点数量 size 值减一</span>
    <span class="token class-name">T</span> last <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Make sure we don&#39;t add the last element back.</span>
        <span class="token comment">// 从树根向下遍历，保持最小堆属性。</span>
        <span class="token function">bubbleDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
     * 调用这个方法，表示当前 k 位置的节点值 node 可能比它的子节点的值大；
     * 为了保持最小堆属性，因此向下遍历树，将节点值 node 放到合适的位置
     *
     *     0
     *   1   2
     *  3 4 5
     */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bubbleDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">T</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// size 是树的最底一层， size &gt;&gt;&gt; 1 就表示最底一层节点的父节点</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> half <span class="token operator">=</span> size <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过循环，保证父节点的值不能大于子节点。</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Compare node to the children of index k.</span>
        <span class="token comment">// 左子节点, 相当于 (k * 2) + 1</span>
        <span class="token keyword">int</span> iChild <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 左节点存储的值 child</span>
        <span class="token class-name">T</span> child <span class="token operator">=</span> queue<span class="token punctuation">[</span>iChild<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">// Make sure we get the smallest child to compare against.</span>
        <span class="token comment">// 右子节点</span>
        <span class="token keyword">int</span> rightChild <span class="token operator">=</span> iChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 当右节点在队列中，且左节点大于右节点，右节点才是较小的子节点，那么进行交换</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rightChild <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> queue<span class="token punctuation">[</span>rightChild<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            child <span class="token operator">=</span> queue<span class="token punctuation">[</span>iChild <span class="token operator">=</span> rightChild<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// If the bubbleDown node is less than or equal to the smallest child then we will preserve the min-heap</span>
        <span class="token comment">// property by inserting the bubbleDown node here.</span>
        <span class="token comment">// 当 bubbleDown节点node 的值小于或者等于当前较小的子节点的值，</span>
        <span class="token comment">// 那么我们将通过在这里插入bubbleDown节点来保持最小堆属性。</span>
        <span class="token comment">// 直接 break 跳出循环</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Bubble the child up.</span>
        <span class="token comment">// 将较小值的子节点移动到父节点</span>
        queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> child<span class="token punctuation">;</span>
        <span class="token comment">// 通知这个子节点，索引位置改变了</span>
        child<span class="token punctuation">.</span><span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Move down k down the tree for the next iteration.</span>
        <span class="token comment">// 将较小值的子节点位置赋值给 k</span>
        <span class="token comment">// 即移动到树的下一层，寻找当前bubbleDown节点的位置</span>
        k <span class="token operator">=</span> iChild<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// We have found where node should live and still satisfy the min-heap property, so put it in the queue.</span>
    <span class="token comment">//我们已经找到了节点的位置，并且仍然满足最小堆属性，因此将它放入队列中。</span>
    queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
    node<span class="token punctuation">.</span><span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程分析：</p><ul><li>首先是获取堆顶节点，作为返回值；</li><li>然后将数组的最后一个元素，从堆顶向下冒泡，保持最小堆的属性；</li></ul><h3 id="从堆中移除元素" tabindex="-1"><a class="header-anchor" href="#从堆中移除元素" aria-hidden="true">#</a> 从堆中移除元素</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">T</span> node<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 只有是 PriorityQueueNode 的实例，才有可能删除</span>
        node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">removeTyped</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeTyped</span><span class="token punctuation">(</span><span class="token class-name">T</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取节点对应的索引，可以快速查找</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 队列是否包含这个节点node</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 改变这个节点的索引</span>
    node<span class="token punctuation">.</span><span class="token function">priorityQueueIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">INDEX_NOT_IN_QUEUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>size <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> size <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// If there are no node left, or this is the last node in the array just remove and return.</span>
        <span class="token comment">// 如果没有节点剩下，或者这是数组中的最后一个节点，就不涉及到树的改动了，直接删除并返回</span>
        queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Move the last element where node currently lives in the array.</span>
    <span class="token comment">// 将最后一个节点值移动到要删除节点位置i</span>
    <span class="token class-name">T</span> moved <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 最后一个节点值设置为 null</span>
    queue<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// priorityQueueIndex will be updated below in bubbleUp or bubbleDown</span>

    <span class="token comment">// Make sure the moved node still preserves the min-heap properties.</span>
    <span class="token comment">// 为了确保移动的节点仍然保留最小堆属性</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> moved<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 删除节点值node 小于 最后一个节点值 moved，</span>
        <span class="token comment">// 这就说明 moved 放到 i 位置，肯定是大于 i 的父节点的值，</span>
        <span class="token comment">// 那么从 i 向上的树是满足最小堆属性的，</span>
        <span class="token comment">// 但是从 i 向下的树，就不一定了，</span>
        <span class="token comment">// 所以需要bubbleDown(i, moved) 方法，保持最小堆属性。</span>
        <span class="token function">bubbleDown</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> moved<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 删除节点值node 大于等于 最后一个节点值 moved，</span>
        <span class="token comment">// 这就说明 moved 放到 i 位置，肯定是大于 i 的左右子节点的值，</span>
        <span class="token comment">// 那么从 i 向下的树是满足最小堆属性的，</span>
        <span class="token comment">// 但是从 i 向上的树，就不一定了，</span>
        <span class="token comment">// 所以需要 bubbleUp(i, moved) 方法，保持最小堆属性。</span>
        <span class="token function">bubbleUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> moved<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程分析：</p><ul><li>首先移除指定元素；</li><li>将数组的最后一个元素放到删除的元素的位置上，根据大小进行冒泡处理，保持最小堆的属性； <ul><li>假如最后一个元素的值 小于 已删除元素的位置，那么需要向下冒泡；</li><li>假如最后一个元素的值 大于等于 已删除元素的位置，那么需要向上冒泡；</li></ul></li></ul><h2 id="scheduledfuturetask-的-run-方法" tabindex="-1"><a class="header-anchor" href="#scheduledfuturetask-的-run-方法" aria-hidden="true">#</a> ScheduledFutureTask 的 run 方法</h2><p>io.netty.util.concurrent.ScheduledFutureTask#run 是该类的核心方法，这个就是调度线程的执行任务的方法，源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 运行任务
 *
 * periodNanos == 0，执行任务然后退出；
 * periodNanos &gt; 0代表每periodNanos时间执行一次，不考虑任务的耗时，所以下次任务的执行时间为deadlineNanos += p；
 * periodNanos &lt; 0代表每periodNanos时间执行一次，每次以当此任务结束时间为开始计时，所以下次任务的执行时间为deadlineNanos = nanoTime() - p;
 * 计算完下次任务的开始执行时间后，就将其重新加入队列，scheduledTaskQueue.add(this);
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前线程是否是 Executor 执行器的线程</span>
    <span class="token keyword">assert</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// delayNanos() &gt; 0L 表示任务截止时间还没有到</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">delayNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Not yet expired, need to add or remove from queue</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 任务已经被取消，那么就从列表中移除</span>
                <span class="token function">scheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduledTaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeTyped</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 否则将任务重新放回队列</span>
                <span class="token function">scheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduleFromEventLoop</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 走到此处前置条件 任务截止时间已经到了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>periodNanos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// periodNanos == 0 表示只是延时任务。</span>
            <span class="token comment">// 先将任务设置成不可取消</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setUncancellableInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 执行任务</span>
                <span class="token class-name">V</span> result <span class="token operator">=</span> <span class="token function">runTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 设置 PromiseTask 为成功，进行通知</span>
                <span class="token function">setSuccessInternal</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// check if is done as it may was cancelled</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 检查任务是否被取消</span>
                <span class="token comment">// 执行任务</span>
                <span class="token function">runTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断执行器是否被终止</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>periodNanos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// periodNanos &gt; 0 表示固定周期，那么下一次执行时间就是</span>
                        <span class="token comment">// 本次截止时间deadlineNanos + 周期时间 periodNanos</span>
                        <span class="token comment">// 但是这个值可能小于当前时间啊，只要任务执行时间比周期时间 periodNanos大，</span>
                        <span class="token comment">// 那么这个值就小于当前时间。就代表会立即运行</span>
                        deadlineNanos <span class="token operator">+=</span> periodNanos<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">// periodNanos &lt; 0 表示固定延时。</span>
                        <span class="token comment">// 使用当前时间 nanoTime() 加上固定延时时间(- periodNanos)</span>
                        deadlineNanos <span class="token operator">=</span> <span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> periodNanos<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 重新添加到优先队列</span>
                        <span class="token function">scheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduledTaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setFailureInternal</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在了解这个方法之前，回顾下 ScheduledFutureTask#periodNanos 属性的含义：</p><ul><li>periodNanos 等于 0，表示只是一个延迟任务；</li><li>periodNanos 大于 0，表示每 periodNanos 时间执行一次任务，不考虑任务的耗时，所以下次任务的执行时间为『当前时间加 periodNanos 』；</li><li>periodNanos 小于 0，表示每 periodNanos 时间执行一次任务，需要考虑任务的耗时，每次以当前任务结束时间为开始计时，所以下次任务的执行时间为『任务结束时间加 periodNanos 』;</li></ul><p>上图：</p><p><img src="`+c+`" alt="ScheduledFutureTask"></p><h2 id="netty-和-jdk-的调度执行器对比" tabindex="-1"><a class="header-anchor" href="#netty-和-jdk-的调度执行器对比" aria-hidden="true">#</a> Netty 和 JDK 的调度执行器对比</h2><p>Netty 的 AbstractScheduledEventExecutor 和 java.util.concurrent.ScheduledThreadPoolExecutor 的实现逻辑基本上都是一样的，<strong>都是通过优先队列来实现的</strong>。它们的区别是：<strong>Netty 的调度执行器只允许一个线程（绑定的线程）去执行任务，这也是 Netty 防止并发的手段。而 JDK 的 ScheduledThreadPoolExecutor 需要去控制并发安全，在很多方法都使用 ReentrantLock 去处理的。</strong></p><p>例如 Netty 的 ScheduledFutureTask#run 方法，必须是当前绑定的线程才能执行任务，否则不执行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前线程是否是 Executor 执行器的线程</span>
    <span class="token keyword">assert</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ......省略后续代码......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，Netty 的 AbstractScheduledEventExecutor 的增加和取消任务的方法都是需要是绑定的线程才能去操作的，例如下面的增加任务：AbstractScheduledEventExecutor#schedule(ScheduledFutureTask)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前线程就是Executor的线程，那么直接将计划任务 task 添加到计划任务队列中</span>
        <span class="token function">scheduleFromEventLoop</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 当前执行的线程不是 Executor 所在的线程</span>
        <span class="token comment">// 获取计划任务的截止时间</span>
        <span class="token keyword">final</span> <span class="token keyword">long</span> deadlineNanos <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">deadlineNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// task will add itself to scheduled task queue when run if not expired</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">beforeScheduledTaskSubmitted</span><span class="token punctuation">(</span>deadlineNanos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果任务未过期，则通过 execute 方法在运行时将自己添加到计划任务队列中</span>
            <span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果任务已经过期，通过 lazyExecute 方法将在运行时从计划任务队列中删除自己</span>
            <span class="token function">lazyExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Second hook after scheduling to facilitate race-avoidance</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">afterScheduledTaskSubmitted</span><span class="token punctuation">(</span>deadlineNanos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">execute</span><span class="token punctuation">(</span><span class="token constant">WAKEUP_TASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> task<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里要说明的是，假如是绑定的线程在增加任务，那么会直接去添加任务到优先队列。假如当前执行代码的线程不是绑定的线程，那么会调用 execute 方法去添加到队列（这里其实是另外一个线程安全的队列，在线程执行的时候会从该线程安全的队列中拉取任务，后面文章分析，这里只需要知道任务最终都是绑定的线程去执行的就行了）</p><p>而 JDK 的 ScheduledThreadPoolExecutor 大部分都是通过 ReentrantLock 加锁保证线程安全的，例如增加任务到优先队列的操作：ScheduledThreadPoolExecutor 的内部类 DelayedWorkQueue#offer(Runnable)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RunnableScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RunnableScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// ......省略堆相关处理......</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>AbstractScheduledEventExecutor 是 Netty 中实现的一个支持调度任务的执行器实现，比如延迟性任务和周期性任务。具体的实现原理是：</p><ul><li><strong>优先队列</strong>：使用最小堆，使用数组表示堆，最快要执行的任务在堆顶；</li><li>添加任务到优先队列，根据任务的执行时间做排序；</li></ul><p>关于 Netty 和 JDK 的调度执行器对比，<strong>Netty 的调度执行器 AbstractScheduledEventExecutor 绑定的线程去执行任务。而 JDK 的 ScheduledThreadPoolExecutor 需要去控制并发安全，在很多方法都使用 ReentrantLock 去处理的。</strong></p>`,94),u=[i];function d(k,r){return s(),a("div",null,u)}const b=n(l,[["render",d],["__file","07-线程体系-AbstractScheduledEventExecutor-优先队列.html.vue"]]);export{b as default};
