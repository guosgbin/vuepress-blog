import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-9568636d.js";const p={},o=t(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p><strong>一期优化背景</strong>：</p><ol><li>系统运行一段时间后，service 线程数可以达到 8000+；</li><li>大部分线程池的核心线程是 50 - 100；</li><li>服务启动时，所有线程池已创建核心线程数都为 0，所以要等全部核心线程创建完，service 才可以稳定提供服务，创建核心线程过程，可能会导致上层请求超时；</li></ol><p><strong>二期优化背景：</strong></p><p>之前在使用线程池时发现随着业务的迭代调整，<strong>有些业务的请求量下降，有些业务的请求量上升</strong>，还有一些旧的业务不再使用，导致现有现有部分线程池资源分配不合理，需要对线程池资源重新分配。</p><h2 id="优化目标" tabindex="-1"><a class="header-anchor" href="#优化目标" aria-hidden="true">#</a> 优化目标</h2><ul><li>较少业务调用超时；</li><li>让线程池当前的参数匹配当前的业务请求量；</li></ul><h2 id="问题分析思路-过程" tabindex="-1"><a class="header-anchor" href="#问题分析思路-过程" aria-hidden="true">#</a> 问题分析思路/过程</h2><p><strong>一期优化方向：</strong></p><ul><li>服务启动时，自动创建线程池所有核心线程；</li><li>优化线程池的数据的日志输出打印；</li><li>让运维采集数据，将所有线程池，全部加入到监控中，后续将日志在监控 grafana 中展示；</li></ul><blockquote><p>注：for 循环查询，要适当增加线程池核心线程大小。瞬间请求量较大</p></blockquote><p><strong>二期优化方向</strong>：</p><ul><li>根据线程池的统计日志分析各个线程池的各个指标，判断是否需要对参数进行调整；</li><li>针对业务：<strong>是否需要对同类型的业务按照优先级分为多个不同参数的线程池去执行；</strong></li></ul><h2 id="方案设计" tabindex="-1"><a class="header-anchor" href="#方案设计" aria-hidden="true">#</a> 方案设计</h2><h3 id="threadpoolexecutor-统计相关的-api" tabindex="-1"><a class="header-anchor" href="#threadpoolexecutor-统计相关的-api" aria-hidden="true">#</a> ThreadPoolExecutor 统计相关的 API</h3><p>关于 ThreadPoolExecutor 线程池统计相关的 API：</p><ul><li>getPoolSize()：获取线程池中<strong>工作的线程的个数</strong>；</li><li>getActiveCount()：获取线程池中<strong>活跃线程数</strong>；（近似值，执行任务加锁的原因）</li><li>getLargestPoolSize()：获取线程池的<strong>历史最大的线程个数</strong>；</li><li>getCorePoolSize()：获取<strong>核心线程数</strong>；</li><li>getMaximumPoolSize()：获取<strong>允许的最大的线程数</strong>；</li><li>getQueue().size()：获取线程池<strong>堆积的任务个数</strong>；</li><li>getTaskCount()：获取<strong>总任务数</strong>；（近似值，已执行的任务数 + 阻塞队列中的任务个数）</li><li>getCompletedTaskCount()：<strong>已执行任务数</strong>；（近似值，因为累加只会在线程退出时才累加）</li></ul><p>对于<strong>任务堆积数</strong>：</p><ul><li>对于线程池来说就是阻塞队列中实时长度；</li><li>实际使用中的意义： <ol><li>如果任务堆积长度不为 0 , 说明线程池的核心线程全部在执行任务中，且任务已经出现堆积；</li><li>如果任务堆积长度不长有可能是瞬时请求量增加，如果长度过长说明需要考虑是否进行优化了；</li></ol></li><li>优化思路： <ol><li>时延要求高的线程和定时任务线程执行要求不一样，前者要求实时执行任务应减少堆积。定时任务线程实时行要求不高可以有一定堆积。如果是时延要求高的线程任务堆积不能太长， 如果是定时任务任务可以堆积；</li><li>如果全天只有一段时间长度长需要增加最大线程数量；</li><li>如果很长时间都有堆积核心线程数和最大线程数都需要调整；</li></ol></li></ul><p>对于<strong>完成任务数</strong>：</p><ul><li>当前存活的所有线程执行过的任务数量；</li><li>已销毁线程执行过的任务数量；</li></ul><p>对于<strong>总任务数</strong>：</p><ul><li>所有线程执行过的任务数</li><li>已销毁线程执行过的任务数</li><li>执行执行的任务</li><li>队列长度</li></ul><p>对于<strong>活跃线程数</strong>：正在执行任务的线程数</p><p>对于<strong>历史最大的线程个数</strong>：统计线程池阶段最大的线程数量；</p><ul><li>如果线程池需要缩减核心线程数，历史最大活跃线程可以作为参考值；</li></ul><h3 id="具体统计的代码实现" tabindex="-1"><a class="header-anchor" href="#具体统计的代码实现" aria-hidden="true">#</a> 具体统计的代码实现</h3><p>所有线程池使用统一的入口注册到日志打印类 StatLog.class 中；</p><p>例如在具体使用线程的地方这样定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutorTraceId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token class-name">StatLog</span><span class="token punctuation">.</span><span class="token function">registerExecutor</span><span class="token punctuation">(</span><span class="token string">&quot;xxx_pool_name&quot;</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 registerExecutor 方法将线程池注册到 StatLog 类内部的 Map；</p><p>StatLog 类的核心打印逻辑，日志是每 10 秒打印一次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">statExecutor</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">,</span> <span class="token keyword">long</span> time2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 队列任务堆积</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 完成任务数</span>
    <span class="token keyword">long</span> completedTaskCount <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getCompletedTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 总任务数</span>
    <span class="token keyword">long</span> taskCount <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 活跃线程数</span>
    <span class="token keyword">int</span> activeCount <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 历史最大线程数</span>
    <span class="token keyword">int</span> largestPoolSize <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getLargestPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 核心线程数</span>
    <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录每个线程池，最大活跃线程数</span>
    <span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token constant">MAX_ACTIVE_COUNT</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token constant">MAX_ACTIVE_COUNT</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> activeCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token constant">MAX_ACTIVE_COUNT</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>integer<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>activeCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token class-name">StringBuilder</span> strBuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    strBuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>completedTaskCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>taskCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>activeCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;}\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>largestPoolSize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> errorBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        errorBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;队列任务堆积：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;完成任务数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>completedTaskCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;总任务数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>taskCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;活跃线程数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>activeCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;历史最大活跃线程数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">MAX_ACTIVE_COUNT</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;历史最大线程数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>largestPoolSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;核心线程数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;}\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errorBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> strBuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优化案例" tabindex="-1"><a class="header-anchor" href="#优化案例" aria-hidden="true">#</a> 优化案例：</h3><p>线程池 1：</p><ul><li>优化前参数：core : 20 max : 20 queue : 50 alive : 2m</li><li>优化后参数：core : 2 max : 10 queue : 500 alive : 1m</li><li>优化方式：减少核心线程数；</li><li>优化原因：没有任务，看代码大部分代码已经注释掉了， 或者没有调用；</li></ul><p>线程池 2：</p><ul><li>优化前参数：core : 100 max : 1000 queue : 1000 alive : 0.1 s</li><li>优化后参数： core : 10 max : 100 queue : 2000 alive : 2m</li><li>优化方式：减少核心线程数</li><li>优化原因：任务不多，线程存活时间太短</li></ul><p>线程池 3：</p><ul><li>优化前参数： core : 20 max : 500 queue : 1000 alive : 10m</li><li>优化后参数： core : 5 max : 100 queue : 1000 alive : 2m</li><li>优化方式：减少核心线程数；</li><li>优化原因：任务不多，减少核心线程；提高线程利用率；降低线程存活时间；</li></ul><p>线程池 4：</p><ul><li>优化前参数：core : 20 max : 500 queue : 2000 alive : 10m</li><li>优化后参数： core : 50 max : 500 queue : 2000 alive : 10m</li><li>优化方式：增加核心线程数；</li><li>优化原因：任务堆积情况多，且历史最大线程数比较大；</li></ul><h2 id="效果分析" tabindex="-1"><a class="header-anchor" href="#效果分析" aria-hidden="true">#</a> 效果分析</h2><ul><li>接口成功率没有明显的提升（接口超时导致部分接口调用失败），线程池的任务丢弃数变少了；</li><li>服务器 CPU 使用率也没有明显的变化；</li></ul><h2 id="优化总结" tabindex="-1"><a class="header-anchor" href="#优化总结" aria-hidden="true">#</a> 优化总结</h2><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ol><li>监控线程池历史最大的线程数：通过这个可以作为是否增大核心线程的一个指标；</li><li>阻塞队列是否有任务堆积？如果有说明已经到达线程池的最大处理能力，还有任务提交，如果任务比较重要，需要考虑增大线程数；</li><li>对于完成任务数较少的那些线程池，可以考虑减少线程数；</li></ol><h3 id="线程池线程设置的依据" tabindex="-1"><a class="header-anchor" href="#线程池线程设置的依据" aria-hidden="true">#</a> 线程池线程设置的依据</h3><p>首先是核心线程数和最大线程池数，我们需要考虑任务的性质，分为 CPU 密集型任务和 IO 密集型任务。</p><p>① CPU 密集型任务：（<strong>视频进行高清解码、转码，文件压缩解压缩</strong>）</p><ul><li>也叫计算密集型，系统中大部份时间用来做计算、逻辑判断等，比如对<strong>视频进行高清解码、转码，文件压缩解压缩</strong>等，一般而言 CPU 占用率相当高。多线程跑的时候，可以充分利用起所有的 CPU 核心。但是如果线程远远超出 CPU 核心数量反而会使得任务效率下降，因为频繁的切换线程也是要消耗时间的。</li><li>CPU 密集型任务：核心线程数参考值可以设置为 NCPU + 1；</li></ul><p>② IO 密集型任务：（<strong>文件读写、DB读写、网络请求</strong>）</p><ul><li>指任务需要执行大量的 IO 操作，涉及到<strong>网络 IO、磁盘 IO 操作</strong>。当线程因为 IO 阻塞而进入阻塞状态后，该线程的调度被操作系统内核立即停止，不再占用 CPU 时间片段，而其他 IO 线程能立即被操作系统内核调度，等 IO 阻塞操作完成后，原来阻塞状态的线程重新变成就绪状态，而可以被操作系统调度。这类<strong>任务的特点是 CPU 消耗很少，任务的大部分时间都在等待 IO 操作完成</strong>（因为 IO 的速度远远低于 CPU 和内存的速度）。对于 IO 密集型任务，任务越多， CPU 效率越高，但也有一个限度。常见的大部分任务都是 IO 密集型任务；</li><li>IO 密集型任务：核心线程数参考值可以设置为 2 * NCPU；</li></ul><blockquote><p>上面的经验归经验，最终的数据大小需要通过压测来验证，比如预估多少流量的请求，多大的线程数参数和队里长度才能抗住</p></blockquote>`,54),e=[o];function c(u,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","项目-线程池优化.html.vue"]]);export{r as default};
