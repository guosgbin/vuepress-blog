import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-0262c20c.js";const t="/assets/image-20230519101858945-b023fd72.png",p={},o=e('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年2月23日18:38:06</td></tr><tr><td>V2</td><td>重构</td><td>2023年05月19日11:57:59</td></tr></tbody></table><h2 id="nioeventloop-的继承体系" tabindex="-1"><a class="header-anchor" href="#nioeventloop-的继承体系" aria-hidden="true">#</a> NioEventLoop 的继承体系</h2><img src="'+t+`" alt="image-20230519101858945" style="zoom:50%;"><p>在前面的下节中，我们已经分析了 NioEventLoop 的相关父接口，和两个抽象父类 AbstractEventExecutor 和 AbstractScheduledEventExecutor，不了解它们的作用可以看我之前的文章。 还有两个抽象父类没有分析，SingleThreadEventExecutor 和 SingleThreadEventLoop，它们之间的关系比较紧密，所以就不会单独分析这两个类，后面会在一起分析。</p><h2 id="nioeventloop-的概述" tabindex="-1"><a class="header-anchor" href="#nioeventloop-的概述" aria-hidden="true">#</a> NioEventLoop 的概述</h2><p>NioEventLoop 继承自 SingleThreadEventLoop，而 SingleThreadEventLoop 继承自 SingleThreadEventExecutor。其中 SingleThreadEventExecutor 是 Netty 对本地线程的抽象，<strong>内部持有一个 Thread 属性，实际上就是一个本地 Java 线程。所以我们可以简单认为一个 NioEventLoop 对象就是和一个特定的线程绑定，在 NioEventLoop 的生命周期内，其绑定的线程都不会再改变。</strong></p><p>每个 NioEventLoop 和 NIO 中的多路复用器 Selector 一样，要管理很多链路，所有链路的读写事件都由它来发起。NioEventLoop 有下面几个核心功能：</p><ul><li><strong>开启 Selector 并初始化；</strong></li><li><strong>将 ServerSocketChannel 注册到 Selector 上；</strong></li><li><strong>作为 IO 线程，执行与 Channel 相关的处理各种 IO 事件，如 OP_ACCEPT、OP_CONNECT、OP_READ、OP_WRITE 事件；</strong></li><li><strong>作为任务队列，执行 taskQueue 中的普通任务和调度任务；</strong></li><li><strong>处理 JDK 空轮询 bug；</strong></li></ul><p>NioEventLoop 类本身的源码很少，基本上都是调用父类或者其他类的 API 来实现功能的。</p><h2 id="nioeventloop-实例化" tabindex="-1"><a class="header-anchor" href="#nioeventloop-实例化" aria-hidden="true">#</a> NioEventLoop 实例化</h2><h3 id="实例化入口" tabindex="-1"><a class="header-anchor" href="#实例化入口" aria-hidden="true">#</a> 实例化入口</h3><p>NioEventLoop 是由 NioEventLoopGroup 管理的，前面在分析 NioEventLoopGroup 的时候已经知道 NioEventLoop 的实例化是在 NioEventLoopGroup#newChild 方法中的，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">EventLoop</span> <span class="token function">newChild</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取可变参数的数据</span>
    <span class="token class-name">SelectorProvider</span> selectorProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SelectorProvider</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">SelectStrategyFactory</span> selectStrategyFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SelectStrategyFactory</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionHandler</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">EventLoopTaskQueueFactory</span> taskQueueFactory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">EventLoopTaskQueueFactory</span> tailTaskQueueFactory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> argsLength <span class="token operator">=</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argsLength <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        taskQueueFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EventLoopTaskQueueFactory</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argsLength <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tailTaskQueueFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EventLoopTaskQueueFactory</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 参数一：当前NioEventLoopGroup</span>
    <span class="token comment">// 参数二：ThreadPerTaskExecutor</span>
    <span class="token comment">// 参数三：selectorProvider，选择器提供器</span>
    <span class="token comment">// 参数四：选择器工作策略 DefaultSelectStrategy  再NIoEventLoop的run()方法中用于控制选择循环</span>
    <span class="token comment">// 参数五：线程池拒绝策略</span>
    <span class="token comment">// 参数六和七：一般正常情况下是null，除非argsLength &gt; 3，或者argsLength &gt; 4</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoop</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> executor<span class="token punctuation">,</span> selectorProvider<span class="token punctuation">,</span>
                            selectStrategyFactory<span class="token punctuation">.</span><span class="token function">newSelectStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            rejectedExecutionHandler<span class="token punctuation">,</span> taskQueueFactory<span class="token punctuation">,</span> tailTaskQueueFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nioeventloop-构造方法" tabindex="-1"><a class="header-anchor" href="#nioeventloop-构造方法" aria-hidden="true">#</a> NioEventLoop 构造方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">NioEventLoop</span><span class="token punctuation">(</span><span class="token class-name">NioEventLoopGroup</span> parent<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">SelectorProvider</span> selectorProvider<span class="token punctuation">,</span>
             <span class="token class-name">SelectStrategy</span> strategy<span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler<span class="token punctuation">,</span>
             <span class="token class-name">EventLoopTaskQueueFactory</span> taskQueueFactory<span class="token punctuation">,</span> <span class="token class-name">EventLoopTaskQueueFactory</span> tailTaskQueueFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 参数一：当前NioEventLoop所属的NioEventLoopGroup</span>
    <span class="token comment">// 参数二：ThreadPerTaskExecutor, 是在Group中创建的</span>
    <span class="token comment">// 参数三：</span>
    <span class="token comment">// 参数四：最终返回的是一个队列，最大程度是Integer.MAX_VALUE，最小是16</span>
    <span class="token comment">// 参数五：大部分用不到这个queue</span>
    <span class="token comment">// 参数六：线程池拒绝策略</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">newTaskQueue</span><span class="token punctuation">(</span>taskQueueFactory<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">newTaskQueue</span><span class="token punctuation">(</span>tailTaskQueueFactory<span class="token punctuation">)</span><span class="token punctuation">,</span>
            rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>provider <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>selectorProvider<span class="token punctuation">,</span> <span class="token string">&quot;selectorProvider&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>selectStrategy <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>strategy<span class="token punctuation">,</span> <span class="token string">&quot;selectStrategy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建包装后的Selector和未包装的Selector实例</span>
    <span class="token comment">// 也就是每个NioEventLoop都持有有一个Selector实例</span>
    <span class="token keyword">final</span> <span class="token class-name">SelectorTuple</span> selectorTuple <span class="token operator">=</span> <span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> selectorTuple<span class="token punctuation">.</span>selector<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>unwrappedSelector <span class="token operator">=</span> selectorTuple<span class="token punctuation">.</span>unwrappedSelector<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>super 调用父类的构造方法下小节分析，这里先分析 NioEventLoop 构造方法的入参：</p><ul><li>入参的 NioEventLoopGroup parent：就是当前 NioEventLoop 所属的 NioEventLoopGroup 对象；</li><li>入参 Executor executor：默认传进来的是 ThreadPerTaskExecutor 对象，这个执行器其实就是每个任务创建一个新的线程去处理；</li><li>入参 SelectorProvider selectorProvider：默认情况是 SelectorProvider.provider() 返回的实例，用于获取多路复用器 Selector 的；</li><li>入参 SelectStrategy strategy：默认情况是一个 DefaultSelectStrategyFactory 对象；</li><li>入参 RejectedExecutionHandler：任务拒绝策略；</li><li>最后两个参数是工厂类对象，用于创建对应的队列。一般情况下这两个对象都是 null；</li></ul><p>其实 NioEventLoop 构造方法做的事情很简单，就是先调用父类的构造方法初始化父类，然后将传入的参数赋值给自己的属性。</p><p>其中关于获取多路复用器 Selector 后面单独一篇文章分析，这里先待过。</p><h3 id="父类-singlethreadeventloop-构造方法" tabindex="-1"><a class="header-anchor" href="#父类-singlethreadeventloop-构造方法" aria-hidden="true">#</a> 父类 SingleThreadEventLoop 构造方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">SingleThreadEventLoop</span><span class="token punctuation">(</span><span class="token class-name">EventLoopGroup</span> parent<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">,</span>
                                <span class="token keyword">boolean</span> addTaskWakesUp<span class="token punctuation">,</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> taskQueue<span class="token punctuation">,</span>
                                <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> tailTaskQueue<span class="token punctuation">,</span>
                                <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> addTaskWakesUp<span class="token punctuation">,</span> taskQueue<span class="token punctuation">,</span> rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tailTasks <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>tailTaskQueue<span class="token punctuation">,</span> <span class="token string">&quot;tailTaskQueue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个构造方法自己做的事情就是将在 NioEventLoop 构造方法中创建的 tailTaskQueue 赋值给自己的属性。</p><h3 id="父类-singlethreadeventexecutor-构造方法" tabindex="-1"><a class="header-anchor" href="#父类-singlethreadeventexecutor-构造方法" aria-hidden="true">#</a> 父类 SingleThreadEventExecutor 构造方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">(</span><span class="token class-name">EventExecutorGroup</span> parent<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">,</span>
                                    <span class="token keyword">boolean</span> addTaskWakesUp<span class="token punctuation">,</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> taskQueue<span class="token punctuation">,</span>
                                    <span class="token class-name">RejectedExecutionHandler</span> rejectedHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>addTaskWakesUp <span class="token operator">=</span> addTaskWakesUp<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>maxPendingTasks <span class="token operator">=</span> <span class="token constant">DEFAULT_MAX_PENDING_EXECUTOR_TASKS</span><span class="token punctuation">;</span>
    <span class="token comment">// 封装一下 Executor</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> <span class="token class-name">ThreadExecutorMap</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>taskQueue <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>taskQueue<span class="token punctuation">,</span> <span class="token string">&quot;taskQueue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedExecutionHandler <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>rejectedHandler<span class="token punctuation">,</span> <span class="token string">&quot;rejectedHandler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里也是字段赋值，没什么好说的。仅仅需要注意的是封装了一下 Executor 对象。默认情况下这里传进来的 Executor 参数是 ThreadPerTaskExecutor 对象，这个执行器作用是每个任务创建一个新的线程去执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> <span class="token class-name">ThreadExecutorMap</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里对 ThreadPerTaskExecutor 对象使用 ThreadExecutorMap#apply(Executor, EventExecutor) 封装了一下，源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">FastThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventExecutor</span><span class="token punctuation">&gt;</span></span> mappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventExecutor</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Executor</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">EventExecutor</span> eventExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> <span class="token string">&quot;executor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>eventExecutor<span class="token punctuation">,</span> <span class="token string">&quot;eventExecutor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token function">apply</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> eventExecutor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runnable</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Runnable</span> command<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">EventExecutor</span> eventExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token string">&quot;command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>eventExecutor<span class="token punctuation">,</span> <span class="token string">&quot;eventExecutor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setCurrentEventExecutor</span><span class="token punctuation">(</span>eventExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                command<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token function">setCurrentEventExecutor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setCurrentEventExecutor</span><span class="token punctuation">(</span><span class="token class-name">EventExecutor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mappings<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很简单，封装 Executor 的作用是：每次执行任务的时候，会将当前 NioEventLoop 保存到一个 ThreadLocal 中了，这样就可以获取当前线程绑定的 EventLoop 了。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本篇分析了 NioEventLoop 的继承体系和实例化过程（其中开启 Selector 未详细分析），后面文章会按照 NioEventLoop 的核心功能依次分析：</p><ul><li><strong>开启 Selector 并初始化；</strong></li><li><strong>将 ServerSocketChannel 注册到 Selector 上；</strong></li><li><strong>作为 IO 线程，执行与 Channel 相关的处理各种 IO 事件，如 OP_ACCEPT、OP_CONNECT、OP_READ、OP_WRITE 事件；</strong></li><li><strong>作为任务队列，执行 taskQueue 中的普通任务和调度任务；</strong></li><li><strong>处理 JDK 空轮询 bug；</strong></li></ul>`,32),c=[o];function l(u,i){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","08-线程体系-NioEventLoop概述.html.vue"]]);export{d as default};
