import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-ad2dff0a.js";const t="/assets/v2-159dbcb23a8129ee40c0c17c59c383f9_720w-b8ec3b39.webp",p="/assets/format_png-7a867941.png",i="/assets/format_png-20230724213231333-f434c1f0.png",l="/assets/image-20230721210304692-9944586-cb95d26b.png",o="/assets/image-20230721210829367-9944910-6a21d812.png",c="/assets/image-20230721210842645-9944923-c6737229.png",u="/assets/JDK的SPI流程分析-0384eb86.png",r="/assets/image-20230711191248797-9073970-f5cdb652.png",d="/assets/p106170-64063038.png",k="/assets/IM系统架构图-84a3b4f4.png",v={},m=e('<h2 id="skill" tabindex="-1"><a class="header-anchor" href="#skill" aria-hidden="true">#</a> skill</h2><h3 id="编解码" tabindex="-1"><a class="header-anchor" href="#编解码" aria-hidden="true">#</a> 编解码</h3><h4 id="base-64" tabindex="-1"><a class="header-anchor" href="#base-64" aria-hidden="true">#</a> <strong>Base 64</strong></h4><p>有些网络传输渠道并不支持不可打印的字符，例如传统的邮件只支持可见字符的传送，像ASCII码的控制字符就 不能通过邮件传送。这样用途就受到了很大的限制，比如图片二进制流的每个字节不可能全部是可见字符，所以就传送不了。</p><p><strong>基于64个可打印字符来表示二进制数据的办法。</strong></p><p>Base64的码表只有64个字符， 如果要表达64个字符的话，使用6的bit即可完全表示(2的6次方为64)。因为Base64的编码只有6个bit即可表示，而正常的字符是使用8个bit表示， 8和6的最小公倍数是24，所以4个Base64字符可以表示3个标准的ascll字符。</p><p>将字符串转换为base64时，会先把字符串转换为对应的 ascll 码，然后从左往右6位截取（6位对应一位base64码），若最后不足6位（一个base64码）补0，不足3个字符串则补=（解码时会自动去掉）</p><p><img src="'+t+'" alt="img"></p><p>由于=字符也可能出现在Base64编码中，但=用在URL、Cookie里面会造成歧义，所以，很多Base64编码后会把=去掉。因为base64码的位数永远是4的倍数，所以解码时若位数不足可以在末尾补=。</p><p>将图片转换成Base64的编码方式是因为可以将图片直接嵌入到网页中，而不是从外部载入，这样就减少了HTTP请求。</p><h4 id="base62" tabindex="-1"><a class="header-anchor" href="#base62" aria-hidden="true">#</a> <strong>base62</strong></h4><p>其实就是 26个小写字母+26个大写字母+10个数字=62，然后对一个数做 62进制与十进制的映射。</p><p><strong>短链的设计</strong>：主要思路，维护一个全局自增的 id，每来一个长 url，将其与一个自增 id 绑定，然后利用 base62 将该自增 id 转换为 base62 字符串，即完成转换。</p><p><strong>我们 IM 项目用这个 base62 主要是用来做认证的 token 的设计</strong>，比如 uid + appId + clientId 等..，每一个做 base62 的转换</p><h3 id="netty-相关-网络相关" tabindex="-1"><a class="header-anchor" href="#netty-相关-网络相关" aria-hidden="true">#</a> Netty 相关，网络相关</h3><h4 id="tcp-三次握手" tabindex="-1"><a class="header-anchor" href="#tcp-三次握手" aria-hidden="true">#</a> TCP 三次握手</h4><blockquote><p>https://blog.csdn.net/qzcsu/article/details/72861891 看这个</p></blockquote><p>TCP（Transmission Control Protocol）是一种常用的传输层协议，用于在网络中可靠地传输数据。在建立和终止TCP连接时，使用了三次握手和四次挥手的过程。</p><p><img src="'+p+'" alt="format,png"></p><blockquote><p><strong>最开始的时候客户端和服务器都是处于CLOSED状态。主动打开连接的为客户端，被动打开连接的是服务器。</strong></p></blockquote><ol><li>TCP 服务器进程先创建传输控制块 TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了 LISTEN（监听）状态；</li><li>TCP 客户进程也是先创建传输控制块 TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位 SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号；表示请求建立连接；</li><li>TCP 服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP 服务器进程进入了 SYN-RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗一个序号；</li><li>TCP 客户进程收到确认后，还要向服务器给出确认，。确认报文的 ACK=1，ack=y+1，自己的序列号 seq=x+1，此时，TCP 连接建立，客户端进入 ESTABLISHED（已建立连接）状态。TCP 规定，ACK 报文段可以携带数据，但是如果不携带数据则不消耗序号；</li><li>当服务器收到客户端的确认后也进入 ESTABLISHED 状态，此后双方就可以开始通信了；</li></ol><blockquote><p>为什么TCP客户端最后还要发送一次确认呢？</p><p>一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p><p>如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</p><p>如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。</p></blockquote><h4 id="tcp-四次挥手" tabindex="-1"><a class="header-anchor" href="#tcp-四次挥手" aria-hidden="true">#</a> TCP 四次挥手</h4><blockquote><p>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于 ESTABLISHED 状态，然后客户端主动关闭，服务器被动关闭。</p></blockquote><p>四次挥手（Four-Way Handshake）是在客户端和服务器之间终止TCP连接时使用的过程。它的步骤如下：</p><p><img src="'+i+'" alt="四次挥手"></p><ol><li>第一步（FIN）：当客户端想要关闭连接时，发送一个带有 FIN（结束）标志的 TCP 报文段给服务器。客户端不再发送数据，但仍然可以接收数据。报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态；</li><li>第二步（ACK）：服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</li><li>第三步：客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</li><li>第四步：服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li><li>第五步（ACK）：客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2 × MSL（最长报文段寿命）的时间后，当客户端撤销相应的 TCB 后，才进入CLOSED状态。</li><li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</li></ol><blockquote><p><strong>为什么客户端最后还要等待2MSL？</strong></p><p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。</p><p>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p><p>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p></blockquote><blockquote><p><strong>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</strong></p><p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p></blockquote><blockquote><p><strong>如果已经建立了连接，但是客户端突然出现故障了怎么办？</strong></p><p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p></blockquote><h4 id="什么是黏包和半包" tabindex="-1"><a class="header-anchor" href="#什么是黏包和半包" aria-hidden="true">#</a> 什么是黏包和半包？</h4><p>概念：</p><ul><li>一次性接收多条消息的现象称为黏包；</li><li>分好几次接收不完整的消息的现象称为半包；</li></ul><p>产生原因：</p><ul><li>**产生黏包主要是因为每次写入的数据比较少，比如远远小于套接字缓冲区的大小。**此时，网卡往往不会立马发送，而是将数据合并后一起发送，这样效率也会高一些。但是，对方接收到的可能就是黏包。另外，如果接收方读取数据不够及时，也会产生黏包现象；</li><li>产生半包的原因：<strong>比如当发送方发送的数据大于套接字缓冲区的大小时，数据在底层必然会分成多次发送</strong>，因此接收方收到的可能就是半包。另外一个非常重要的因素就是最大传输单元，数据是按 TCP/IP 逐渐封装后传输的。应用层数据在作为数据部分传递给数据链路层之前，需要加上传输层的头，才能逐层封装传递。既然要封装，就必然涉及数据内容的大小控制，否则就不存在封装的概念了。各层协议中报文内容的大小就由最大传输单元控制。当发送的数据大于协议各层的最大传输单元时，就必须拆包。</li></ul><h4 id="各个-io-模式" tabindex="-1"><a class="header-anchor" href="#各个-io-模式" aria-hidden="true">#</a> 各个 IO 模式</h4><ul><li>BIO：阻塞同步，一直等待数据，直到数据就绪；</li><li>NIO：非阻塞同步，无需等待数据就绪，数据就绪后系统会通知我们去处理；</li><li>AIO：非阻塞异步，系统会把数据读好返回并回调给我们；</li></ul><h4 id="nio-的-3-种-reactor-模式" tabindex="-1"><a class="header-anchor" href="#nio-的-3-种-reactor-模式" aria-hidden="true">#</a> NIO 的 3 种 Reactor 模式</h4><p>① <strong>Reactor 单线程模式</strong>，接收连接、处理读写操作、注册事件、扫描事件等所有操作都由一个线程来完成。显而易见，这个线程的压力很大，很容易称为系统瓶颈。</p><p><img src="'+l+'" alt="image-20230721210304692"></p><p>② <strong>Reactor 多线程模式</strong>，它弥补了 Reactor 单线程模式中的缺陷，解码、处理、编码等比较复杂且耗时较长的操作将由线程池来做。</p><p><img src="'+o+'" alt="image-20230721210829367"></p><p>③ <strong>Reactor 主从多线程</strong>，把 accept 事件单独注册到一个独立的主 Reactor 中，主 Reactor 的作用就是专门处理连接，毕竟建立连接是最重要的 io 事件。</p><p><img src="'+c+`" alt="image-20230721210842645"></p><h4 id="netty-的参数调整" tabindex="-1"><a class="header-anchor" href="#netty-的参数调整" aria-hidden="true">#</a> Netty 的参数调整</h4><ul><li><p>系统参数，有一个比较重要</p><ol><li><p>程序最多可以打开的文件数目。因为对于服务器网络应用来说，每个连接的建立都需要打开一个 「文件」。具体而言，<strong>在建立 TCP 连接时，系统将为每个 TCP 连接创建一个 Socket 句柄，也就是文件句柄</strong>。但是 Linux 系统对每个进程能够打开的文件句柄数量做了限制，如果超出限制就会报错，默认是 1024。通过 <strong>ulimit -n [xxx]</strong> 命令增大允许的文件句柄数目。可以考虑将 ulimit 命令作为启动脚本的一部分；</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[im_user@bjvpc22-202 ~]$ ulimit -a
core file size          (blocks, -c) unlimited
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 61386
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 655350
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 61386
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>Netty 系统参数调整：（目前只分析针对 NIO 的）</p><ol><li>SocketChannel <ol><li><strong>SO_SNDBUF</strong>：TCP 数据发送缓冲区大小。如果发送缓冲区太小，发送方发送的数据可能会被阻塞，直到缓冲区有足够的空间来存储数据。如果发送缓冲区太大，可能会导致过多的内存占用；通常调成带宽和延时的乘积；</li><li><strong>SO_RCVBUF</strong>：TCP 数据接收缓冲区大小；通常调成带宽和延时的乘积；</li><li><strong>SO_KEEPALIVE</strong>：TCP Keepalive，长连接用的，通过周期性发送探测数据包来实现这个目标。如果在一段时间内没有数据或确认报文通过网络，这个特性就会触发，发送一个探测包到对端主机。如果接收到回应，连接就继续保持开启。如果没有收到回应，TCP Keepalive则会再次发送探测包，直到达到预设的次数，如果还没有收到回应，就会认为连接已经断开，并关闭这个连接；</li><li><strong>SO_LINGER</strong>：关闭 Socket 的延迟时间，默认禁用，socket.close() 方法立即返回，待发送的数据将由系统后台继续发送；0 表示立即关闭。</li><li><strong>TCP_NODELAY</strong>：设置是否启用 Nagle 算法。这种算法可将小的碎片数据连接成更大的报文来提高发送效率。如果需要发送一些比较小的报文，那么需要禁用 Nagle 算法；</li></ol></li><li>ServerSocketChannel <ol><li><strong>SO_RCVBUF</strong>：</li><li><strong>SO_BACKLOG</strong>：连接请求的处理是围绕一个请求队列进行的。执行一次 accept() 方法就相当于处理请求队列中的一个请求并建立连接，没来得及处理的连接请求就会在请求队列中等待处理，SO_BACKLOG 就是设置这个等待队列的长度。</li></ol></li></ol></li><li><p>Netty 非系统参数调整</p><ol><li><strong>高低水位</strong>，最重要的；我们用的 8k，128k</li><li>其他的就不说了；</li></ol></li></ul><p>查看 linux 默认和最大的发送缓冲区和接收缓冲区的大小：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cat /proc/sys/net/core/rmem_max | awk &#39;{ print $1 / (1024 * 1024) }&#39;
cat /proc/sys/net/core/wmem_max | awk &#39;{ print $1 / (1024 * 1024) }&#39;
cat /proc/sys/net/core/rmem_default | awk &#39;{ print $1 / 1024 }&#39;
cat /proc/sys/net/core/wmem_default | awk &#39;{ print $1 / 1024 }&#39;


cat tcp_wmem | awk &#39;{print $2 / 1024}&#39;
64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="netty-内存泄漏检测" tabindex="-1"><a class="header-anchor" href="#netty-内存泄漏检测" aria-hidden="true">#</a> Netty 内存泄漏检测</h4><p>（1）<strong>Netty 中的资源管理</strong></p><ul><li>初始化一个资源的时候它的引用计数为 1；</li><li>当你释放它的时候，它的引用计数会减 1，如果引用计数到 0 了，这个对象就会<strong>释放并且它们的资源就能回到内存池</strong>中；</li></ul><p>如果一个 <code>ByteBuf</code> 没有执行完自己该做的 release，它就已经不可达了，JVM 就有可能对它们执行 GC。<strong>我们知道一旦一个对象被 GC 了，那就不可能再去调用它的 release 方法了。那这个 <code>ByteBuf</code> 就所占用的内存池资源就没法还回去，内存池上可用资源就会越来越少</strong>，换言之。这时候我们就产生了内存泄漏。</p><p>（2）netty 的内存泄漏检测机制需要完成两个任务：</p><ul><li><strong>在泄漏发生的时候，我们需要有个通知机制来知晓被 GC 的对象没有调用自己该有的 release 方法来释放池化资源</strong>；</li><li>需要有个记录机制来记录这些泄漏的对象使用的地方，方便溯源；</li></ul><p><strong>（3）Netty 内存检测的实现</strong></p><ul><li>当申请资源时，例如使用 <code>ByteBuf buffer = ctx.alloc().buffer() </code>申请堆外内存，将引用计数加 1，同时定义<strong>弱引用 DefaultResourceLeak 并将其添加到一个集合</strong><code>（#allLeak）</code>中；</li><li>当释放资源时，例如归还内存到内存池，会将引用计数减 1。当减到 0 的时候，自动执行释放资源的操作，并将弱引用从之前的那个集合中移除；</li><li>正常流程时会将 Bytebuf 和弱引用的断开，并将自己从 集合<code>（#allLeak）</code>中移除，这样该 ByteBuf 被 GC 时，就会进入到 refQueue，在遍历 refQueue 的时候回去尝试从 集合<code>（#allLeak）</code>中 移除元素，因为是正常 release 了，所以此时并没有出现内存泄露；</li><li>异常流程，没有正常调用 release 方法，也就是没有将自己从 集合<code>（#allLeak）</code>中移除，等到发生 GC 时，就会加入到 refQueue，在遍历refQueue 的时候发现集合<code>（#allLeak）</code>中有该 ref，说明发生内存泄露了。如果发生内存泄露，就会打出日志，可以通过配置指定是全样本检查，还是抽样检查 sample；</li></ul><h4 id="写数据性能优化" tabindex="-1"><a class="header-anchor" href="#写数据性能优化" aria-hidden="true">#</a> 写数据性能优化</h4><p>三个方法：</p><ul><li>write</li><li>flush</li><li>writeAndFlush</li></ul><p>我们知道写数据是有内存级别的出站缓冲区的，如果每次写数据都 flush，系统开销会比较大，我们需要仅可能的限制调用 flush 方法的次数。</p><p>真正的难点是在于什么时候执行 flush 方法：</p><ul><li>如果执行的太晚，系统调用虽然少，但是响应延时就会相应增加许多；</li><li>如果执行的太早，这样也没有减少多少次系统调用；</li></ul><p>使用 Netty 提供的可插拔的解决方案， FlushConsolidationHandler</p><h3 id="spring-循环依赖问题" tabindex="-1"><a class="header-anchor" href="#spring-循环依赖问题" aria-hidden="true">#</a> Spring 循环依赖问题</h3><p>Spring 中引起循环依赖有如下几个原因</p><ol><li>原型模式下的循环依赖（无法解决）；</li><li>单例模式下的构造方法注入属性导致的循环依赖（无法解决）;</li><li>单例模式下的 setter 方法注入属性导致的循环依赖（可以解决）；</li></ol><p>Spring 检查原型模式的循环依赖的伪代码：ThreadLocal 实现的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>查询标记，bean 正在创建中<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    抛异常<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
标记 bean 正在创建中
创建 bean
标记 bean 创建完成了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring 的代理增强一般都是在实例初始化最后执行的，其实是 AbstractAutoProxyCreator 后置处理器的 postProcessAfterInitialization 创建代理对象的。但是假如发生循环依赖就需要提前创建代理对象了，因为别的实例需要注入这个代理对象，假如不提前创建那么注入的就是原始对象了，那就不符合要求了。</p><p>前面说了 Spring 的代理增强一般都是在实例初始化最后执行的，假如发生循环依赖就需要提前创建代理对象了。那么问题了，Spring 是如何防止重复创建代理对象的。发送循环依赖提前创建对象其实是调用的 AbstractAutoProxyCreator#getEarlyBeanReference 方法，提前创建会将Bean 的信息添加到 earlyProxyReferences 中，它是一个 Map。Spring 在初始化阶段做代理增强是在后置处理器 AbstractAutoProxyCreator 的 postProcessAfterInitialization 方法做的，可以看到这里面判断了 earlyProxyReferences 中是否之前代理过，假如代理过就不再重复代理了。</p><p>循环依赖总结</p><ul><li>单例 set 方法的循环依赖，Spring 会使用三个级别的缓存来解决，无需额外的配置； <ul><li><strong>一级缓存的对象是已经走完全部生命周期的对象</strong>；</li><li><strong>三级缓存存放的对象是 bean 对应的工厂对象，发生循环依赖时，会从工厂对象获取产品（可能是原始 bean，也可能是代理后的 bean</strong>）;</li></ul></li><li><ul><li><strong>二级缓存存在，说明发生循环依赖了，存放的是从三级缓存中的工厂对象获取的对象（可能是原始 bean，也可能是代理后的 bean）</strong>;</li></ul></li><li>Spring 在一般情况下都是在 bean 的初始化阶段去创建代理对象的，但是假如发生循环依赖就会提前给创建代理对象存放到二级缓存中；</li><li><strong>二级缓存的意义</strong>：假如提前创建了代理对象，在最后的阶段需要从二级缓存中获取该代理对象，保证最终返回的结果是代理后的对象；</li><li>构造方法和原型模式的循环依赖，Spring 自己是无法自动帮我们解决的，但是我们可以通过一些方案来规避这个问题； <ul><li><a href="">@Lazy </a> 注解；</li><li>ObjectFactory 和 ObjectProvider 接口；</li><li>Java 官方提供的 Provider 接口；</li><li>上面的这些方案基本思路就是将真正获取对象的时机延迟了，这样就不会发送循环依赖问题了</li></ul></li></ul><h3 id="分布式事务本地消息表" tabindex="-1"><a class="header-anchor" href="#分布式事务本地消息表" aria-hidden="true">#</a> 分布式事务本地消息表</h3><p>消息表字段：id, biz_id, biz_type, msg, msg_result, msg_desc,atime,try_count。分别表示uuid，业务id，业务类型，消息内容，消息结果（成功或失败），消息描述，创建时间，重试次数， 其中biz_id，msg_desc字段是可选的。</p><ol><li>Producer 端准备 1 张消息表，把 update DB 和 insert message 这 2 个操作，放在一个 DB 事务里面，也就是说保证业务操作和本地消息表的操作是原子性的。发送消息到消费方，如果消息发送失败，会进行重试发送。</li><li>定时任务把消息表中的 message 传送给 MQ。失败了，不断重试重传。允许消息重复，但消息不会丢。</li><li>Consumer 端准备一个判重表。处理过的消息，记在判重表里面。实现业务的幂等。但这里又涉及一个原子性问题：如果保证消息消费 + insert message 到判重表这2个操作的原子性；</li></ol><h3 id="spi-机制-以及其在-motan-中怎么用的" tabindex="-1"><a class="header-anchor" href="#spi-机制-以及其在-motan-中怎么用的" aria-hidden="true">#</a> SPI 机制，以及其在 Motan 中怎么用的</h3><ul><li>API：当实现方提供了接口和实现，我们可以通过调用实现方的接口从而拥有实现方给我们提供的能力，这就是 API ，这种接口和实现都是放在实现方的；</li><li>SPI：<strong>当接口存在于调用方这边时，调用方定义接口规则，不同的实现按照这个接口规则去实现，提供各种的服务</strong>；</li></ul><p>有很多开源框架都涉及到了 SPI 技术，例如 <strong>JDBC 的数据驱动</strong>、<strong>Motan 和 Dubbo 扩展的 SPI 机制</strong>、Spring 的 SPI 机制、日志框架中的 SPI 机制。</p><h4 id="jdk-的-spi-机制源码分析" tabindex="-1"><a class="header-anchor" href="#jdk-的-spi-机制源码分析" aria-hidden="true">#</a> JDK 的 SPI 机制源码分析</h4><p>为什么要在 resource 的 <code>/META-INF/services</code> 文件夹下面创建文件呢？其实这个路径是 JDK 的 ServiceLoader 类源码中写死的，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;META-INF/services/&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里我们分析下 ServiceLoader 实现 SPI 的机制，也就是分析上面的案例的代码是如何得到实现类对象的，案例测试代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化一个 ServiceLoader</span>
    <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Loadbalance</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Loadbalance</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Loadbalance</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 加载所有的 Service Provider</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Loadbalance</span> loadbalance <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        loadbalance<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;用户服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        loadbalance<span class="token punctuation">.</span><span class="token function">setWeightString</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>老样子先看一下整体的流程图：</p><img src="`+u+`" alt="JDK的SPI流程分析" style="zoom:100%;"><p>第一步：调用 java.util.ServiceLoader#load(Class) 方法获取一个 ServiceLoader 对象，这一步没有做什么特殊处理，就是初始化一个 ServiceLoader 实例，并且初始化了一个延迟加载 Service 的迭代器 lookupIterator。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> svc<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> cl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    service <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>svc<span class="token punctuation">,</span> <span class="token string">&quot;Service interface cannot be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    loader <span class="token operator">=</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> cl<span class="token punctuation">;</span>
    acc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    providers<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个懒加载用的迭代器</span>
    lookupIterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyIterator</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：调用迭代器的 hasNext() 方法查看是否有 Service 实现可以获取，第一次获取会去前面说的延迟加载的迭代器 lookupIterator 中去尝试获取 Service 实现，最后会调用 java.util.ServiceLoader.LazyIterator#hasNextService 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* 是否有更多的 service */</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>configs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// PREFIX = &quot;META-INF/services/&quot;</span>
            <span class="token class-name">String</span> fullName <span class="token operator">=</span> <span class="token constant">PREFIX</span> <span class="token operator">+</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>loader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                configs <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                configs <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token string">&quot;Error locating configuration files&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pending <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>pending<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configs<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        pending <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> configs<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nextName <span class="token operator">=</span> pending<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 java.util.ServiceLoader.LazyIterator#hasNextService 方法的关键部分就是获取文件路径，也就是 <code>String fullName = PREFIX + service.getName();</code>，然后通过加载器去加载这个资源，最后调用 java.util.ServiceLoader#parse 方法去解析这个文件里面的内容，也就是我们写在里面的 Service 的实现类的全限定名称。该 parse 方法的实现如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">,</span> <span class="token class-name">URL</span> u<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">ServiceConfigurationError</span>
<span class="token punctuation">{</span>
    <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedReader</span> r <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        in <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lc <span class="token operator">=</span> <span class="token function">parseLine</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> u<span class="token punctuation">,</span> r<span class="token punctuation">,</span> lc<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token string">&quot;Error reading configuration file&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
       <span class="token comment">// ...... 省略关流处理 ......</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法的作用就是，没解析一行就去尝试将解析出来的 Service 实现类的全限定名存到 names 集合里面去。</p><p>第三步：调用迭代器的 next() 方法获取 Service 实现类的实例，ServiceLoader 中有缓存机制，这里就不分析它的缓存机制了。如果 Service 实现类的实例还没有创建，就会去调用 java.util.ServiceLoader.LazyIterator#nextService 去实例化 Service 实现类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">S</span> <span class="token function">nextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> cn <span class="token operator">=</span> nextName<span class="token punctuation">;</span>
    nextName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略异常处理 ......</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>service<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略异常处理 ......</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">S</span> p <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        providers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cn<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// ...... 省略异常处理 ......</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// This cannot happen</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是通过反射去创建 Service 的实现类了。</p><h4 id="motan-dubbo-中的-spi-机制的提现" tabindex="-1"><a class="header-anchor" href="#motan-dubbo-中的-spi-机制的提现" aria-hidden="true">#</a> Motan/Dubbo 中的 SPI 机制的提现</h4><p>以 Motan 为例分析，Motan 自己实现了类似 JDK 的 ServiceProvider 的 SPI 机制，在 JDK 的 SPI 机制上做了自己的扩展。</p><p>com.weibo.api.motan.core.extension.ExtensionLoader 类是 SPI 机制的核心，它支持 JDK ServiceProvider 和注解方式去配置 SPI，获取 Service 实现类的实例核心代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> throwWhenNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">checkInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ...... 省略异常处理 ......</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Spi</span> spi <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Spi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>spi<span class="token punctuation">.</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Scope</span><span class="token punctuation">.</span><span class="token constant">SINGLETON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 单例处理</span>
            <span class="token keyword">return</span> <span class="token function">getSingletonInstance</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> throwWhenNotFound<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取保存的 name 对应类的 Class 文件</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clz <span class="token operator">=</span> extensionClasses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// ...... 省略异常处理 ......</span>

            <span class="token comment">// 反射创建实例</span>
            <span class="token keyword">return</span> clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MotanFrameworkException</span> mfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略异常处理 ......</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单看一下 motan-core 包下的 <code>META-INF/services/</code> 中有多少个 LoadBalance 的实现类。</p><img src="`+r+`" alt="image-20230711191248797" style="zoom:100%;"><p>关于 Motan、Dubbo 的 SPI 机制后面有机会再详细分析。</p><h2 id="introduce" tabindex="-1"><a class="header-anchor" href="#introduce" aria-hidden="true">#</a> introduce</h2><p>我叫 XXX，来自湖北黄冈。</p><p>我到目前已经有 4 年左右的 Java 后端开发经验了。</p><p>目前在这家公司已经有两年多的时间了，我在公司的角色是一个开发小组的组长，加我一起 3，4 个人吧。平时的工作主要是作为需求和一些海外项目的 Owner，跟进需求的进度，并持续推动。从需求评审、设计评审、分配任务、编码设计、Code Review 等一些列流程下来，让服务保质保量的按时交付。</p><p>工作中的一些碎片化的时间会利用起来去梳理当前我负责的服务上的现有逻辑，找出一些性能问题、逻辑漏洞，并推动解决他们。</p><p>平时下班后的时间会学习一些开源框架的源码设计，目前我已经看了 Netty、RocketMQ、JUC、Spring、Mybatis 的核心源码了，学习这些框架的目的是为了从中学设计模式的使用，和一些架构、设计思路，并且把学到的知识更好的运用在项目中。</p><h2 id="what-did-u-do" tabindex="-1"><a class="header-anchor" href="#what-did-u-do" aria-hidden="true">#</a> what did u do</h2><h3 id="architecture" tabindex="-1"><a class="header-anchor" href="#architecture" aria-hidden="true">#</a> architecture</h3><p>我们项目主要是分为三个部分，<strong>直播业务</strong>，<strong>广播剧业务</strong>，<strong>小程序电商业务</strong>，还有一些其他的基础服务，例如用户服务，资金服务，订单服务等等。</p><p>我们组主要负责<strong>直播间服务</strong>和<strong>自研 IM 服务</strong></p><p>一、直播间服务有哪些内容呢，如下：</p><ol><li>直播 PK；</li><li>直播连麦；</li><li>送礼；</li><li>抽卡，扭蛋；</li><li>粉丝团；</li><li>各种排行榜；</li><li>还有一些其他活动相关的业务；</li></ol><p>二、自研 IM 服务主要业务如下：</p><ol><li>私聊；</li><li>群聊；</li><li>直播间弹幕；</li><li>一些业务消息；</li></ol><p>三、除开这些还有一些海外的套壳版本的 app 也是我们维护的。目前有日本的直播 app，美国的直播听剧的 app。</p><h3 id="what-did-i-do" tabindex="-1"><a class="header-anchor" href="#what-did-i-do" aria-hidden="true">#</a> what did I do</h3><p>负责<strong>直播间业务</strong>和<strong>海外业务</strong>的需求迭代，<strong>维护 IM 服务</strong>。工作中主要是版本需求和技术优化各占一半吧。</p><p>我主要做的需求：</p><ul><li>北美的套壳 app 都是我主导的；</li><li>自研 IM 服务从 0 到 1 参与设计和开发，目前这个服务也是由我和另外一个人，总共两个人来维护的。 <ul><li>技术选型，功能设计，协议设计，编码落地都是有参与其中；</li><li>IM 中我主要负责 Netty 服务端基础服务的搭建，以及设计类似 SpringMVC 的那种过滤器链和接口映射关系。再就是其它 IM 相关的业务开发了；</li></ul></li></ul><p>我做了那些优化：</p><ol><li><strong>通过 IM 的上行下行限流策略，降低公网流量，减少 50% 的运维费用；</strong></li><li>大主播开播关播瞬时导致直播服务的 CPU 飚高，然后趋于稳定。通过缓存优化；</li><li><strong>大主播开播导致 IM 服务的 CPU 飚高。通过优化编解码的次数，降低 7 - 8% 的 CPU 使用率；</strong></li><li><strong>线上规律性的 CPU 峰刺</strong>， <ol><li>一小时一次的是因为日志量上来了，每个小时日志压缩都会导致 CPU 变高。通过将日志压缩转移到闲时压缩；</li><li>几分钟一次的 CPU 变高，是因为内存泄漏。解决内存泄漏的代码，服务恢复正常；</li></ol></li><li>Redis 的大 key 拆分；</li><li><strong>直播服务的慢查询次数降低 90 %</strong>；</li><li>设计手动服务降级策略，保证核心服务的稳定性；</li></ol><h2 id="project-introduce" tabindex="-1"><a class="header-anchor" href="#project-introduce" aria-hidden="true">#</a> project introduce</h2><h3 id="im-系统设计" tabindex="-1"><a class="header-anchor" href="#im-系统设计" aria-hidden="true">#</a> IM 系统设计</h3><h4 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型" aria-hidden="true">#</a> 技术选型</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Kafka,Redis,Netty,Hystrix,Nacos,Motan,Springboot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="功能设计" tabindex="-1"><a class="header-anchor" href="#功能设计" aria-hidden="true">#</a> 功能设计</h4><p><strong>消息优先级</strong></p><ol><li>时实性(如礼物消息要求快速到达，不能丢)</li><li>限流丢弃(如文本消息 在超过一定频次后可以丢消息)</li></ol><p><strong>QOS</strong></p><ol><li>至少到达1次(有可能重复)</li><li>至多到达1次(有可能丢消息)</li><li>必达1次(不能重复)</li></ol><p><strong>有限时效实时消息(有效期内到达，否则丢弃，不落地=如点赞)</strong></p><p><strong>敏感词检查(是否进行敏感词检查，如点赞/系统消息就不需要检查，评论消息必须检查)</strong></p><p><strong>群消息(群聊/聊天室)</strong></p><ol><li>直播间人数无上限</li><li>直播间在线人数- &gt;支持查询用户在线状态</li><li>直播间成员-&gt;支持查询在线直播间用户列表(-&gt;这个在业务上去做)</li><li>消息内容(业务级定义:文本/点赞/礼物/离线消息-&gt;这个目前业务进直播间有拉历史消息)</li><li>支持游客态查询消息(游客态)</li></ol><p><strong>C2C消息(单聊)</strong></p><p>支持用户与用户之间互发消息(目前消息类型有:拉黑/增删管理员/PK和连麦发起)</p><p><strong>支持环境</strong>(语言)</p><ol><li>Android(Java)</li><li>iOS(ObjectC/Swift)</li><li>PC(C++)</li><li>WEB/H5(JS)</li></ol><p><strong>多端支持</strong></p><ol><li>多端登陆</li><li>多端消息同步(主要需求是主播多端操作的消息同步)</li></ol><p><strong>服务端需求</strong></p><ol><li>消息回调 <ol><li>文本消息</li><li>礼物</li><li>点赞</li></ol></li><li>弹性伸缩</li><li>故障转移</li><li>降级</li><li>监控</li><li>消息染色/路径跟踪</li><li>消息日志</li><li>到达率(统计?)</li></ol><h4 id="消息存储模型" tabindex="-1"><a class="header-anchor" href="#消息存储模型" aria-hidden="true">#</a> 消息存储模型</h4><p>消息存储模型，存储模型的选型直接影响着消息同步模块的实现。消息、会话、会话与消息组织关系的实现方式在业界各主流 IM 系统中都不尽相同，但无外乎两种形式：<strong>写扩散读聚合</strong>、<strong>读扩散写聚合</strong>。读、写扩散是消息在群组会话中的存储形式，其详细说明如下。</p><p><img src="`+d+'" alt="读扩散与写扩散"></p><ul><li><strong>在读扩散场景中，消息归属于会话，相当于数据库中存储着一张conversation_message表，其中包含该会话产生的所有消息。这种存储形式的好处是消息入库效率高，只保存会话与消息的绑定关系即可。</strong></li><li>在写扩散场景中，会话产生的消息投递到message_inbox表中，该表类似于个人邮件的收件箱，其中保存着个人的所有会话，会话中的消息按其产生的时间顺序排列。这种存储形式的好处是能实现灵活的消息状态管理，会话中的每条消息在面向不同的接收者时可以呈现出不同的状态。</li></ul><p><strong>读扩散和写扩散的优缺点：</strong></p><ul><li><strong>采用读扩散的方式，在大并发修改数据的场景下，数据一致性处理效率和数据变更效率会成为系统性能瓶颈。</strong></li><li>采用写扩散的方式实现消息存储模型，以更高的存储成本支持更高的更新性能。</li></ul><p><strong>我们系统怎么实现的呢？</strong></p><ul><li>IM 系统并不做真正存储的操作，在业务服务器会提供消息真正发送前后发送后的 callback 服务；</li><li>在 callback 服务中去做参数校验、落库、消息箱通知、push 等逻辑；</li></ul><h4 id="系统整体架构" tabindex="-1"><a class="header-anchor" href="#系统整体架构" aria-hidden="true">#</a> 系统整体架构</h4><p><img src="'+k+`" alt="IM系统架构图"></p><h4 id="认证-token-设计" tabindex="-1"><a class="header-anchor" href="#认证-token-设计" aria-hidden="true">#</a> 认证 token 设计</h4><table><thead><tr><th style="text-align:left;">版本号(2位)</th><th style="text-align:left;">uid(12位)</th><th style="text-align:left;"><code>appId(4位)</code></th><th style="text-align:left;"><code>tick(登陆计数器)(3位)</code></th><th style="text-align:left;"><code>clientId(客户端类型)(1位)</code></th><th style="text-align:left;">uidtype(用户类型)（1位）</th><th style="text-align:left;">随机字符(8位)</th><th style="text-align:left;"><code> 加密串(6位)</code></th></tr></thead><tbody><tr><td style="text-align:left;">0-2</td><td style="text-align:left;"><code>2-14</code></td><td style="text-align:left;"><code>14-18</code></td><td style="text-align:left;"><code>18-21 </code></td><td style="text-align:left;"><code>21-22</code></td><td style="text-align:left;"><code>22-23</code></td><td style="text-align:left;"><code>23-31</code></td><td style="text-align:left;"><code>31-37</code></td></tr></tbody></table><p>IM 系统接入流程</p><p><strong>从 KilaServer 拿 access_token(1) -&gt; 调用 dispatch -&gt; 获取长连接地址:端口和 access_token(2) -&gt; 长连接登录(进入直播间) -&gt;轮询(收发消息)</strong></p><h4 id="协议设计" tabindex="-1"><a class="header-anchor" href="#协议设计" aria-hidden="true">#</a> 协议设计</h4><p>主要包括请求头和请求体了</p><p>请求头就是一堆 key，value，比如：</p><ul><li>token</li><li>requestid</li><li>机型，安卓或者iOS</li><li>appid</li><li>请求消息的类型，是群发，单发，获取长连接等类型；</li></ul><p>对应请求体：</p><ul><li>不同的类型的协议的，需要携带的请求体的 key，value 不一样；</li></ul><h4 id="probuf-序列化" tabindex="-1"><a class="header-anchor" href="#probuf-序列化" aria-hidden="true">#</a> probuf 序列化</h4><p>不是我做的，不看了</p><h4 id="ack-机制" tabindex="-1"><a class="header-anchor" href="#ack-机制" aria-hidden="true">#</a> ACK 机制</h4><p>并不是所有消息都需要进行 ACK，一些重要的消息进行 ACK，重要的消息给客户端返回一个需要响应 ACK 的标记，客户端接收到消息后就会发送一个 ACK 消息到 IM 系统。</p><p>经过线上验证 IM 系统的消息到达率 99.9%</p><h4 id="压测数据参考" tabindex="-1"><a class="header-anchor" href="#压测数据参考" aria-hidden="true">#</a> 压测数据参考</h4><ul><li>​ api-server(收发消息服务层，登录session，房间成员、关系/消息收发消息等业务处理)</li><li>​ api-exchange(第三方消息回调，包含腾讯/微博的回调以及回调给KilaServer的消息)</li><li>​ center-connect (上行发消息，称短连接)</li><li>​ api-connect(下行收消息，称长连接)</li></ul><p>下行(收消息)</p><p>压测环境 阿里云ECS 16核 32G 专用网络 最大100M，redis(pub/sub 4台 1G 4.0高配2W连接数)</p><p>api-sever 1台(192.168.5.55)， api-connect 1台(192.168.5.34)，center-connect 1台 独立机(192.168.5.35)，redis(pub/sub 4台 1G 4.0高配2W连接数)</p><ul><li>​ 单台 ECS 空消息情况下 TCP 连接数峰值 2.5W (由于测试客户端限制，还没有达到最大值，预估 3W 左右）</li><li>​ 单台 ECS 空消息 WebSocket 连接数峰值 2W (由于测试客户端限制，还没有达到最大值，预估 2.5W 左右）</li><li>​ 有消息收发的情况下，连接数预估 1W 左右，因为消息会占用很大的网络流量(<strong>微博的机器是按照单实例 1W 的连接分布</strong>)</li></ul><h4 id="im-系统部署" tabindex="-1"><a class="header-anchor" href="#im-系统部署" aria-hidden="true">#</a> IM 系统部署</h4><ul><li>长连接：41 台，按一台抗 1w 长连接，抗 40w 用户同时在线轻轻松松；</li><li>短连接：6 台；</li><li>群组服务：6 台；</li><li>thirdparty 第三方：3 台；</li><li>service 核心服务：6 台；</li></ul><h3 id="im-过滤器链-异常处理-url-映射" tabindex="-1"><a class="header-anchor" href="#im-过滤器链-异常处理-url-映射" aria-hidden="true">#</a> IM 过滤器链，异常处理，url 映射</h3><p>Spring 容器初始化完成后，我们可以监听初始化完成的事件，<strong>ApplicationListener 接口</strong></p><ul><li>初始化过滤器链；</li><li>初始化异常处理器；</li><li>初始化 url 映射；</li></ul><h4 id="过滤器链" tabindex="-1"><a class="header-anchor" href="#过滤器链" aria-hidden="true">#</a> 过滤器链</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> beansWithAnnotation <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span><span class="token class-name">WesyncFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取带有 @WesyncFilter 的所有类的 beanName 和实例，然后给这些过滤器通过 @Order 排序一下，放到链子集合 wesyncFilterChain 中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">WesyncFilterChain</span> wesyncFilterChain <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="url-映射" tabindex="-1"><a class="header-anchor" href="#url-映射" aria-hidden="true">#</a> url 映射</h4><p>获取带有 @WesyncURL 的所有类的 beanName 和实例，带了 @WesyncURL 注解的就说明是有映射关系的，需要找到那个方法去处理这个协议。</p><p>根据前面查找到的 @WesyncURL 的类的 class 文件，获取他的父类，或者接口，遍历这些类中的所有方法，查看上面是否有 @WesyncURL 注解。</p><p>映射信息如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlMapping</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">// 协议名</span>
    <span class="token class-name">String</span> tag<span class="token punctuation">;</span> <span class="token comment">// 协议</span>

    <span class="token class-name">Object</span> realBean<span class="token punctuation">;</span> <span class="token comment">// 实例</span>
    <span class="token class-name">String</span> realMethod<span class="token punctuation">;</span> <span class="token comment">// 协议对应的方法</span>
 
    <span class="token comment">// ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化映射关系：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initUrlMappings</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>urlTagMapping <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;begin init urlMappings..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        urlTagMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">UrlMapping</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> beansWithAnnotation <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span><span class="token class-name">WesyncURL</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UrlMapping</span> urlMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> realBean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> beansWithAnnotation<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            realBean <span class="token operator">=</span> beansWithAnnotation<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            urlMapping<span class="token punctuation">.</span><span class="token function">setRealBean</span><span class="token punctuation">(</span>realBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">initHandlerMethods</span><span class="token punctuation">(</span>realBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> urlTagMapping<span class="token punctuation">,</span> urlMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;end init urlMappings...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="直播间多级缓存优化" tabindex="-1"><a class="header-anchor" href="#直播间多级缓存优化" aria-hidden="true">#</a> 直播间多级缓存优化</h3><h4 id="突发流量多级缓存优化" tabindex="-1"><a class="header-anchor" href="#突发流量多级缓存优化" aria-hidden="true">#</a> 突发流量多级缓存优化</h4><p>背景：由于大主播开关播，用户同时进入直播间会有大量的接口调用，导致系统 QPS 激增，对系统的冲击比较大，为了应对突发流量，设计了直播间的多级缓存优化。</p><p>目前系统中有基本上所有数据都有 Redis 缓存层，但是 QPS 调用量大的接口里面可能需要查询各种各样的信息，导致接口的跨度比较大，可能会查询很多次 Redis 或者 DB。</p><p>比如接口需要返回一个 RoomStart 的对象，但是这个对象的数据组装来自很多个 service 的接口调用，考虑提前将数据组装好，将 RoomStart 对象存放到本地缓存和 Redis 中，就是一个镜像数据。（前提是这些数据的更新频率不高）</p><p>主要流程如下，两层缓存；</p><ul><li>本地缓存：并为存储所有数据，而是存储上次刷新时间戳，实现定时刷新 Redis 缓存的目的；</li><li>Redis 缓存：当本地缓存的刷新时间戳失效后，调用 Service 接口刷新 Redis 缓存；</li></ul><h4 id="本地缓存回种超时优化-异步刷新" tabindex="-1"><a class="header-anchor" href="#本地缓存回种超时优化-异步刷新" aria-hidden="true">#</a> 本地缓存回种超时优化（异步刷新）</h4><p>背景：礼物的数据更新的频率不高，使用本地缓存去存储，但是假如本地缓存过期回种的时候只会允许一个线程去刷新数据，其他线程就会等待，导致 RPC 超时，给用户不好的体验。</p><p>优化：针对礼物这种静态数据但请求量大的业务场景，通过异步刷新本地缓存 , 保证本地缓存的数据是最新的。</p><ul><li>查询时先获取上次刷新的时间 , 如果到了需要刷新的时间仍然返回缓存中的结果, 同时启动异步刷新缓存的任务；</li><li>这样可以避免在用户请求线程中回种导致用户请求超时；</li><li>例如有些业务 比如查询主播自定义礼物单次从查询回种需要查询 1900+ 条数据回种必然超时可以使用这个工具类异步刷新本地缓存；</li></ul><p>主要优化思路：</p><ul><li>一个业务需要保存两个本地缓存的 key，一个实际数据和上次刷新时间；</li><li>如果从本地缓存没有获取到数据，那么还是要同步等待数据刷新；</li><li>如果从本地缓存获取到了数据，但是距离上次刷新时间已经到期了。此次会返回旧数据，然后异步刷新数据；</li></ul><h4 id="本地缓存的问题" tabindex="-1"><a class="header-anchor" href="#本地缓存的问题" aria-hidden="true">#</a> 本地缓存的问题</h4><p>问题：本地缓存会出现 「数据漂移」的现象。具体体现为集群中的多个服务中的本地缓存的刷新时机不一样，两台机器内的本地数据的不一样，用户两次请求分别打到了这两个机器上，导致用户看到的效果不同。</p><p>解决：无法解决，使用本地缓存的场景就是为了存储数据变更频率不高的场景，那么对这种数据不一致性是可以接受的。</p><h3 id="国际版迁移" tabindex="-1"><a class="header-anchor" href="#国际版迁移" aria-hidden="true">#</a> 国际版迁移</h3><p>没啥好说的，就是重构一下代码，数据隔离兼容多 app，为后续新建 app 缩短时间。</p><h3 id="慢查询优化" tabindex="-1"><a class="header-anchor" href="#慢查询优化" aria-hidden="true">#</a> 慢查询优化</h3><p><strong>慢查询优化主要有下面几个方向：</strong></p><ul><li>重新设计索引；</li><li>优化查询语句；</li><li>建立缓存，对于变化频率不大数据可以考虑建立 本地缓存+定时刷新 的策略；</li><li>冷数据备份；</li></ul><p><strong>本次慢查询优化，降低了 90% 的慢查询次数，主要就是按照上面的几个策略去处理的：</strong></p><ul><li>有的 SQL 并不需要查所有的字段，只查询需要的字段；</li><li>有的查询无法走索引，所以需要重新设计索引，优化查询效率；</li><li>有的慢查询虽然设计了缓存，但是它过期时间比较快，导致访问数据库的次数也比较多，针对一些变化频率不高，或者时效性不高的数据可以直接存在 redis 中，不设置过期时间；</li><li>对于一些记录类型的表，可以做冷数据备份，因为一般记录性的操作端上露出的也就一年或者半年的数据；</li></ul><h3 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏" aria-hidden="true">#</a> 内存泄漏</h3><p><strong>内存泄漏产生背景：</strong></p><ul><li>背景：我们需要统计一下直播间维度的某个数据，使用我们的一个打日志的工具类，传入某个指标的key，就会定时打印统计日志了；</li></ul><p><strong>上线一台机器后发现问题：</strong></p><ul><li>CPU 每隔几分钟就会打满，十分有规律；</li><li>通过服务器的监控和 TOP 命令的查询，发送就是服务器频繁 GC，垃圾回收器占满了 CPU；</li></ul><p><strong>定位问题：</strong></p><ul><li>很明显就是此处加的统计代码导致的内存泄漏；</li><li>首先查看服务 JVM 的一些信息，使用 jstat、jmap 等命令，jmap 可以查看堆中那个对象占用比较大；</li><li>发现是统计的日志打印的工具类中的一个 Map 非常大，很明显就是没有移除 Map 的元素导致内存泄漏了。</li></ul><p><strong>处理：</strong></p><ul><li>因为工具类中有个隐藏的 Map，而且它对外没有提供 remove 方法，导致越来越大，发生内存泄漏。</li><li>工具类增加该 Map 的移除方法，解决；</li></ul><h3 id="cpu-峰刺问题" tabindex="-1"><a class="header-anchor" href="#cpu-峰刺问题" aria-hidden="true">#</a> CPU 峰刺问题</h3><p><strong>在我工作的时候遇到的 CPU 的蜂刺问题不少，具体遇到的有下面的情况：</strong></p><ol><li>大主播开播导致的服务器的 CPU 的飙升，对于服务来说瞬时 QPS 可能会突然翻好几倍，会导致服务请求堆积，响应变慢： <ul><li>Push 服务 CPU 飙升；</li><li>涉及到的 Redis CPU 飙升；（这可能会影响到在该 Redis 实例上的其他业务的响应速度）</li></ul></li><li>发生内存泄漏导致 CPU 规律性的飙升，就是垃圾回收线程在清理垃圾；</li><li>由于某些定时操作导致 CPU 的规律性飙升，例如某些业务的定时任务，也有可能是日志定时压缩导致的 CPU 飙升；</li></ol><p><strong>大主播开关播的 CPU 峰刺是怎么优化的呢？</strong></p><ul><li>定位问题和数据分析：通过监控分析 CPU 激增前后的接口的 QPS 的变化情况，定位那些接口导致的 CPU 激增； <ul><li>定位到了导致开关播峰刺的主要接口 8 个；</li><li>双端关播接口存在差异，关播时安卓比 iOS 多调用了15个接口；</li><li>关播瞬间 Android 多调用的接口瞬时 QPS 占总 QPS 的 55%；</li></ul></li><li>优化方向： <ul><li>通过链路追踪来分析是接口的跨度那部分占比大，减少循环 RPC 或者访问 Redis 的情况；</li><li>针对 Redis 的热 key 和大 key 进行拆分，分散热点数据，也可以将拆分后的 key 部署到 redis 集群上；</li></ul></li><li>确定优化方案： <ul><li>将大主播开关播使用的接口数据整合到 Redis 和本地缓存中；</li><li>在开播、关播、数据变更时预先加载数据到缓存中，同时定时刷新缓存数据；</li><li>减少不必要的接口调用，精简接口字段；</li><li>缓存采用 “算法路由 + 多节点负载” 的架构，保证请求均匀分发到多个实例，避免单节点压力；</li></ul></li></ul><h2 id="project-qps" tabindex="-1"><a class="header-anchor" href="#project-qps" aria-hidden="true">#</a> project QPS</h2><p>广播剧服务：</p><ul><li>单台机器：闲时平均 60，高峰期平均 160</li><li>总体：闲时平均 1800，高峰期平均 4800</li><li>采样 24 台</li></ul><p>直播服务：</p><ul><li>单台机器：闲时平均 50，高峰期平均 130</li><li>总体：闲时平均 1250，高峰期平均 3250</li><li>采样 25 台机器</li></ul><p>核心 service 服务，Motan RPC TPS：</p><ul><li>采样 49 台</li><li>单台机器：闲时平均 400，高峰期平均 1100</li><li>总体：闲时平均 24500，高峰期平均 53900</li></ul><p>IM 服务 QPS：</p><ul><li>apiserver 总体：闲时平均 166，高峰期平均 1242</li><li>thirdparty 总体：闲时平均 100，高峰期平均 574</li><li>长连接 总体：闲时平均 1000，高峰期平均 4078</li><li>短连接 总体：闲时平均 116，高峰期平均 450</li></ul><h2 id="im-down-stream-data" tabindex="-1"><a class="header-anchor" href="#im-down-stream-data" aria-hidden="true">#</a> IM down stream data</h2><p>总体：</p><ul><li>闲时平均每秒 10000 消息下发</li><li>高峰期平均每秒 100 0000 消息下行</li></ul><p>抽样单台：</p><ul><li>闲时平均每秒 500 消息下发</li><li>高峰期平均每秒 5 0000 消息下行</li></ul><h2 id="jvm-data" tabindex="-1"><a class="header-anchor" href="#jvm-data" aria-hidden="true">#</a> JVM data</h2><p>线上 service 使用的垃圾回收器</p><p>进程信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tomcat   13195     1 88 06:46 ?        03:25:32 /opt/java/jdk/bin/java -Xms12g -Xmx12g -Xmn3g -Xss512k -XX:+ExplicitGCInvokesConcurrent -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=5 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=15 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/soft/logs/bak -Xloggc:/data/soft/logs/gc.log.20230703_064617 -Djava.net.preferIPv4Stack=true -classpath /手动打码/WEB-INF/classes:/手动打码/WEB-INF/lib/* com.uxin.zb.bootstrap.Provider
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据提供的信息，这是关于Tomcat服务器的启动命令和参数配置。下面是对该命令和参数的分析：</p><ul><li><code>-Xms12g</code>：设置JVM的初始堆大小为12GB。</li><li><code>-Xmx12g</code>：设置JVM的最大堆大小为12GB。</li><li><code>-Xmn3g</code>：设置新生代（Young Generation）的大小为3GB。</li><li><code>-Xss512k</code>：设置线程栈大小为512KB。</li><li><code>-XX:+ExplicitGCInvokesConcurrent</code>：启用显式触发并发垃圾回收。</li><li><code>-XX:+UseParNewGC</code>：指定使用并行的新生代垃圾回收器。</li><li><code>-XX:+UseConcMarkSweepGC</code>：指定使用并发标记-清除（CMS）垃圾回收器。</li><li><code>-XX:CMSInitiatingOccupancyFraction=70</code>：设置CMS垃圾回收器触发标记阈值为70%。</li><li><code>-XX:+UseCMSCompactAtFullCollection</code>：指定在进行完整垃圾收集时使用压缩算法。</li><li><code>-XX:CMSFullGCsBeforeCompaction=5</code>：设置在进行压缩前进行完整垃圾回收的次数为5次。</li><li><code>-XX:+PrintGCDetails</code>：打印详细的垃圾回收信息。</li><li><code>-XX:+PrintGCDateStamps</code>：打印垃圾回收事件的日期时间戳。</li><li><code>-XX:SurvivorRatio=8</code>：设置幸存者空间（Survivor Space）与伊甸园空间（Eden Space）的大小比例为8:1。</li><li><code>-XX:MaxTenuringThreshold=15</code>：设置对象晋升到老年代的最大年龄阈值为15。</li><li><code>-XX:+HeapDumpOnOutOfMemoryError</code>：在发生OutOfMemoryError时生成堆转储文件。</li><li><code>-XX:HeapDumpPath=/data/soft/logs/bak</code>：指定堆转储文件的路径为<code>/data/soft/logs/bak</code>。</li><li><code>-Xloggc:/data/soft/logs/gc.log.20230703_064617</code>：将GC日志输出到<code>/data/soft/logs/gc.log.20230703_064617</code>文件中。</li><li><code>-Djava.net.preferIPv4Stack=true</code>：设置Java虚拟机首选使用IPv4网络栈。</li><li><code>-classpath /手动打码/WEB-INF/classes:/手动打码/WEB-INF/lib/*</code>：指定类路径，包括应用程序的类和依赖库。</li><li><code>com.uxin.zb.bootstrap.Provider</code>：要启动的主类。</li></ul><h2 id="interview-question" tabindex="-1"><a class="header-anchor" href="#interview-question" aria-hidden="true">#</a> interview question</h2><h3 id="didichuxing-1-打车业务" tabindex="-1"><a class="header-anchor" href="#didichuxing-1-打车业务" aria-hidden="true">#</a> didichuxing 1 打车业务</h3><ul><li>项目：你负责那些业务，挑一个你负责的业务说说？</li><li>项目：说一下你的 IM 服务的架构，以及发送消息的整个流程？</li><li>说一下线程池的各个参数的作用，你是怎么设置的？为什么要这样设置？</li><li>多个线程同时执行，多个线程的任务都执行完后，执行一个任务，说思路？</li><li>算法：简单的二进制转换的题；</li></ul><h3 id="didichuxing-2-打车业务" tabindex="-1"><a class="header-anchor" href="#didichuxing-2-打车业务" aria-hidden="true">#</a> didichuxing 2 打车业务</h3><ul><li>项目：你负责那些业务，挑一个你负责的业务说说？</li><li>慢查询优化怎么做的，有哪些方向？</li><li>那些会导致慢查询？</li><li>TCP 断开过程？timewait 在那边？它的作用是什么？</li><li>https 为什么安全？</li><li>一个日志文件，如何用 shell 脚本查询出出现频率最高的 IP 地址；</li><li>滴滴打车，用户打完车后，累加此次的打车里程，需要准确的计算他超过了多少个百分比的用户，怎么设计？</li><li>短链如何设计，如何存储？</li><li>算法：简单的双指针题目；</li></ul><h3 id="xiaohongshu-1-im-方向" tabindex="-1"><a class="header-anchor" href="#xiaohongshu-1-im-方向" aria-hidden="true">#</a> xiaohongshu 1 IM 方向</h3><ul><li>说一下你们的 IM 系统架构，发消息的流程；</li><li>Netty 有那些组件，它们的作用是什么？</li><li>Netty 服务端的启动流程；</li><li>ChannelHandler 如何绑定一个 EventLoop 线程；</li><li>你们 IM 的 ACK 机制是怎么做的；</li><li>说一下你们 IM 的消息的存储机制；</li><li>长连接 CPU 优化怎么做的；</li><li>私聊如何确保一定送达，发送网络不通的情况如何处理；</li><li>ReentrantLock 原理？AQS 原理？</li><li>写一个两个线程交替打印数据的题目；</li></ul><h3 id="ali-sumaitong-1-这个人妥妥的傻呗" tabindex="-1"><a class="header-anchor" href="#ali-sumaitong-1-这个人妥妥的傻呗" aria-hidden="true">#</a> Ali sumaitong 1 这个人妥妥的傻呗</h3><ul><li>说一下你们 IM 服务？</li><li>说一下你的直播服务？主要做什么的，有那些业务模块？</li><li>说一下你们线程池怎么用的，拒绝策略是什么样的？拒绝的任务怎么处理？</li><li>你们怎么保证送礼业务的最终一致性；</li><li>你做了那些优化？我说了优化机器的 CPU 使用率？</li><li>为什么大主播开播你们服务的 CPU 就上去了？QPS 增高和 CPU 有什么联系？</li><li>你怎么发现 CPU 增高的？ arthas 的 profiler 火焰图；</li><li>CPU 的峰刺你是怎么优化的？怎么定位的？</li><li>你做过 JVM 调优吗？有线上定位 JVM 问题的经验吗？</li><li>你说解决了内存泄露，为什么内存泄漏了，有哪些 GC Root 对象，整体分析一下；</li></ul>`,257),h=[m];function g(b,f){return s(),a("div",null,h)}const C=n(v,[["render",g],["__file","HowToSayResume.html.vue"]]);export{C as default};
