import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-89fa67df.js";const p={},e=t(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2021年6月20日23:32:33</td></tr></tbody></table><h2 id="resultcontext" tabindex="-1"><a class="header-anchor" href="#resultcontext" aria-hidden="true">#</a> ResultContext</h2><p>ResultContext接口表示结果上下文，每个对象对应数据库操作的一条数据。</p><p><strong>有一个默认的实现类DefaultResultContext</strong></p><p>成员变量如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 结果对象</span>
<span class="token keyword">private</span> <span class="token class-name">T</span> resultObject<span class="token punctuation">;</span>
<span class="token comment">// 表明当前对象是第几个结果对象</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> resultCount<span class="token punctuation">;</span>
<span class="token comment">// 是否使用完毕，true-表示结果已经被取走</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> stopped<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resulthandler" tabindex="-1"><a class="header-anchor" href="#resulthandler" aria-hidden="true">#</a> ResultHandler</h2><p>ResultHandler对象表示结果处理器，数据库操作后得到的结果会交给它处理，也就是处理ResultContext。</p><p>它有两个实现类DefaultMapResultHandler和DefaultResultHandler。</p><p>DefaultMapResultHandler：处理Map类型的结果。</p><p>DefaultResultHandler：处理List类型的结果。</p><p>关于DefaultMapResultHandler</p><p>成员变量如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Map形式的映射结果</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> mappedResults<span class="token punctuation">;</span>
<span class="token comment">// Map的键。由用户指定，是结果对象中的某个属性名</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> mapKey<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ObjectFactory</span> objectFactory<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ObjectWrapperFactory</span> objectWrapperFactory<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReflectorFactory</span> reflectorFactory<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理ResultContext对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 处理一个结果
 *
 * <span class="token keyword">@param</span> <span class="token parameter">context</span> 一个结果
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token class-name">ResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从结果上下文中取出结果对象</span>
    <span class="token keyword">final</span> <span class="token class-name">V</span> value <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResultObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获得结果对象的元对象</span>
    <span class="token keyword">final</span> <span class="token class-name">MetaObject</span> mo <span class="token operator">=</span> <span class="token class-name">MetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> objectFactory<span class="token punctuation">,</span> objectWrapperFactory<span class="token punctuation">,</span> reflectorFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// TODO is that assignment always true?</span>
    <span class="token comment">// 基于元对象取出key对应的值</span>
    <span class="token keyword">final</span> <span class="token class-name">K</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">)</span> mo<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>mapKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mappedResults<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而DefaultResultHandler的就比较简单了</p><p>成员变量就是一个List集合</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>处理ResultContext对象就是直接添加到List集合中去。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token class-name">ResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getResultObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resultsetwrapper" tabindex="-1"><a class="header-anchor" href="#resultsetwrapper" aria-hidden="true">#</a> ResultSetWrapper</h2><p>顾名思义ResultSetWrapper就是对JDK的ResultSet对象的封装，装饰器模式。</p><h2 id="resultsethandler" tabindex="-1"><a class="header-anchor" href="#resultsethandler" aria-hidden="true">#</a> ResultSetHandler</h2><p>ResultSetHandler是用于处理结果集的，嵌套结果集和普通结果集都是这个类来处理的。</p><p>本篇看一个最简单的流程，同时也是大部分情况走的流程。</p><p>org.apache.ibatis.executor.resultset.DefaultResultSetHandler#handleResultSets方法来处理结果集，针对但结果集的操作会到<code>handleResultSet()</code>方法，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleResultSet</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> multipleResults<span class="token punctuation">,</span> <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parentMapping <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 嵌套的结果</span>
            <span class="token comment">// 向子方法传入parentMapping。处理结果中的记录。</span>
            <span class="token function">handleRowValues</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// defaultResultHandler能够将结果对象聚合成一个List返回</span>
                <span class="token class-name">DefaultResultHandler</span> defaultResultHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResultHandler</span><span class="token punctuation">(</span>objectFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 处理结果中的记录。</span>
                <span class="token function">handleRowValues</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> defaultResultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                multipleResults<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>defaultResultHandler<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">handleRowValues</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// issue #228 (close resultsets)</span>
        <span class="token function">closeResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会调用<code>handleRowValues()</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRowValues</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultMap<span class="token punctuation">.</span><span class="token function">hasNestedResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 前置校验</span>
        <span class="token function">ensureNoRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">checkResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理嵌套映射</span>
        <span class="token function">handleRowValuesForNestedResultMap</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理单层映射</span>
        <span class="token function">handleRowValuesForSimpleResultMap</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关注处理单层映射<code>handleRowValuesForSimpleResultMap()</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleRowValuesForSimpleResultMap</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token class-name">DefaultResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> resultContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 当前要处理的结果集</span>
    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> rsw<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据翻页配置，跳过指定的行</span>
    <span class="token function">skipRows</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 持续处理下一条结果，判断条件为：还有结果需要处理 &amp;&amp; 结果集没有关闭 &amp;&amp; 还有下一条结果</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">shouldProcessMoreRows</span><span class="token punctuation">(</span>resultContext<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>resultSet<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获得最终要使用的resultMap</span>
        <span class="token class-name">ResultMap</span> discriminatedResultMap <span class="token operator">=</span> <span class="token function">resolveDiscriminatedResultMap</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 拿到了一行记录，并且将其转化为一个对象</span>
        <span class="token class-name">Object</span> rowValue <span class="token operator">=</span> <span class="token function">getRowValue</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> discriminatedResultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 把这一行记录转化出的对象存起来</span>
        <span class="token function">storeObject</span><span class="token punctuation">(</span>resultHandler<span class="token punctuation">,</span> resultContext<span class="token punctuation">,</span> rowValue<span class="token punctuation">,</span> parentMapping<span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终会<code>getRowValue()</code>方法将一行记录转换成对象</p><p>首先会反射创建映射的结果集对象，然后会根据自动映射和手动映射给对象的属性赋值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getRowValue</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">String</span> columnPrefix<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">ResultLoaderMap</span> lazyLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultLoaderMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建这一行记录对应的对象</span>
    <span class="token class-name">Object</span> rowValue <span class="token operator">=</span> <span class="token function">createResultObject</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> lazyLoader<span class="token punctuation">,</span> columnPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rowValue <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">hasTypeHandlerForResultObject</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据对象得到其MetaObject</span>
        <span class="token keyword">final</span> <span class="token class-name">MetaObject</span> metaObject <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newMetaObject</span><span class="token punctuation">(</span>rowValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> foundValues <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>useConstructorMappings<span class="token punctuation">;</span>
        <span class="token comment">// 是否允许自动映射未明示的字段</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldApplyAutomaticMappings</span><span class="token punctuation">(</span>resultMap<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 自动映射未明示的字段</span>
            foundValues <span class="token operator">=</span> <span class="token function">applyAutomaticMappings</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> metaObject<span class="token punctuation">,</span> columnPrefix<span class="token punctuation">)</span> <span class="token operator">||</span> foundValues<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 按照明示的字段进行重新映射</span>
        foundValues <span class="token operator">=</span> <span class="token function">applyPropertyMappings</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> metaObject<span class="token punctuation">,</span> lazyLoader<span class="token punctuation">,</span> columnPrefix<span class="token punctuation">)</span> <span class="token operator">||</span> foundValues<span class="token punctuation">;</span>
        foundValues <span class="token operator">=</span> lazyLoader<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> foundValues<span class="token punctuation">;</span>
        rowValue <span class="token operator">=</span> foundValues <span class="token operator">||</span> configuration<span class="token punctuation">.</span><span class="token function">isReturnInstanceForEmptyRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> rowValue <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rowValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在拿到一条记录之后，就会调用org.apache.ibatis.executor.resultset.DefaultResultSetHandler#storeObject方法存储得到的对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">storeObject</span><span class="token punctuation">(</span><span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">DefaultResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> resultContext<span class="token punctuation">,</span> <span class="token class-name">Object</span> rowValue<span class="token punctuation">,</span> <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">,</span> <span class="token class-name">ResultSet</span> rs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentMapping <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 存在父级，则将这一行记录对应的结果对象绑定到父级结果上</span>
        <span class="token function">linkToParents</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> parentMapping<span class="token punctuation">,</span> rowValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用resultHandler存储对象</span>
        <span class="token function">callResultHandler</span><span class="token punctuation">(</span>resultHandler<span class="token punctuation">,</span> resultContext<span class="token punctuation">,</span> rowValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">callResultHandler</span><span class="token punctuation">(</span><span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">DefaultResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> resultContext<span class="token punctuation">,</span> <span class="token class-name">Object</span> rowValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    resultContext<span class="token punctuation">.</span><span class="token function">nextResultObject</span><span class="token punctuation">(</span>rowValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleResult</span><span class="token punctuation">(</span>resultContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","深入浅出Mybatis13：结果集处理.html.vue"]]);export{r as default};
