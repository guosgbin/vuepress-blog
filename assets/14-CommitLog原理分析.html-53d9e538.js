import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-ad2dff0a.js";const e="/assets/一个CommitLog文件的存储效果-59cbb6a2.png",p="/assets/broker接收生产者消息流程-193122bd.png",o={},c=t('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年06月18日23:02:01</td></tr></tbody></table><h2 id="commitlog-的存储方式" tabindex="-1"><a class="header-anchor" href="#commitlog-的存储方式" aria-hidden="true">#</a> CommitLog 的存储方式</h2><p>CommitLog 是<strong>消息主体以及元数据的存储主体</strong>，存储 Producer 端写入的消息主体内容，<strong>消息内容不是定长的</strong>。单个文件大小默认 1G，文件名长度为 20 位，左边补零，剩余为起始偏移量，比如 00000000000000000000 代表了第一个文件，起始偏移量为 0，文件大小为 1G = 1073741824；当第一个文件写满了，第二个文件为 00000000001073741824，起始偏移量为 1073741824 ，以此类推。消息主要是<strong>顺序写入</strong>日志文件，当文件满了，写入下一个文件；</p><p>因为 CommitLog 的文件是存储在磁盘上的，为了提高写入消息的性能，RocketMQ 使用了 mmap 将磁盘文件映射到内存中。映射到的内存到 page cache，现代的操作系统内核被设计为按照 Page 读取文件，每个 Page 的默认大小是 4kb，如果读取的内容名字了 page cache 就直接返回，不会再次读取磁盘了。但是 page cache 也有脏页回写、内存回收、内存置换等情况，RocketMQ 通过内存预热、设定内存不置换等措施来优化。</p><h2 id="commitlog-的存储格式" tabindex="-1"><a class="header-anchor" href="#commitlog-的存储格式" aria-hidden="true">#</a> CommitLog 的存储格式</h2><p>CommitLog 文件的存储效果如下：<img src="'+e+`" alt="一个CommitLog文件的存储效果"></p><p>生产者发送过来的消息长度一般都是不相同的。假如生产者发送过来的消息大于文件的剩余空间，那么此次消息是无法写进该 CommitLog 文件的，此时需要把当前文件的剩余空间大小写到文件尾，占用 4 字节，最后写下文件结束的魔法值，也是占用 4 个字节。</p><p>具体的逻辑在 DefaultAppendMessageCallback#doAppend(long, ByteBuffer, int, MessageExtBrokerInner, PutMessageContext) 中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AppendMessageResult</span> <span class="token function">doAppend</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> fileFromOffset<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> byteBuffer<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxBlank<span class="token punctuation">,</span>
        <span class="token keyword">final</span> <span class="token class-name">MessageExtBrokerInner</span> msgInner<span class="token punctuation">,</span> <span class="token class-name">PutMessageContext</span> putMessageContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token comment">// ...... 省略 ......</span>

        <span class="token comment">// 获取编码后的 buffer</span>
        <span class="token class-name">ByteBuffer</span> preEncodeBuffer <span class="token operator">=</span> msgInner<span class="token punctuation">.</span><span class="token function">getEncodedBuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取消息长度</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> msgLen <span class="token operator">=</span> preEncodeBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Determines whether there is sufficient free space</span>
        <span class="token comment">// 如果消息长度 + END_FILE_MIN_BLANK_LENGTH 大于 CommitLog 文件的空闲空间，则返回 AppendMessageStatus.END_OF_FILE，Broker 会创建一个新的 CommitLog 文件来存储该消息。</span>
        <span class="token comment">// 每个CommitLog文件最少空闲8字节，高4字节存储当前文件的剩余空间，低4字节存储魔数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msgLen <span class="token operator">+</span> <span class="token constant">END_FILE_MIN_BLANK_LENGTH</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxBlank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>msgStoreItemMemory<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 1 TOTALSIZE</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>msgStoreItemMemory<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>maxBlank<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 2 MAGICCODE  文件尾的魔法值</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>msgStoreItemMemory<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token constant">BLANK_MAGIC_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 3 The remaining space may be any value</span>
            <span class="token comment">// Here the length of the specially set maxBlank</span>
            <span class="token keyword">final</span> <span class="token keyword">long</span> beginTimeMills <span class="token operator">=</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            byteBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msgStoreItemMemory<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AppendMessageResult</span><span class="token punctuation">(</span><span class="token class-name">AppendMessageStatus</span><span class="token punctuation">.</span><span class="token constant">END_OF_FILE</span><span class="token punctuation">,</span> wroteOffset<span class="token punctuation">,</span>
                    maxBlank<span class="token punctuation">,</span> <span class="token comment">/* only wrote 8 bytes, but declare wrote maxBlank for compute write position */</span>
                    msgIdSupplier<span class="token punctuation">,</span> msgInner<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    queueOffset<span class="token punctuation">,</span> <span class="token class-name">CommitLog</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTimeMills<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// ...... 省略 其他......</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 CommitLog 文件中单个文件的存储格式，从 CommitLog#calMsgLength 计算消息长度的方法，就可以看到消息的编码规则了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 计算消息总长度
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calMsgLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> sysFlag<span class="token punctuation">,</span> <span class="token keyword">int</span> bodyLength<span class="token punctuation">,</span> <span class="token keyword">int</span> topicLength<span class="token punctuation">,</span> <span class="token keyword">int</span> propertiesLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> bornhostLength <span class="token operator">=</span> <span class="token punctuation">(</span>sysFlag <span class="token operator">&amp;</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">BORNHOST_V6_FLAG</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">8</span> <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> storehostAddressLength <span class="token operator">=</span> <span class="token punctuation">(</span>sysFlag <span class="token operator">&amp;</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">STOREHOSTADDRESS_V6_FLAG</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">8</span> <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> msgLen <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment">//TOTALSIZE</span>
        <span class="token operator">+</span> <span class="token number">4</span> <span class="token comment">//MAGICCODE</span>
        <span class="token operator">+</span> <span class="token number">4</span> <span class="token comment">//BODYCRC</span>
        <span class="token operator">+</span> <span class="token number">4</span> <span class="token comment">//QUEUEID</span>
        <span class="token operator">+</span> <span class="token number">4</span> <span class="token comment">//FLAG</span>
        <span class="token operator">+</span> <span class="token number">8</span> <span class="token comment">//QUEUEOFFSET</span>
        <span class="token operator">+</span> <span class="token number">8</span> <span class="token comment">//PHYSICALOFFSET</span>
        <span class="token operator">+</span> <span class="token number">4</span> <span class="token comment">//SYSFLAG</span>
        <span class="token operator">+</span> <span class="token number">8</span> <span class="token comment">//BORNTIMESTAMP</span>
        <span class="token operator">+</span> bornhostLength <span class="token comment">//BORNHOST</span>
        <span class="token operator">+</span> <span class="token number">8</span> <span class="token comment">//STORETIMESTAMP</span>
        <span class="token operator">+</span> storehostAddressLength <span class="token comment">//STOREHOSTADDRESS</span>
        <span class="token operator">+</span> <span class="token number">4</span> <span class="token comment">//RECONSUMETIMES</span>
        <span class="token operator">+</span> <span class="token number">8</span> <span class="token comment">//Prepared Transaction Offset</span>
        <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token punctuation">(</span>bodyLength <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> bodyLength <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//BODY</span>
        <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> topicLength <span class="token comment">//TOPIC</span>
        <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>propertiesLength <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> propertiesLength <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//propertiesLength</span>
        <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> msgLen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 我们就可以看到 CommitLog 消息存储格式了</p><table><thead><tr><th>写入顺序</th><th>字段</th><th>字段大小（字节）</th><th>数据类型</th><th>字段含义</th></tr></thead><tbody><tr><td>1</td><td>TOTALSIZE</td><td>4</td><td>int</td><td>这个消息的大小</td></tr><tr><td>2</td><td>MAGICCODE</td><td>4</td><td>int</td><td>魔法值</td></tr><tr><td>3</td><td>BODYCRC</td><td>4</td><td>int</td><td>消息体 BODY CRC，当 broker 重启 recover 时会校验</td></tr><tr><td>4</td><td>QUEUEID</td><td>4</td><td>int</td><td>消息队列 id</td></tr><tr><td>5</td><td>FLAG</td><td>4</td><td>int</td><td></td></tr><tr><td>6</td><td>QUEUEOFFSET</td><td>8</td><td>long</td><td>队列逻辑偏移量，ConsumeQueu 文件内的真实偏移量为：QUEUEOFFSET * 20</td></tr><tr><td>7</td><td>PHYSICALOFFSET</td><td>8</td><td>long</td><td>代表消息在 CommitLog 中的物理起始地址偏移量</td></tr><tr><td>8</td><td>SYSFLAG</td><td>4</td><td>int</td><td>系统标记</td></tr><tr><td>9</td><td>BORNTIMESTAMP</td><td>8</td><td>long</td><td>消息生产端（producer）的发送消息时间戳</td></tr><tr><td>10</td><td>bornhost</td><td>8 or 20</td><td>long</td><td>消息生产端（producer）的发送消息的主机地址（address:port） (可能是 ipv6)</td></tr><tr><td>11</td><td>STORETIMESTAMP</td><td>8</td><td>long</td><td>消息在 broker 的存储时间</td></tr><tr><td>12</td><td>storehostAddress</td><td>8 or 20</td><td>long</td><td>消息存储到 broker 的主机地址（address:port） (可能是 ipv6)</td></tr><tr><td>13</td><td>RECONSUMETIMES</td><td>4</td><td>int</td><td>重试消息重试第几次</td></tr><tr><td>14</td><td>Prepared Transaction Offset</td><td>8</td><td>long</td><td>表示的是事务消息位点</td></tr><tr><td>15</td><td>BODYLength</td><td>4</td><td>int</td><td>消息体长度</td></tr><tr><td>16</td><td>BODY</td><td>数组长度</td><td>byte[]</td><td>消息体</td></tr><tr><td>17</td><td>topicLength</td><td>1</td><td>int</td><td>1</td></tr><tr><td>18</td><td>topic</td><td>数组长度</td><td>byte[]</td><td>主题名</td></tr><tr><td>19</td><td>propertiesLength</td><td>2</td><td>short</td><td>扩展信息长度</td></tr><tr><td>20</td><td>properties</td><td>数组长度</td><td>byte[]</td><td>扩展信息</td></tr></tbody></table><h2 id="commitlog-存储消息的流程" tabindex="-1"><a class="header-anchor" href="#commitlog-存储消息的流程" aria-hidden="true">#</a> CommitLog 存储消息的流程</h2><h3 id="broker-处理入口" tabindex="-1"><a class="header-anchor" href="#broker-处理入口" aria-hidden="true">#</a> broker 处理入口</h3><p>生产者发送过来的消息有单个消息和批量消息。</p><ul><li>单个消息有：RequestCode.SEND_MESSAGE 和 RequestCode.SEND_MESSAGE_V2；</li><li>批量消息有：RequestCode.SEND_BATCH_MESSAGE；</li></ul><p>关于单个消息的 RequestCode.SEND_MESSAGE_V2 和前一个的区别是，V2 是提供的消息精简的功能，就是把各个字段的名字长度减少了，如下：</p><p>SendMessageRequestHeaderV2#createSendMessageRequestHeaderV2</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SendMessageRequestHeaderV2</span> <span class="token function">createSendMessageRequestHeaderV2</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SendMessageRequestHeader</span> v1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SendMessageRequestHeaderV2</span> v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendMessageRequestHeaderV2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>a <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>b <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>c <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getDefaultTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>d <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getDefaultTopicQueueNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>e <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>f <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getSysFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>g <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getBornTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>h <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>i <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>j <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>k <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">isUnitMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>l <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">getMaxReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v2<span class="token punctuation">.</span>m <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">isBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> v2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 RequestCode.SEND_MESSAGE_V2 为例，Broker 处理消息的入口在 SendMessageProcessor#asyncSendMessage 方法。</p><h3 id="broker-处理消息" tabindex="-1"><a class="header-anchor" href="#broker-处理消息" aria-hidden="true">#</a> broker 处理消息</h3><p>先看流程图：</p><img src="`+p+`" alt="broker接收生产者消息流程" style="zoom:67%;"><h4 id="sendmessageprocessor-asyncsendmessage" tabindex="-1"><a class="header-anchor" href="#sendmessageprocessor-asyncsendmessage" aria-hidden="true">#</a> SendMessageProcessor#asyncSendMessage</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RemotingCommand</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncSendMessage</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span>
                                                            <span class="token class-name">SendMessageContext</span> mqtraceContext<span class="token punctuation">,</span>
                                                            <span class="token class-name">SendMessageRequestHeader</span> requestHeader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 主要做一些校验，然后准备一个响应的 response 类型的 RemotingCommand 对象</span>
    <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> <span class="token function">preSend</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">SendMessageResponseHeader</span> responseHeader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SendMessageResponseHeader</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">readCustomHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略 ......</span>

    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> queueIdInt <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 producer 发送来的消息的 topic 路由信息</span>
    <span class="token class-name">TopicConfig</span> topicConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTopicConfigManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectTopicConfig</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略 ......</span>

    <span class="token class-name">MessageExtBrokerInner</span> msgInner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageExtBrokerInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setQueueId</span><span class="token punctuation">(</span>queueIdInt<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// ...... 省略 ......</span>

    msgInner<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> origProps <span class="token operator">=</span> <span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">string2messageProperties</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">,</span> origProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setBornTimestamp</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getBornTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setBornHost</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setStoreHost</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStoreHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setReconsumeTimes</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> requestHeader<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> clusterName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">putProperty</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">,</span> <span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_CLUSTER</span><span class="token punctuation">,</span> clusterName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...... 省略 ......</span>

    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageResult</span><span class="token punctuation">&gt;</span></span> putMessageResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> transFlag <span class="token operator">=</span> origProps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_TRANSACTION_PREPARED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>transFlag <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>transFlag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略处理事务消息 ......</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 写入生产端的消息到 broker</span>
        putMessageResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncPutMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">handlePutMessageResultFuture</span><span class="token punctuation">(</span>putMessageResult<span class="token punctuation">,</span> response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> msgInner<span class="token punctuation">,</span> responseHeader<span class="token punctuation">,</span> mqtraceContext<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> queueIdInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法的作用就是封装一下 producer 发送过来的消息的数据，组装成 MessageExtBrokerInner 对象。然后继续调用 DefaultMessageStore#asyncPutMessage 方法</p><h4 id="defaultmessagestore-asyncputmessage" tabindex="-1"><a class="header-anchor" href="#defaultmessagestore-asyncputmessage" aria-hidden="true">#</a> DefaultMessageStore#asyncPutMessage</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncPutMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageExtBrokerInner</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// ...... 省略 broker 状态检查逻辑 ......</span>
    <span class="token comment">// ...... 省略 producer 发送过来的消息的合法性检查逻辑 ......</span>
    <span class="token comment">// ...... 省略其他状态检查逻辑 ......</span>

    <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSystemClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 追加数据到 CommitLog</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageResult</span><span class="token punctuation">&gt;</span></span> putResultFuture <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">asyncPutMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略消息写入的结果处理 ......</span>

    <span class="token keyword">return</span> putResultFuture<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法的主要作用就是提供一些校验，然后调用 commitlog 的写入消息的方法去写消息。</p><h4 id="commitlog-asyncputmessage" tabindex="-1"><a class="header-anchor" href="#commitlog-asyncputmessage" aria-hidden="true">#</a> CommitLog#asyncPutMessage</h4><p>这个方法非常长，这里分步分析，本次省略对延迟消息的分析</p><p><strong>（1）编码消息</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取线程本地变量 putMessageThreadLocal</span>
<span class="token class-name">PutMessageThreadLocal</span> putMessageThreadLocal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>putMessageThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将生产者发送来的消息，编码后保存在线程本地变量中</span>
<span class="token class-name">PutMessageResult</span> encodeResult <span class="token operator">=</span> putMessageThreadLocal<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>encodeResult <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// encode 异常才会到这里，正常情况是返回 null 的</span>
    <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>encodeResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将编码好的消息保存</span>
msg<span class="token punctuation">.</span><span class="token function">setEncodedBuff</span><span class="token punctuation">(</span>putMessageThreadLocal<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encoderBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先使用 PutMessageThreadLocal 对消息进行编码，将编码器放到 ThreadLocal 中是为了保证线程安全，最后将编码后得到的 ByteBuffer 赋值到 msg 的字段中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PutMessageThreadLocal</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">MessageExtEncoder</span> encoder<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">StringBuilder</span> keyBuilder<span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 MessageExtEncoder 编码器，就是按照 broker 中存储消息的 MessageExtBrokerInner 的字段按照顺序依次存到 ByteBuffer 中去</p><p><strong>（2）写入消息到 commitLog 文件</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>putMessageLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//spin or ReentrantLock ,depending on store config</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前顺序写的 MappedFile，最后一个 MappedFile</span>
    <span class="token class-name">MappedFile</span> mappedFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getLastMappedFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录获取锁的时间</span>
    <span class="token keyword">long</span> beginLockTimestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getSystemClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录加锁开启时间</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>beginTimeInLock <span class="token operator">=</span> beginLockTimestamp<span class="token punctuation">;</span>

    <span class="token comment">// Here settings are stored timestamp, in order to ensure an orderly global</span>
    <span class="token comment">// 设置消息的存储时间，保证消息的全局顺序</span>
    msg<span class="token punctuation">.</span><span class="token function">setStoreTimestamp</span><span class="token punctuation">(</span>beginLockTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 条件成立：1 commitLog 目录下是空 2 文件写满了</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> mappedFile <span class="token operator">||</span> mappedFile<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个 MappedFile</span>
        mappedFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getLastMappedFile</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Mark: NewFile may be cause noise</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> mappedFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;create mapped file1 error, topic: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; clientAddr: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getBornHostString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PutMessageResult</span><span class="token punctuation">(</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">CREATE_MAPEDFILE_FAILED</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 正常执行到这里..</span>

    <span class="token comment">// 参数 1：消息</span>
    <span class="token comment">// 参数 2：appendMessageCallback，控制消息那些字段追加到</span>
    result <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">appendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appendMessageCallback<span class="token punctuation">,</span> putMessageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>commitLog 文件是通过 mmap 技术将磁盘文件映射到内存中，通过 FileChannel 的 map 方法映射成 MappedByteBuffer。在 RocketMQ 中将 MappedByteBuffer 封装到 MappedFile 类中了。</p><ul><li>首先需要加锁，保证 commitlog 文件的写入顺序；</li><li>获取当前正在写的 commitlog 文件对应内存映射 MappedByteBuffer；</li><li>最后写入消息到 MappedByteBuffer 中；</li></ul><p><strong>（3）处理消息写入结果</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">PUT_OK</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">END_OF_FILE</span><span class="token operator">:</span>
            <span class="token comment">// 文件尾了，创建新文件</span>
            unlockMappedFile <span class="token operator">=</span> mappedFile<span class="token punctuation">;</span>
            <span class="token comment">// Create a new file, re-write the message</span>
            mappedFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getLastMappedFile</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> mappedFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// XXX: warn and notify me</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;create mapped file2 error, topic: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; clientAddr: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getBornHostString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PutMessageResult</span><span class="token punctuation">(</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">CREATE_MAPEDFILE_FAILED</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 创建新文件后，再次尝试写入</span>
            result <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">appendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appendMessageCallback<span class="token punctuation">,</span> putMessageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">MESSAGE_SIZE_EXCEEDED</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token constant">PROPERTIES_SIZE_EXCEEDED</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PutMessageResult</span><span class="token punctuation">(</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">MESSAGE_ILLEGAL</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">UNKNOWN_ERROR</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PutMessageResult</span><span class="token punctuation">(</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">UNKNOWN_ERROR</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PutMessageResult</span><span class="token punctuation">(</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">.</span><span class="token constant">UNKNOWN_ERROR</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算加锁的总耗时</span>
    elapsedTimeInLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMessageStore<span class="token punctuation">.</span><span class="token function">getSystemClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginLockTimestamp<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重置时间</span>
    beginTimeInLock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 释放锁</span>
    putMessageLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果某个 commitlog 已经写完了，需要重新创建一个文件并将其映射成 MappedByteBuffer，再次尝试写入到新的 commitlog 文件中。</p><p>还需要释放锁。</p><p><strong>（4）通知刷盘服务</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 通知刷盘线程</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">&gt;</span></span> flushResultFuture <span class="token operator">=</span> <span class="token function">submitFlushRequest</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>commitlog 映射出来的 MappedByteBuffer 是在内存中的，最后需要 os 的异步线程去刷盘，我们可以调用 api 去强制刷盘。这里就是通知刷盘线程去执行刷盘操作。在 RocketMQ 中刷盘分为同步刷盘和异步刷盘，这里知道会去通知刷盘线程就行了，关于同步刷盘和异步刷盘后面会详细分析。</p><p><strong>（5）主从同步</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 通知主从同步线程</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageStatus</span><span class="token punctuation">&gt;</span></span> replicaResultFuture <span class="token operator">=</span> <span class="token function">submitReplicaRequest</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当 commitlog 写入消息成功后，需要去做主从同步的处理。这里后面会详细分析。</p>`,51),l=[c];function u(i,k){return s(),a("div",null,l)}const m=n(o,[["render",u],["__file","14-CommitLog原理分析.html.vue"]]);export{m as default};
