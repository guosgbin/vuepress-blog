const e=JSON.parse('{"key":"v-e53d3640","path":"/EffectiveJava_note/01-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1.html","title":"第一章-创建和销毁对象","lang":"zh-CN","frontmatter":{"title":"第一章-创建和销毁对象","description":"版本 内容 时间 ---- ---- ---------------------- V1 新建 2023年07月13日23:49:21 第一章：创建和销毁对象，主要包含下面 9 条。 1. 用静态工厂方法替代构造器； 2. 遇到多个构造器参数时考虑使用 builder 模式； 3. 用私有构造器或者枚举类型强化 Singleton 属性； 4. 通过私...","head":[["meta",{"property":"og:url","content":"https://blog.guosgbin.cn/EffectiveJava_note/01-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:title","content":"第一章-创建和销毁对象"}],["meta",{"property":"og:description","content":"版本 内容 时间 ---- ---- ---------------------- V1 新建 2023年07月13日23:49:21 第一章：创建和销毁对象，主要包含下面 9 条。 1. 用静态工厂方法替代构造器； 2. 遇到多个构造器参数时考虑使用 builder 模式； 3. 用私有构造器或者枚举类型强化 Singleton 属性； 4. 通过私..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-14T06:59:35.000Z"}],["meta",{"property":"article:author","content":"超威蓝猫 Dylan Kwok"}],["meta",{"property":"article:modified_time","content":"2023-07-14T06:59:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一章-创建和销毁对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-14T06:59:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"超威蓝猫 Dylan Kwok\\",\\"url\\":\\"\\",\\"email\\":\\"guosgbin@163.com\\"}]}"]]},"headers":[{"level":2,"title":"用静态工厂方法替代构造器","slug":"用静态工厂方法替代构造器","link":"#用静态工厂方法替代构造器","children":[{"level":3,"title":"静态工厂方法的优点","slug":"静态工厂方法的优点","link":"#静态工厂方法的优点","children":[]},{"level":3,"title":"静态工厂方法的缺点以及弥补方式","slug":"静态工厂方法的缺点以及弥补方式","link":"#静态工厂方法的缺点以及弥补方式","children":[]}]},{"level":2,"title":"遇到多个构造器参数时考虑使用 builder 模式","slug":"遇到多个构造器参数时考虑使用-builder-模式","link":"#遇到多个构造器参数时考虑使用-builder-模式","children":[{"level":3,"title":"静态工厂和构造器的缺点","slug":"静态工厂和构造器的缺点","link":"#静态工厂和构造器的缺点","children":[]},{"level":3,"title":"建造者 builder 模式","slug":"建造者-builder-模式","link":"#建造者-builder-模式","children":[]},{"level":3,"title":"类层次的建造者模式","slug":"类层次的建造者模式","link":"#类层次的建造者模式","children":[]},{"level":3,"title":"builder 模式应用场景","slug":"builder-模式应用场景","link":"#builder-模式应用场景","children":[]},{"level":3,"title":"builder 模式的优缺点","slug":"builder-模式的优缺点","link":"#builder-模式的优缺点","children":[]}]},{"level":2,"title":"用私有构造器或者枚举类型强化 Singleton 属性","slug":"用私有构造器或者枚举类型强化-singleton-属性","link":"#用私有构造器或者枚举类型强化-singleton-属性","children":[{"level":3,"title":"实现单例的两种写法","slug":"实现单例的两种写法","link":"#实现单例的两种写法","children":[]},{"level":3,"title":"防止反序列化破坏单例","slug":"防止反序列化破坏单例","link":"#防止反序列化破坏单例","children":[]},{"level":3,"title":"使用枚举实现单例模式","slug":"使用枚举实现单例模式","link":"#使用枚举实现单例模式","children":[]}]},{"level":2,"title":"通过私有构造器强化不可实例化的能力","slug":"通过私有构造器强化不可实例化的能力","link":"#通过私有构造器强化不可实例化的能力","children":[]},{"level":2,"title":"优先考虑依赖注入来引用资源","slug":"优先考虑依赖注入来引用资源","link":"#优先考虑依赖注入来引用资源","children":[]},{"level":2,"title":"避免创建不必要的对象","slug":"避免创建不必要的对象","link":"#避免创建不必要的对象","children":[]},{"level":2,"title":"消除过期的对象引用","slug":"消除过期的对象引用","link":"#消除过期的对象引用","children":[{"level":3,"title":"隐蔽的内存泄漏问题及解决方案","slug":"隐蔽的内存泄漏问题及解决方案","link":"#隐蔽的内存泄漏问题及解决方案","children":[]},{"level":3,"title":"注意点","slug":"注意点","link":"#注意点","children":[]},{"level":3,"title":"简易栈的问题以及解决方案","slug":"简易栈的问题以及解决方案","link":"#简易栈的问题以及解决方案","children":[]},{"level":3,"title":"RocketMQ 中的案例","slug":"rocketmq-中的案例","link":"#rocketmq-中的案例","children":[]}]},{"level":2,"title":"避免使用终结方法和清除方法","slug":"避免使用终结方法和清除方法","link":"#避免使用终结方法和清除方法","children":[]},{"level":2,"title":"try-with-resources 优先于 try-finally","slug":"try-with-resources-优先于-try-finally","link":"#try-with-resources-优先于-try-finally","children":[]}],"git":{"createdTime":1689317975000,"updatedTime":1689317975000,"contributors":[{"name":"Dylan Kwok","email":"guosgbin@163.com","commits":1}]},"readingTime":{"minutes":18.79,"words":5636},"filePathRelative":"EffectiveJava_note/01-创建和销毁对象.md","localizedDate":"2023年7月14日","copyright":{"author":"超威蓝猫 Dylan Kwok"},"autoDesc":true}');export{e as data};
