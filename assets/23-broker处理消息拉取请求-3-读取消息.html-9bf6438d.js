import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-1d017c6a.js";const t="/assets/broker处理拉消息请求-读取消息-0452d7c7.png",p="/assets/broker处理消息拉取总流程-baac072d.png",o={},c=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年06月24日18:37:40</td></tr></tbody></table><h2 id="broker-读取消息入口" tabindex="-1"><a class="header-anchor" href="#broker-读取消息入口" aria-hidden="true">#</a> broker 读取消息入口</h2><p>Consumer 发送拉消息的 RPC 请求，在 broker 端是 PullMessageProcessor#processRequest 方法处理的，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">RemotingCommand</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">boolean</span> brokerAllowSuspend<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">RemotingCommandException</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// ...... 省略 ......</span>

    <span class="token comment">// 从存储模块获取消息 核心入口</span>
    <span class="token keyword">final</span> <span class="token class-name">GetMessageResult</span> getMessageResult <span class="token operator">=</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getMaxMsgNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> messageFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略消息处理 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到消息读取就是调用 DefaultMessageStore#getMessage 方法，这个方法比较长，逻辑比较复杂，分步分析。</p><h2 id="broker-读取消息" tabindex="-1"><a class="header-anchor" href="#broker-读取消息" aria-hidden="true">#</a> broker 读取消息</h2><p>DefaultMessageStore#getMessage， 先看流程图</p><p><img src="`+t+`" alt="broker处理拉消息请求-读取消息"></p><h3 id="定义消息读取的返回数据" tabindex="-1"><a class="header-anchor" href="#定义消息读取的返回数据" aria-hidden="true">#</a> 定义消息读取的返回数据</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 查询开始时间</span>
<span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSystemClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// status 查询结果状态，先给个默认值</span>
<span class="token class-name">GetMessageStatus</span> status <span class="token operator">=</span> <span class="token class-name">GetMessageStatus</span><span class="token punctuation">.</span><span class="token constant">NO_MESSAGE_IN_QUEUE</span><span class="token punctuation">;</span>
<span class="token comment">// nextBeginOffset 客户端下一次 pull 时使用的位点信息，默认值，后面拉取到消息后就会修改</span>
<span class="token comment">// 待查找队列的偏移量</span>
<span class="token keyword">long</span> nextBeginOffset <span class="token operator">=</span> offset<span class="token punctuation">;</span>
<span class="token comment">// 当前消息队列的最小的逻辑 offset，这里的单位是一个 ConsumeQueueData 也就是 20 个字节</span>
<span class="token keyword">long</span> minOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 当前消息队列的最大 offset</span>
<span class="token keyword">long</span> maxOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// lazy init when find msg.</span>
<span class="token comment">// 查询结果对象</span>
<span class="token class-name">GetMessageResult</span> getResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要就是定义一些方法返回值 GetMessageResult 的一些参数</p><h3 id="获取-commitlog-的最大消息物理偏移量" tabindex="-1"><a class="header-anchor" href="#获取-commitlog-的最大消息物理偏移量" aria-hidden="true">#</a> 获取 CommitLog 的最大消息物理偏移量</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取 commitLog 最大的物理偏移量，当前正在顺序写的文件，文件名long 值+顺序写文件的 position</span>
<span class="token keyword">final</span> <span class="token keyword">long</span> maxOffsetPy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">getMaxOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 CommitLog 的最大消息物理偏移量，用于后面判断 Consumer 请求拉取的消息的偏移量是否合法。</p><h3 id="获取-consumequeue" tabindex="-1"><a class="header-anchor" href="#获取-consumequeue" aria-hidden="true">#</a> 获取 ConsumeQueue</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConsumeQueue</span> consumeQueue <span class="token operator">=</span> <span class="token function">findConsumeQueue</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>consumeQueue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取 COnsumeQueue 的最大最小的逻辑偏移量</span>
    minOffset <span class="token operator">=</span> consumeQueue<span class="token punctuation">.</span><span class="token function">getMinOffsetInQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    maxOffset <span class="token operator">=</span> consumeQueue<span class="token punctuation">.</span><span class="token function">getMaxOffsetInQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// ...... 省略处理 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 topic 和 queueId 获取对应的 ConsumeQueue，每个 topic 的每个 queueId 都有属于自己的 ConsumeQueue 文件。然后获取当前 ConsumeQueue 的最小逻辑偏移量和最大逻辑偏移量，后面会根据这两个偏移量来判断 Consumer 请求的偏移量是否合法。</p><h3 id="异常偏移量处理" tabindex="-1"><a class="header-anchor" href="#异常偏移量处理" aria-hidden="true">#</a> 异常偏移量处理</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>maxOffset <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    status <span class="token operator">=</span> <span class="token class-name">GetMessageStatus</span><span class="token punctuation">.</span><span class="token constant">NO_MESSAGE_IN_QUEUE</span><span class="token punctuation">;</span>
    nextBeginOffset <span class="token operator">=</span> <span class="token function">nextOffsetCorrection</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> minOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    status <span class="token operator">=</span> <span class="token class-name">GetMessageStatus</span><span class="token punctuation">.</span><span class="token constant">OFFSET_TOO_SMALL</span><span class="token punctuation">;</span>
    nextBeginOffset <span class="token operator">=</span> <span class="token function">nextOffsetCorrection</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> minOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">==</span> maxOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    status <span class="token operator">=</span> <span class="token class-name">GetMessageStatus</span><span class="token punctuation">.</span><span class="token constant">OFFSET_OVERFLOW_ONE</span><span class="token punctuation">;</span>
    nextBeginOffset <span class="token operator">=</span> <span class="token function">nextOffsetCorrection</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&gt;</span> maxOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    status <span class="token operator">=</span> <span class="token class-name">GetMessageStatus</span><span class="token punctuation">.</span><span class="token constant">OFFSET_OVERFLOW_BADLY</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> minOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nextBeginOffset <span class="token operator">=</span> <span class="token function">nextOffsetCorrection</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> minOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        nextBeginOffset <span class="token operator">=</span> <span class="token function">nextOffsetCorrection</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> maxOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
 	<span class="token comment">// ...... 省略正常偏移量的 读取消息的处理 ...... </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面有 5 个分支，最后 else 分支是正常的偏移量，会去读取消息。前面的 4 个分支都是 Consumer 请求拉取的偏移量是异常的，需要做一些校正动作。</p><ul><li><code>maxOffset == 0</code>：说明根据 topic 和 queueId 获取的 ConsumeQueue 是新建的，也就是没有数据，需要校正 Consumer 下次拉取的偏移量为 0，也就是建议从 ConsumeQueue 的第一个 ConsumeQueueData 开始消费；</li><li><code>offset &lt; minOffset</code>：说明 ConsumeQueue 中没有 Consumer 需要的偏移量的消息，有可能是被清理了，这时需要校正 Consumer 下次拉取的偏移量为 ConsumeQueue 的最小逻辑偏移量；</li><li><code>offset == maxOffset</code>：Consumer 需要拉取的消息和 ConsumeQueue 最大的逻辑消息量持平，说明 Consumer 的消费进度和队列的消息持平了，这时是拉取不到消息的，然后也没有做别的处理，后面会退出查找消息的方法；</li><li><code>offset &gt; maxOffset</code>：说明 Consumer 需要拉取的消息的偏移量比 ConsumeQueue 的最大逻辑偏移量还大，肯定是拉取不到消息的，这里也需要校正 Consumer 下次拉取的偏移量；</li></ul><p>上面 4 个分支都是异常的偏移量，是不会走真正的查询消息操作的，会封装返回值从方法返回。</p><h3 id="读取消息流程" tabindex="-1"><a class="header-anchor" href="#读取消息流程" aria-hidden="true">#</a> 读取消息流程</h3><h4 id="获取-consumequeue-内存切片" tabindex="-1"><a class="header-anchor" href="#获取-consumequeue-内存切片" aria-hidden="true">#</a> 获取 ConsumeQueue 内存切片</h4><p><strong>（1）第一步：获取 Consumer 此次拉取的消息的起始的逻辑偏移量对应的 MappedFile 文件的内存切片。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SelectMappedBufferResult</span> bufferConsumeQueue <span class="token operator">=</span> consumeQueue<span class="token punctuation">.</span><span class="token function">getIndexBuffer</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 SelectMappedBufferResult 的属性如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectMappedBufferResult</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> startOffset<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> byteBuffer<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">MappedFile</span> mappedFile<span class="token punctuation">;</span> 
    
    <span class="token comment">// ...... 省略 .....</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ByteBuffer byteBuffer</code>：切片出来的内存切片；</li><li><code>int size</code>：切片出来的大小；</li><li><code>MappedFile mappedFile</code>：当前内存切片属于哪一个 MappedFile；</li><li><code>long startOffset</code>：当前内存切片在 MappedFile 上的起始偏移量；</li></ul><h4 id="for-循环-读取-consumequeuedata" tabindex="-1"><a class="header-anchor" href="#for-循环-读取-consumequeuedata" aria-hidden="true">#</a> for 循环-读取 ConsumeQueueData</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bufferConsumeQueue<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> maxFilterMessageCount<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从切片中读取 20 个字节</span>
    <span class="token comment">// 消息物理偏移量</span>
    <span class="token keyword">long</span> offsetPy <span class="token operator">=</span> bufferConsumeQueue<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息大小</span>
    <span class="token keyword">int</span> sizePy <span class="token operator">=</span> bufferConsumeQueue<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> tagsCode <span class="token operator">=</span> bufferConsumeQueue<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    maxPhyOffsetPulling <span class="token operator">=</span> offsetPy<span class="token punctuation">;</span>
 
    <span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经分析过很多次，一个 ConsumeQueueData 数据占用 20 字节：</p><ul><li>消息在 CommitLog 文件中的物理偏移量，占用 8 字节；</li><li>消息的大小，占用 4 字节；</li><li>消息的 tag 的哈希值，占用 8 字节；</li></ul><p>在这里就是从内存切片中一步步的读取每个 ConsumeQueueData 内的数据，每次循环读取 20 个字节。</p><h4 id="for-循环-判断冷热数据" tabindex="-1"><a class="header-anchor" href="#for-循环-判断冷热数据" aria-hidden="true">#</a> for 循环-判断冷热数据</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 检查是否是冷热数据</span>
<span class="token comment">// 参数 1：本次循环处理的 consumeQueueData 代表的消息的物理偏移量</span>
<span class="token comment">// 参数 2：当前 broker 节点的 commitLog 的最大物理偏移量</span>
<span class="token keyword">boolean</span> isInDisk <span class="token operator">=</span> <span class="token function">checkInDiskByCommitOffset</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">,</span> maxOffsetPy<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断当前读取的数据是冷数据还是热数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkInDiskByCommitOffset</span><span class="token punctuation">(</span><span class="token keyword">long</span> offsetPy<span class="token punctuation">,</span> <span class="token keyword">long</span> maxOffsetPy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> memory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">StoreUtil</span><span class="token punctuation">.</span><span class="token constant">TOTAL_PHYSICAL_MEMORY_SIZE</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getAccessMessageInMemoryMaxRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>maxOffsetPy <span class="token operator">-</span> offsetPy<span class="token punctuation">)</span> <span class="token operator">&gt;</span> memory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>messageStoreConfig.getAccessMessageInMemoryMaxRatio()</code> 默认值给的是 40；</li><li><code>StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE</code> 是当前物理机内存的大小，比如 16G；</li><li>如果当前拉取的消息的偏移量是 A，CommitLog 的最大消息偏移量是 B，如果 <code>B -A &gt; 0.4 * 物理机内存</code>，就被认为是冷数据；</li></ul><h4 id="for-循环-判断是否跳出循环" tabindex="-1"><a class="header-anchor" href="#for-循环-判断是否跳出循环" aria-hidden="true">#</a> for 循环-判断是否跳出循环</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 控制是否跳出循环</span>
<span class="token comment">// 参数 1：本次循环 ConsumeQueueData表示消息大小</span>
<span class="token comment">// 参数 2：maxMsgNums 32</span>
<span class="token comment">// 参数 3：本次查询已经获取的消息总 size</span>
<span class="token comment">// 参数 4：本次查询已经获取的消息个数</span>
<span class="token comment">// 参数 5：本次循环存储的 ConsumeQueueData 是否是冷热数据</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isTheBatchFull</span><span class="token punctuation">(</span>sizePy<span class="token punctuation">,</span> maxMsgNums<span class="token punctuation">,</span> getResult<span class="token punctuation">.</span><span class="token function">getBufferTotalSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> getResult<span class="token punctuation">.</span><span class="token function">getMessageCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isInDisk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这部分是控制是否跳出 for 循环的，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isTheBatchFull</span><span class="token punctuation">(</span><span class="token keyword">int</span> sizePy<span class="token punctuation">,</span> <span class="token keyword">int</span> maxMsgNums<span class="token punctuation">,</span> <span class="token keyword">int</span> bufferTotal<span class="token punctuation">,</span> <span class="token keyword">int</span> messageTotal<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isInDisk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 条件成立说明本次 pull 消息，还未拉取到任何东西，需要外层 for 循环继续，返回 false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> bufferTotal <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">==</span> messageTotal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 条件成立，说明结果对象内消息数已经够量（maxMsgNums）</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxMsgNums <span class="token operator">&lt;=</span> messageTotal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isInDisk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 冷数据拉消息最多拉取 64kb 消息</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bufferTotal <span class="token operator">+</span> sizePy<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getMaxTransferBytesOnMessageInDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 冷数据拉消息最多 8 条消息</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageTotal <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getMaxTransferCountOnMessageInDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 热数据最多拉取 256kb 消息</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bufferTotal <span class="token operator">+</span> sizePy<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getMaxTransferBytesOnMessageInMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 热数据最多拉取 32 条消息</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageTotal <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getMaxTransferCountOnMessageInMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很简单，没什么好分析了，直接看代码的注释就行了。</p><h4 id="for-循环-消息过滤" tabindex="-1"><a class="header-anchor" href="#for-循环-消息过滤" aria-hidden="true">#</a> for 循环-消息过滤</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 服务器按照消息 tagCode 进行过滤</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>messageFilter <span class="token operator">!=</span> <span class="token keyword">null</span>
    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>messageFilter<span class="token punctuation">.</span><span class="token function">isMatchedByConsumeQueue</span><span class="token punctuation">(</span>isTagsCodeLegal <span class="token operator">?</span> tagsCode <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> extRet <span class="token operator">?</span> cqExtUnit <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>getResult<span class="token punctuation">.</span><span class="token function">getBufferTotalSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        status <span class="token operator">=</span> <span class="token class-name">GetMessageStatus</span><span class="token punctuation">.</span><span class="token constant">NO_MATCHED_MESSAGE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>broker 过滤主要是按照 tagCode，也就是 tag 的哈希值来进行过滤，但是哈希值可能会出现重复，所以 Consumer 在真正拉取到消息后还会根据 tag 值去做过滤的。</p><h4 id="for-循环-从-commitlog-读取数据" tabindex="-1"><a class="header-anchor" href="#for-循环-从-commitlog-读取数据" aria-hidden="true">#</a> for 循环-从 CommitLog 读取数据</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 根据 ConsumeQueueData 的offsetPy和 ConsumeQueueData的sizePy 到 commitLog 查询出这条 msg</span>
<span class="token class-name">SelectMappedBufferResult</span> selectResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 什么时候 selectResult 会是 null？  刚刚好执行了commitLog过期的任务，将包含 offetPy的文件删除了</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> selectResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>getResult<span class="token punctuation">.</span><span class="token function">getBufferTotalSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        status <span class="token operator">=</span> <span class="token class-name">GetMessageStatus</span><span class="token punctuation">.</span><span class="token constant">MESSAGE_WAS_REMOVING</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取包含该 offsetPy 数据文件的下一个数据文件的文件名，翻页</span>
    nextPhyFileStartOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">rollNextFile</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这部分就是通过 ConsumeQueue 得到消息的物理偏移量和消息大小，就去 CommitLog 读取真正的消息了，得到某个消息的内存切片 SelectMappedBufferResult，如果没有找到，说明某个 CommitLog 文件可能由于过期被删除了，这时读取下一个 CommitLog 数据文件即可。</p><h4 id="for-循环-将查询的数据添加到-getmessageresult" tabindex="-1"><a class="header-anchor" href="#for-循环-将查询的数据添加到-getmessageresult" aria-hidden="true">#</a> for 循环-将查询的数据添加到 GetMessageResult</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 将本次循环查询出来的 msg，加入</span>
getResult<span class="token punctuation">.</span><span class="token function">addMessage</span><span class="token punctuation">(</span>selectResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
status <span class="token operator">=</span> <span class="token class-name">GetMessageStatus</span><span class="token punctuation">.</span><span class="token constant">FOUND</span><span class="token punctuation">;</span>
<span class="token comment">// 设置为MIN_VALUE，避免走上面跳过期的 ConsumeQueueData 的逻辑</span>
nextPhyFileStartOffset <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算下次拉取的消息偏移量和broker" tabindex="-1"><a class="header-anchor" href="#计算下次拉取的消息偏移量和broker" aria-hidden="true">#</a> 计算下次拉取的消息偏移量和broker</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// nextBeginOffset 客户端下一次 pull 时使用的位点信息</span>
<span class="token comment">// pull.offset + 上面 for 循环读取过的 ConsumeQueueData 的字节数/20</span>
nextBeginOffset <span class="token operator">=</span> offset <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// diff = commitLog 的最大物理偏移量 - 本次拉消息最后一条消息的物理偏移量</span>
<span class="token keyword">long</span> diff <span class="token operator">=</span> maxOffsetPy <span class="token operator">-</span> maxPhyOffsetPulling<span class="token punctuation">;</span>
<span class="token comment">// 40% 系统内存</span>
<span class="token keyword">long</span> memory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">StoreUtil</span><span class="token punctuation">.</span><span class="token constant">TOTAL_PHYSICAL_MEMORY_SIZE</span>
    <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getAccessMessageInMemoryMaxRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// diff &gt; memory</span>
<span class="token comment">// -&gt; true的话，表示本轮查询最后一条消息是冷数据，broker 服务器建议客户端下一次 pull 时到 slave 节点</span>
<span class="token comment">// -&gt; false的话，表示本轮查询最后一条消息是热数据，broker 服务器建议客户端下一次 pull 时到 master 节点</span>
getResult<span class="token punctuation">.</span><span class="token function">setSuggestPullingFromSlave</span><span class="token punctuation">(</span>diff <span class="token operator">&gt;</span> memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跳出 for 循环后，就需要计算一些返回值需要的数据了，这里主要计算的就是两个：</p><ul><li>nextBeginOffset：表示之前的消息已经被拉取了，建议消费者下次拉取消息的时候从该逻辑偏移量拉取消息；</li><li>SuggestPullingFromSlave：主要是根据当前拉取的最后一个消息是否是冷热数据来判断的，如果是冷数据那么建议下次拉取消息到 slave 节点去拉取，防止 master 节点压力过大；如果是热数据还是从 master 节点读取。</li></ul><h3 id="封装返回值" tabindex="-1"><a class="header-anchor" href="#封装返回值" aria-hidden="true">#</a> 封装返回值</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>getResult<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置客户端1下一次 pull 时的 offset</span>
getResult<span class="token punctuation">.</span><span class="token function">setNextBeginOffset</span><span class="token punctuation">(</span>nextBeginOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
getResult<span class="token punctuation">.</span><span class="token function">setMaxOffset</span><span class="token punctuation">(</span>maxOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
getResult<span class="token punctuation">.</span><span class="token function">setMinOffset</span><span class="token punctuation">(</span>minOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>从存储模块读取消息的流程非常长，主要的思想就是从 ConsumeQueue 中读取 topic 和 queueId 对应的ConsumeQueueData，从中获取消息在 CommitLog 中的物理偏移量、消息大小、tag 的哈希值，通过这些参数去 CommitLog 中读取真正的消息返回。</p><p>这里给上，整个 broker 处理消息拉取的流程图：</p><p><img src="`+p+'" alt="broker处理消息拉取总流程"></p>',62),l=[c];function u(i,r){return s(),a("div",null,l)}const m=n(o,[["render",u],["__file","23-broker处理消息拉取请求-3-读取消息.html.vue"]]);export{m as default};
