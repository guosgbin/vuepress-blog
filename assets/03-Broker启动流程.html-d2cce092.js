import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as t}from"./app-2523771a.js";const e="/assets/Broker启动流程-d3a8ebeb.png",p={},o=t(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年07月28日22:07:31</td></tr><tr><td>V2</td><td>重构</td><td>2023年06月06日22:42:50</td></tr></tbody></table><h2 id="broker-概述" tabindex="-1"><a class="header-anchor" href="#broker-概述" aria-hidden="true">#</a> Broker 概述</h2><p>BrokerServer：<strong>Broker 主要负责消息的存储、投递和查询以及服务高可用保证</strong>，为了实现这些功能，Broker 包含了以下几个重要子模块。</p><ol><li><strong>Remoting Module</strong>：整个 Broker 的实体，负责处理来自 Client 端的请求；</li><li><strong>Client Manager</strong>：负责管理客户端( Producer / Consumer )和维护 Consumer 的 Topic 订阅信息；</li><li><strong>Store Service</strong>：提供方便简单的 API 接口处理消息存储到物理硬盘和查询功能；</li><li><strong>HA Service</strong>：高可用服务，提供 Master Broker 和 Slave Broker 之间的数据同步功能；</li><li><strong>Index Service</strong>：根据特定的 Message key 对投递到Broker的消息进行索引服务，以提供消息的快速查询；</li></ol><p>Broker 的部署：在 Master-Slave 架构中，Broker 分为 Master 与 Slave。一个 Master 可以对应多个 Slave，但是一个 Slave 只能对应一个 Master。Master 与 Slave 的对应关系通过指定相同的 BrokerName，不同的 BrokerId 来定义，BrokerId为 0 表示 Master，非 0 表示 Slave。Master 也可以部署多个。</p><h2 id="broker-启动的入口" tabindex="-1"><a class="header-anchor" href="#broker-启动的入口" aria-hidden="true">#</a> Broker 启动的入口</h2><p>Broker 和 NameServer 的启动流程和代码都十分相似。</p><p>入口在：org.apache.rocketmq.broker.BrokerStartup#main</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">start</span><span class="token punctuation">(</span><span class="token function">createBrokerController</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BrokerController</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">BrokerController</span> controller<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            controller<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> tip <span class="token operator">=</span> <span class="token string">&quot;The broker[&quot;</span> <span class="token operator">+</span> controller<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span>
                <span class="token operator">+</span> controller<span class="token punctuation">.</span><span class="token function">getBrokerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] boot success. serializeType=&quot;</span> <span class="token operator">+</span> <span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token function">getSerializeTypeConfigInThisServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> controller<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tip <span class="token operator">+=</span> <span class="token string">&quot; and name server is &quot;</span> <span class="token operator">+</span> controller<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> tip<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> controller<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键就是创建 BrokerController 对象，然后调用它的启动方法启动 broker。</p><h2 id="broker-启动流程图" tabindex="-1"><a class="header-anchor" href="#broker-启动流程图" aria-hidden="true">#</a> Broker 启动流程图</h2><ul><li><p>首先是创建了四个配置对象：</p><ul><li><p>创建 BrokerConfig 对象，这是 Broker 自己运行的相关配置；</p></li><li><p>创建 NettyServerConfig 对象，这是作为 Netty 服务端的相关的配置；</p></li><li><p>创建 NettyClientConfig 对象，这是作为 Netty 客户端相关的配置；</p></li><li><p>创建 MessageStoreConfig 对象，这是 Broker 的核心存储模块的一些配置；</p></li></ul></li><li><p>然后读取 -c 指定的配置文件，将其中的配置赋值到上面的配置对象对应的字段中；</p></li><li><p>校验配置中指定的 NameServer 地址的格式是否正确；</p></li><li><p>根据当前 broker 的角色，设置 brokerId；</p></li><li><p>设置 HA 监听端口号；</p></li><li><p>根据创建的四个配置文件创建 BrokerController 对象；</p></li><li><p>初始化 BrokerController 对象；</p></li><li><p>注册 JVM 关闭的钩子函数，主要是关闭一些资源，让服务器平滑关机；</p></li><li><p>启动 Broker 内部的一些组件；</p></li></ul><p><img src="`+e+`" alt="Broker启动流程"></p><h2 id="broker-启动流程" tabindex="-1"><a class="header-anchor" href="#broker-启动流程" aria-hidden="true">#</a> Broker 启动流程</h2><h3 id="创建-brokercontroller" tabindex="-1"><a class="header-anchor" href="#创建-brokercontroller" aria-hidden="true">#</a> 创建 BrokerController</h3><p>BrokerStartup#createBrokerController 方法比较长，这里分小结分析</p><h4 id="创建一些配置对象" tabindex="-1"><a class="header-anchor" href="#创建一些配置对象" aria-hidden="true">#</a> 创建一些配置对象</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建 BrokerConfig，自身运行的配置</span>
<span class="token keyword">final</span> <span class="token class-name">BrokerConfig</span> brokerConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建 NettyServerConfig，是作为 Netty 服务端相关的配置</span>
<span class="token keyword">final</span> <span class="token class-name">NettyServerConfig</span> nettyServerConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyServerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建 NettyClientConfig，是作为 Netty 客户端相关的配置</span>
<span class="token keyword">final</span> <span class="token class-name">NettyClientConfig</span> nettyClientConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

nettyClientConfig<span class="token punctuation">.</span><span class="token function">setUseTLS</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">TLS_ENABLE</span><span class="token punctuation">,</span>
    <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">TlsSystemConfig</span><span class="token punctuation">.</span>tlsMode <span class="token operator">==</span> <span class="token class-name">TlsMode</span><span class="token punctuation">.</span><span class="token constant">ENFORCING</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Netty 服务端的端口设置为 10911</span>
nettyServerConfig<span class="token punctuation">.</span><span class="token function">setListenPort</span><span class="token punctuation">(</span><span class="token number">10911</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// broker 核心存储模块的配置</span>
<span class="token keyword">final</span> <span class="token class-name">MessageStoreConfig</span> messageStoreConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// slave broker 的配置，这个百分比是用于后续校验 broker 中操作的数据是否是冷热数据</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BrokerRole</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span> <span class="token operator">==</span> messageStoreConfig<span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ratio <span class="token operator">=</span> messageStoreConfig<span class="token punctuation">.</span><span class="token function">getAccessMessageInMemoryMaxRatio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>
    messageStoreConfig<span class="token punctuation">.</span><span class="token function">setAccessMessageInMemoryMaxRatio</span><span class="token punctuation">(</span>ratio<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先创建一些 Broker 相关的一些配置对象。Broker 不光要和 NameServer 通信，还要和 Producer 和 Consumer 进行通信。Broker 即是 Netty 服务端，也是一个 Netty 客户端。所以 Broker 需要两个对象分别保存服务端和客户端的配置类。另外，Broker 需要存储消息到磁盘，所以也需要一个存储模块的配置类。</p><ul><li>创建 BrokerConfig 对象，这是 Broker 自己运行的相关配置；</li><li>创建 NettyServerConfig 对象，这是作为 Netty 服务端的相关的配置；</li><li>创建 NettyClientConfig 对象，这是作为 Netty 客户端相关的配置；</li><li>创建 MessageStoreConfig 对象，这是 Broker 的核心存储模块的一些配置；</li></ul><h4 id="读取命令指定的配置项" tabindex="-1"><a class="header-anchor" href="#读取命令指定的配置项" aria-hidden="true">#</a> 读取命令指定的配置项</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 读取配置</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>commandLine<span class="token punctuation">.</span><span class="token function">hasOption</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> file <span class="token operator">=</span> commandLine<span class="token punctuation">.</span><span class="token function">getOptionValue</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configFile <span class="token operator">=</span> file<span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">properties2SystemEnv</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">properties2Object</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> brokerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">properties2Object</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">properties2Object</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> nettyClientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">properties2Object</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> messageStoreConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">BrokerPathConfigHelper</span><span class="token punctuation">.</span><span class="token function">setBrokerConfigPath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如指定了配置文件，那么读取 -c 指定的配置文件，将其中的配置赋值到上面的配置对象对应的字段中。</p><h4 id="校验配置的-nameserver-地址" tabindex="-1"><a class="header-anchor" href="#校验配置的-nameserver-地址" aria-hidden="true">#</a> 校验配置的 NameServer 地址</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取配置的 nameserver 地址，校验配置的地址是否正确</span>
<span class="token class-name">String</span> namesrvAddr <span class="token operator">=</span> brokerConfig<span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> namesrvAddr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> addrArray <span class="token operator">=</span> namesrvAddr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> addr <span class="token operator">:</span> addrArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">RemotingUtil</span><span class="token punctuation">.</span><span class="token function">string2SocketAddress</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>
            <span class="token string">&quot;The Name Server Address[%s] illegal, please set it as follows, \\&quot;127.0.0.1:9876;192.168.0.1:9876\\&quot;%n&quot;</span><span class="token punctuation">,</span>
            namesrvAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Broker 启动要指定 NameServer 服务器的地址，因为 Broker 要和 NameServer 交互，例如发送心跳包。</p><h4 id="设置-brokerid" tabindex="-1"><a class="header-anchor" href="#设置-brokerid" aria-hidden="true">#</a> 设置 brokerId</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设置 brokerId，0 表示主节点，大于 0 表示从节点</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">ASYNC_MASTER</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">SYNC_MASTER</span><span class="token operator">:</span>
        brokerConfig<span class="token punctuation">.</span><span class="token function">setBrokerId</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MASTER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">SLAVE</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerConfig<span class="token punctuation">.</span><span class="token function">getBrokerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Slave&#39;s brokerId must be &gt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">isEnableDLegerCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    brokerConfig<span class="token punctuation">.</span><span class="token function">setBrokerId</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 broker 的 brokerId：</p><ul><li>0 表示主节点；</li><li>大于 0 表示从节点；</li></ul><h4 id="创建-brokercontroller-1" tabindex="-1"><a class="header-anchor" href="#创建-brokercontroller-1" aria-hidden="true">#</a> 创建 BrokerController</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建 BrokerController</span>
<span class="token keyword">final</span> <span class="token class-name">BrokerController</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrokerController</span><span class="token punctuation">(</span>
    brokerConfig<span class="token punctuation">,</span>
    nettyServerConfig<span class="token punctuation">,</span>
    nettyClientConfig<span class="token punctuation">,</span>
    messageStoreConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// remember all configs to prevent discard</span>
controller<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerConfig</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该部分的最后一步就是根据前面创建出来的那些配置对象，调用 BrokerController 的构造方法去创建 BrokerController 了。在 BrokerController 的构造方法中，步骤大概分为三类：</p><ol><li>根据入参赋值 broker 端的四个配置对象；</li><li>创建 broker 的一些组件对象；</li><li>创建一些线程池的队列；</li></ol><blockquote><p>这里就不贴 BrokerController 方法的代码了，比较长。具体组件的功能具体分析，这里我们只需要知道会创建这些组件就行了。</p></blockquote><h3 id="初始化-brokercontroller" tabindex="-1"><a class="header-anchor" href="#初始化-brokercontroller" aria-hidden="true">#</a> 初始化 BrokerController</h3><p>前面已经创建了四个配置对象，而且 BrokerController 已经创建完成了，现在需要对 BrokerController 进行初始化。</p><p>org.apache.rocketmq.broker.BrokerController#initialize</p><p><strong>初始化 BrokerController 的代码有很多，有很多代码目前是不用深挖的，这里留个印象就行了，后续文章遇到了具体分析。</strong></p><p>主要步骤如下：</p><ol><li>首先是加载各个资源文件，如 topics.json；</li><li>创建 broker 的核心存储模块 DefaultMessageStore，然后加载核心存储模块的资源文件，主要是 commitLog，ConsumeQueue，IndexService 这些；</li><li>创建两个 Netty 服务端对象，一个 remotingServer，一个 fastRemotingServer，两个端口不一样；</li><li>初始化一堆线程池对象；</li><li>注册 broker 端的业务处理器，用于处理不同类型的 RPC 请求；</li><li>开启一堆定时任务；</li><li>设置 NettyRemotingClient 的 NameServer 地址；</li><li>Master 角色的 broker 需要定时打印主从 broker 之间的同步数据差异，Slave 角色的 broker 需要处理 HA 相关；</li><li>TLS 相关处理；</li><li>初始化一些事务，权限控制 ACL，RPC hook 相关的资源；</li></ol><h4 id="加载资源" tabindex="-1"><a class="header-anchor" href="#加载资源" aria-hidden="true">#</a> 加载资源</h4><p>首先是加载各个资源文件，如 topics.json；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 加载 topic 资源</span>
<span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicConfigManager<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加载 consumer 消费进度信息</span>
result <span class="token operator">=</span> result <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>consumerOffsetManager<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加载 consumer 订阅组信息</span>
result <span class="token operator">=</span> result <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscriptionGroupManager<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加载过滤器</span>
result <span class="token operator">=</span> result <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>consumerFilterManager<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依次加载各种资源，主要是 org.apache.rocketmq.broker.BrokerPathConfigHelper 中定义的一些路径，如：</p><ul><li>主题配置的 topics.json；</li><li>消费进度的 consumerOffset.json；</li><li>订阅信息的 subscriptionGroup.json；</li><li>消息过滤器 consumerFilter.json；</li></ul><blockquote><p>这里有个印象就行了</p></blockquote><h4 id="创建并加载核心存储模块" tabindex="-1"><a class="header-anchor" href="#创建并加载核心存储模块" aria-hidden="true">#</a> 创建并加载核心存储模块</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建核心存储模块</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerStatsManager<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageArrivingListener<span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">isEnableDLegerCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">DLedgerRoleChangeHandler</span> roleChangeHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DLedgerRoleChangeHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">DefaultMessageStore</span><span class="token punctuation">)</span> messageStore<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DLedgerCommitLog</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultMessageStore</span><span class="token punctuation">)</span> messageStore<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getdLedgerServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getdLedgerLeaderElector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addRoleChangeHandler</span><span class="token punctuation">(</span>roleChangeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// broker 统计组件</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brokerStats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrokerStats</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultMessageStore</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//load plugin</span>
        <span class="token class-name">MessageStorePluginContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageStorePluginContext</span><span class="token punctuation">(</span>messageStoreConfig<span class="token punctuation">,</span> brokerStatsManager<span class="token punctuation">,</span> messageArrivingListener<span class="token punctuation">,</span> brokerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore <span class="token operator">=</span> <span class="token class-name">MessageStoreFactory</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getDispatcherList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CommitLogDispatcherCalcBitMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>consumerFilterManager<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to initialize&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 加载核心存储的资源</span>
<span class="token comment">// 主要是加载 CommitLog，ConsumeQueue，indexService 这些文件</span>
result <span class="token operator">=</span> result <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 broker 的核心存储模块 DefaultMessageStore，然后加载核心存储模块的资源文件，主要是 commitLog，ConsumeQueue，IndexService 这些；</p><blockquote><p>这里有个印象就行了，后面分析存储模块会详细分析</p></blockquote><h4 id="创建-netty-服务端" tabindex="-1"><a class="header-anchor" href="#创建-netty-服务端" aria-hidden="true">#</a> 创建 Netty 服务端</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建 Netty 服务端对象</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyRemotingServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientHousekeepingService<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">NettyServerConfig</span> fastConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NettyServerConfig</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fastConfig<span class="token punctuation">.</span><span class="token function">setListenPort</span><span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getListenPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 复制一个 Netty 服务端对象，端口设置为上面一个的 -2</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyRemotingServer</span><span class="token punctuation">(</span>fastConfig<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientHousekeepingService<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建两个 Netty 服务端对象，一个 remotingServer，一个 fastRemotingServer。fastRemotingServer 的功能和 remotingServer 的功能基本上差不多，唯一不同的是不可以处理消费者拉取消息的请求。Broker 在向 NameServer 注册时，只会上报 remotingServer 绑定的端口。客户端发送消息时可以选择请求 remotingServer，也可以通过配置来请求 fastRemotingServer 服务端。</p><blockquote><p>后续文章具体分析 Broker 监听的一些端口，这里简单了解一下。</p></blockquote><h4 id="创建一堆线程池" tabindex="-1"><a class="header-anchor" href="#创建一堆线程池" aria-hidden="true">#</a> 创建一堆线程池</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 初始化一些线程池</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrokerFixedThreadPoolExecutor</span><span class="token punctuation">(</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">.</span><span class="token function">getSendMessageThreadPoolNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">.</span><span class="token function">getSendMessageThreadPoolNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span>
    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sendThreadPoolQueue<span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryImpl</span><span class="token punctuation">(</span><span class="token string">&quot;SendMessageThread_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...... 省略 ......</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Broker 中需要使用很多线程池，这里创建了一堆线程池。</p><h4 id="注册业务处理器" tabindex="-1"><a class="header-anchor" href="#注册业务处理器" aria-hidden="true">#</a> 注册业务处理器</h4><p>BrokerController#registerProcessor</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * SendMessageProcessor
     */</span>
    <span class="token class-name">SendMessageProcessor</span> sendProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendMessageProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sendProcessor<span class="token punctuation">.</span><span class="token function">registerSendMessageHook</span><span class="token punctuation">(</span>sendMessageHookList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sendProcessor<span class="token punctuation">.</span><span class="token function">registerConsumeMessageHook</span><span class="token punctuation">(</span>consumeMessageHookList<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_MESSAGE</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_MESSAGE_V2</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_BATCH_MESSAGE</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">CONSUMER_SEND_MSG_BACK</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_MESSAGE</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_MESSAGE_V2</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">SEND_BATCH_MESSAGE</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">CONSUMER_SEND_MSG_BACK</span><span class="token punctuation">,</span> sendProcessor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略其他的注册处理器操作 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面我们创建了 remotingServer 和 fastRemotingServer 两个服务端，这里需要向它注册一些业务处理器。业务处理器的作用就是处理不同类型的 RPC 请求。</p><h4 id="创建一堆定时任务" tabindex="-1"><a class="header-anchor" href="#创建一堆定时任务" aria-hidden="true">#</a> 创建一堆定时任务</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">long</span> initialDelay <span class="token operator">=</span> <span class="token class-name">UtilAll</span><span class="token punctuation">.</span><span class="token function">computeNextMorningTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token keyword">long</span> period <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>
<span class="token comment">// 定时任务：Metric 统计任务</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">BrokerController</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBrokerStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;schedule record error.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> initialDelay<span class="token punctuation">,</span> period<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// ...... 省略其他的一些定时任务 ......</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>broker 中有一堆定时任务，例如持久化一些信息（consumerOffset.json 等）。</p><h4 id="netty-客户端保存-nameserver-地址" tabindex="-1"><a class="header-anchor" href="#netty-客户端保存-nameserver-地址" aria-hidden="true">#</a> Netty 客户端保存 NameServer 地址</h4><p>因为 broker 需要作为 Netty 客户端向 NameServer 发送请求，所以要保存 NameServer 的地址。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设置 NettyRemotingClient 的 NameServer 地址</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerOuterAPI<span class="token punctuation">.</span><span class="token function">updateNameServerAddressList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Set user specified name server address: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerConfig<span class="token punctuation">.</span><span class="token function">isFetchNamesrvAddrByAddressServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="处理-ha-高可用相关" tabindex="-1"><a class="header-anchor" href="#处理-ha-高可用相关" aria-hidden="true">#</a> 处理 HA 高可用相关</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">isEnableDLegerCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BrokerRole</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 假如当前 broker 是 slave，需要处理 HA 相关的操作</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getHaMasterAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getHaMasterAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">updateHaMasterAddress</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getHaMasterAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>updateMasterHAServerAddrPeriodically <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>updateMasterHAServerAddrPeriodically <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 假如当前 broker 是 master，则需要定时打印主从 broker 的同步数据差异</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">BrokerController</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printMasterAndSlaveDiff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;schedule printMasterAndSlaveDiff error.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Master 角色的 broker 需要定时打印主从 broker 之间的同步数据差异，Slave 角色的 broker 需要处理 HA 相关；</p><blockquote><p>会在 HA 高可用的时候详细分析</p></blockquote><h4 id="其他操作" tabindex="-1"><a class="header-anchor" href="#其他操作" aria-hidden="true">#</a> 其他操作</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 初始化事务相关</span>
<span class="token function">initialTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化权限控制 ACL 相关</span>
<span class="token function">initialAcl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化配置的 RPC 钩子函数</span>
<span class="token function">initialRpcHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化一些事务，权限控制 ACL，RPC hook 相关的资源；</p><h4 id="注册-jvm-关闭的钩子函数" tabindex="-1"><a class="header-anchor" href="#注册-jvm-关闭的钩子函数" aria-hidden="true">#</a> 注册 JVM 关闭的钩子函数</h4><p>因为 Broker 运行依赖了不少资源，例如 Netty 的主从 Reactor 线程组，一些业务线程池。当 Broker 需要关机时，为了让系统平滑关机，需要注册一个 JVM 关闭的构造函数，去关闭一些资源。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 注册 JVM 钩子函数</span>
<span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> hasShutdown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> shutdownTimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Shutdown hook was invoked, {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shutdownTimes<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hasShutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>hasShutdown <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                controller<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> consumingTimeTotal <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Shutdown hook over, consuming total time(ms): {}&quot;</span><span class="token punctuation">,</span> consumingTimeTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;ShutdownHook&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动-brokercontroller" tabindex="-1"><a class="header-anchor" href="#启动-brokercontroller" aria-hidden="true">#</a> 启动 BrokerController</h3><p>OK，现在 BrokerController 已经创建好了，而且已经初始化完成了，现在需要启动它。</p><p>org.apache.rocketmq.broker.BrokerController#start</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 启动 BrokerController
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 核心存储模块启动</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageStore <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// broker 作为 Netty 服务端启动</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// broker 作为 Netty 服务端启动，vip 通道</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// TLS 相关</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fileWatchService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fileWatchService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// broker 作为 Netty 客户端</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerOuterAPI <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brokerOuterAPI<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 拉消息长轮询服务</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestHoldService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestHoldService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Netty 通道变化的监听处理器</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientHousekeepingService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>clientHousekeepingService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterServerManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>filterServerManager<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// HA 相关处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">isEnableDLegerCommitLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">startProcessorByHa</span><span class="token punctuation">(</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">handleSlaveSynchronize</span><span class="token punctuation">(</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBrokerAll</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// broker 给 NameServer 发送心跳包</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">BrokerController</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBrokerAll</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> brokerConfig<span class="token punctuation">.</span><span class="token function">isForceRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;registerBrokerAll Exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>brokerConfig<span class="token punctuation">.</span><span class="token function">getRegisterNameServerPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// metric 统计的组件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerStatsManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brokerStatsManager<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// broker 故障处理的组件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerFastFailure <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brokerFastFailure<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是启动一些 BrokerController 的内部组件，例如两个 Netty 服务端，Netty 客户端等。开启了一个定时任务去给 NameServer 发心跳。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>整体来说 BrokerController 类的结构如下：</p><ol><li>作为配置的一些类，例如 BrokerConfig，NettyServerConfig，NettyClientConfig，MessageStoreConfig；</li><li>broker 的一些组件对象， PullRequestHoldService 等；</li><li>各种线程池和线程池的队列对象；</li></ol><p>而 Broker 的启动流程就是根据配置创建 BrokerController，然后初始化 BrokerController 内部的一些组件，最后将它启动。</p><p>需要注意的是，本篇文章只是简单的叙述了 Broker 的启动流程，并没有分析 Broker 内的一些组件，这些组件在后面遇到的地方会详细分析。</p>`,88),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","03-Broker启动流程.html.vue"]]);export{d as default};
