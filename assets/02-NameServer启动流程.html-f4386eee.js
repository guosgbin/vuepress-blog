import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-04507aac.js";const t="/assets/NameServer启动流程-d791cd30.png",p={},o=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年08月1日10:40:21</td></tr><tr><td>V2</td><td>重构</td><td>2023年06月06日19:57:14</td></tr></tbody></table><h2 id="nameserver-概述" tabindex="-1"><a class="header-anchor" href="#nameserver-概述" aria-hidden="true">#</a> NameServer 概述</h2><p>NameServer：NameServer 是一个非常简单的 Topic 路由注册中心，其角色类似 Dubbo 中的 zookeeper，支持 Topic、Broker 的动态注册与发现。</p><p>主要包括两个功能：</p><ol><li><strong>Broker 管理</strong>：NameServer 接受 Broker 集群的注册信息并且保存下来作为路由信息的基本数据。然后提供<strong>心跳检测机制，检查 Broker 是否还存活</strong>；</li><li><strong>路由信息管理</strong>：每个 NameServer 将保存关于 Broker 集群的整个路由信息和用于客户端查询的队列信息。然后 Producer 和 Consumer 通过 NameServer 就可以知道整个 Broker 集群的路由信息，从而进行消息的投递和消费；</li></ol><p>**NameServer 几乎无状态节点，因此可集群部署，节点之间无任何信息同步。**Broker 是向每一台 NameServer 注册自己的路由信息，所以每一个 NameServer 实例上面都保存一份完整的路由信息。当某个 NameServer 因某种原因下线了，Broker 仍然可以向其它 NameServer 同步其路由信息， Producer 和 Consumer 仍然可以动态感知 Broker 的路由的信息；</p><h2 id="nameserver-的启动入口" tabindex="-1"><a class="header-anchor" href="#nameserver-的启动入口" aria-hidden="true">#</a> NameServer 的启动入口</h2><p>NameServer 的启动入口 org.apache.rocketmq.namesrv.NamesrvStartup#main</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果启动时，使用 -c  -p... 设置了参数了，这些参数由 args 接收</span>
    <span class="token function">main0</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">NamesrvController</span> <span class="token function">main0</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">NamesrvController</span> controller <span class="token operator">=</span> <span class="token function">createNamesrvController</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">start</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> tip <span class="token operator">=</span> <span class="token string">&quot;The Name Server boot success. serializeType=&quot;</span> <span class="token operator">+</span> <span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token function">getSerializeTypeConfigInThisServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> tip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> controller<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到主要是创建一个 NamesrvController 对象，然后调用方法将它启动。</p><h2 id="nameserver-启动相关的类" tabindex="-1"><a class="header-anchor" href="#nameserver-启动相关的类" aria-hidden="true">#</a> NameServer 启动相关的类</h2><p>这里对这两个类有个了解就行，后续涉及到了再回头看看</p><h3 id="namesrvconfig-配置对象" tabindex="-1"><a class="header-anchor" href="#namesrvconfig-配置对象" aria-hidden="true">#</a> NamesrvConfig 配置对象</h3><p>org.apache.rocketmq.common.namesrv.NamesrvConfig</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NamesrvConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InternalLogger</span> log <span class="token operator">=</span> <span class="token class-name">InternalLoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LoggerName</span><span class="token punctuation">.</span><span class="token constant">NAMESRV_LOGGER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// RocketMQ 主目录，通过 -Drocketmq.home.dir=path 或设置环境变量 ROCKETMQ_HOME 可以配置 RocketMQ 的主目录。</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> rocketmqHome <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">ROCKETMQ_HOME_PROPERTY</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">ROCKETMQ_HOME_ENV</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// NameServer 存储 KV 配置属性的持久化路径， kvConfig.json 文件</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> kvConfigPath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.home&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">&quot;namesrv&quot;</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">&quot;kvConfig.json&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// NameServer 默认配置文件路径。NameServer 启动时如果要通过配置文件配置 NameServer 启动属性，请使用 -c 选项。</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> configStorePath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.home&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">&quot;namesrv&quot;</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">&quot;namesrv.properties&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> productEnvName <span class="token operator">=</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> clusterTest <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 顺序消息功能是否开启，默认不支持</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> orderMessageEnable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NamesrvConfig 是 NameServer 的一些运行的配置。</p><ul><li><strong>rocketmqHome</strong>：RocketMQ 的主目录；</li><li><strong>kvConfigPat</strong>h：NameServer 存储 KV 配置属性的持久化路径， kvConfig.json 文件；</li><li><strong>configStorePath</strong>：NameServer 默认配置文件路径；</li><li><strong>orderMessageEnable</strong>：顺序消息功能是否开启，默认不支持；</li></ul><h3 id="nettyserverconfig-配置对象" tabindex="-1"><a class="header-anchor" href="#nettyserverconfig-配置对象" aria-hidden="true">#</a> NettyServerConfig 配置对象</h3><p>应为 Nameserver 需要和 broker、producer、consumer 进行 rpc 通信，并且 NameServer 作为 Netty 服务端。NettyServerConfig 类就是提供 Netty 服务端的一些配置信息。</p><p>org.apache.rocketmq.remoting.netty.NettyServerConfig。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerConfig</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> listenPort <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverWorkerThreads <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverCallbackExecutorThreads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverSelectorThreads <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverOnewaySemaphoreValue <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverAsyncSemaphoreValue <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverChannelMaxIdleTimeSeconds <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverSocketSndBufSize <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span>socketSndbufSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverSocketRcvBufSize <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span>socketRcvbufSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> writeBufferHighWaterMark <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span>writeBufferHighWaterMark<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> writeBufferLowWaterMark <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span>writeBufferLowWaterMark<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverSocketBacklog <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span>socketBacklog<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> serverPooledByteBufAllocatorEnable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> useEpollNativeSelector <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数解释：</p><table><thead><tr><th>参数名</th><th>解释</th></tr></thead><tbody><tr><td>listenPort</td><td>Netty 服务端启动时监听的端口，该值默认会被初始化为 9876</td></tr><tr><td>serverWorkerThreads</td><td>线程池的线程个数，默认 8，两个地方使用：<br>1.用在协议处理器，eg.DefaultRequestProcessor； <br>2.用在给 Netty 服务端的 Handler 使用的线程池</td></tr><tr><td>serverCallbackExecutorThreads</td><td>线程池的线程个数，默认 0，会在后续初始化为 4。两个地方使用：<br>1. 注册业务处理器时，如果未指定线程池，则使用 public 线程池； <br>2. 处理 RPC 回调的线程池；</td></tr><tr><td>serverSelectorThreads</td><td>Netty 的 Worker 组线程个数</td></tr><tr><td>serverOnewaySemaphoreValue</td><td>服务端单向消息请求客户端的并发度，默认 256</td></tr><tr><td>serverAsyncSemaphoreValue</td><td>服务端异步消息请求客户端的并发度，默认 64</td></tr><tr><td>serverChannelMaxIdleTimeSeconds</td><td>用于 Netty 服务端的 IdleStateHandler，网络连接最大空闲时间，默认为120s。如果连接空闲时间超过该参数设置的值，连接将被关闭。</td></tr><tr><td>serverSocketSndBufSize</td><td>网络 socket 发送缓存区大小，默认为 0（ps.旧版本给的是 65535）</td></tr><tr><td>serverSocketRcvBufSize</td><td>网络 socket接收缓存区大小，默认为 0（ps.旧版本给的是 65535）</td></tr><tr><td>writeBufferHighWaterMark</td><td>Netty 出站缓冲区高水位</td></tr><tr><td>writeBufferLowWaterMark</td><td>Netty 出站缓冲区低水位</td></tr><tr><td>serverSocketBacklog</td><td>TCP 协议的 backlog 参数，存放连接请求队列的最大长度</td></tr><tr><td>serverPooledByteBufAllocatorEnable</td><td>Netty 是否开启池化内存，默认开启</td></tr><tr><td>useEpollNativeSelector</td><td>是否启用 epoll I/O 模型，Linux环境下建议开启。</td></tr></tbody></table><h2 id="nameserver-的启动流程图" tabindex="-1"><a class="header-anchor" href="#nameserver-的启动流程图" aria-hidden="true">#</a> NameServer 的启动流程图</h2><p><img src="`+t+`" alt="NameServer启动流程"></p><h2 id="nameserver-启动流程" tabindex="-1"><a class="header-anchor" href="#nameserver-启动流程" aria-hidden="true">#</a> NameServer 启动流程</h2><h3 id="读取-nameserver-启动的配置并设置" tabindex="-1"><a class="header-anchor" href="#读取-nameserver-启动的配置并设置" aria-hidden="true">#</a> 读取 Nameserver 启动的配置并设置</h3><p>NamesrvStartup#createNamesrvController</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// NameServer 业务参数</span>
<span class="token keyword">final</span> <span class="token class-name">NamesrvConfig</span> namesrvConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamesrvConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NameServer 网络参数</span>
<span class="token keyword">final</span> <span class="token class-name">NettyServerConfig</span> nettyServerConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyServerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// namesrv 服务器监听端口设置为 9876</span>
nettyServerConfig<span class="token punctuation">.</span><span class="token function">setListenPort</span><span class="token punctuation">(</span><span class="token number">9876</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>commandLine<span class="token punctuation">.</span><span class="token function">hasOption</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取 -c 选项的值</span>
    <span class="token class-name">String</span> file <span class="token operator">=</span> commandLine<span class="token punctuation">.</span><span class="token function">getOptionValue</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加载配置文件到 properties 内</span>
        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果 config 配置文件内的配置涉及到 namesrvConfig 或者 NettyServerConfig 的字段那么进行重写</span>
        <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">properties2Object</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> namesrvConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">properties2Object</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将读取的配置文件路径保存</span>
        namesrvConfig<span class="token punctuation">.</span><span class="token function">setConfigStorePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;load config properties file OK, %s%n&quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先创建两个对象，NamesrvConfig 和 NettyServerConfig，里面有一些默认的配置；</li><li>假如在启动 NameServer 的时候命令中用 -c 指定了配置文件，例如 nameserver.properties，假如该文件中有 <code>listenPort = 10086</code>，那么则会将 Netty 服务端端口设置为 10086；</li></ul><h3 id="创建-namesrvcontroller-对象" tabindex="-1"><a class="header-anchor" href="#创建-namesrvcontroller-对象" aria-hidden="true">#</a> 创建 NamesrvController 对象</h3><p>根据上面的 NamesrvConfig 和 NettyServerConfig 配置对象，创建 NamesrvController。</p><p>org.apache.rocketmq.namesrv.NamesrvController#NamesrvController</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NamesrvController</span><span class="token punctuation">(</span><span class="token class-name">NamesrvConfig</span> namesrvConfig<span class="token punctuation">,</span> <span class="token class-name">NettyServerConfig</span> nettyServerConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>namesrvConfig <span class="token operator">=</span> namesrvConfig<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig <span class="token operator">=</span> nettyServerConfig<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>kvConfigManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KVConfigManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>routeInfoManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RouteInfoManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerHousekeepingService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrokerHousekeepingService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>
        log<span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>namesrvConfig<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">setStorePathFromConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>namesrvConfig<span class="token punctuation">,</span> <span class="token string">&quot;configStorePath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先是两个配置属性，namesrvConfig 和 nettyServerConfig；</li><li>创建 KVConfigManager 对象；</li><li>创建 RouteInfoManager 对象，这个主要是用作存储 NameServer 的路由元信息，也就是一些 broker 信息都存在这里；</li><li>创建 BrokerHousekeepingService 对象，这个主要是监听 Netty 的事件变化，当 Netty 事件发送改变后，会做对应的处理；</li><li>创建 Configuration 对象；</li></ul><h3 id="初始化-namesrvcontroller-对象" tabindex="-1"><a class="header-anchor" href="#初始化-namesrvcontroller-对象" aria-hidden="true">#</a> 初始化 NamesrvController 对象</h3><p>既然 NamesrvController 已经创建完成了，就会调用 NamesrvStartup#start 去启动 NameServer 了，第一步就是调用 NamesrvController#initialize 方法去初始化 NamesrvController。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 加载本地 KV 配置</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>kvConfigManager<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建 Netty 服务端</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyRemotingServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerHousekeepingService<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建业务线程池，默认线程数 8，给协议处理器使用</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingExecutor <span class="token operator">=</span>
        <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerWorkerThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryImpl</span><span class="token punctuation">(</span><span class="token string">&quot;RemotingExecutorThread_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 注册协议处理器，缺省的协议处理器</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 定时任务，每隔 10 秒扫描一次 Broker，移除 idle 状态的 Broker</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">NamesrvController</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>routeInfoManager<span class="token punctuation">.</span><span class="token function">scanNotActiveBroker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 定时任务，每隔 10 秒打印一次 KV 配置</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">NamesrvController</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>kvConfigManager<span class="token punctuation">.</span><span class="token function">printAllPeriodically</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略处理 TLS 的代码 ......</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先会去加载本地的 KV 配置；</li><li>创建 NettyRemotingServer 服务器对象； <ul><li>在 NettyRemotingServer 构造构造方法中，主要是创建 ServerBootstrap，Netty 的 Boss 和 Worker 等线程池；</li><li>在创建 Netty 的线程组的时候会校验是否使用 epoll；</li></ul></li><li>注册缺省的协议处理器，当 NameServer 接收到 RPC 请求时，会通过这个协议处理器去处理对应的请求；</li><li>定时任务：每隔 10 秒扫描一次 Broker 列表，移除超时未发心跳的 Broker；</li><li>定时任务：每隔 10 秒打印一次 KV 配置；</li></ul><p><strong>到这里已经创建好 Nameserver 的 Netty 服务端了，并且注册了一个缺省的协议处理器。添加了定时任务 10s 去扫描所有的 broker，并将长时间（默认 120s）未发心跳的 broker 从 namserver 中移除。</strong></p><blockquote><p>NettyRemotingServer 和定时任务相关的后面文章会分析，这里知道是在这里创建的就行了</p></blockquote><h3 id="注册-jvm-关闭的钩子函数" tabindex="-1"><a class="header-anchor" href="#注册-jvm-关闭的钩子函数" aria-hidden="true">#</a> 注册 JVM 关闭的钩子函数</h3><p>因为 NameServer 运行依赖了不少资源，例如 Netty 的主从 Reactor 线程组，一些业务线程池。当 Namserver 需要关机时，为了让系统平滑关机，需要注册一个 JVM 关闭的构造函数，去关闭一些资源。</p><p>NamesrvStartup#start</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 添加 JVM 的钩子函数，关闭一些资源，让服务器平滑关机</span>
<span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShutdownHookThread</span><span class="token punctuation">(</span>log<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        controller<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加 JVM 的钩子函数，关闭一些资源，让服务器平滑关机。这些资源主要是一些线程资源。</p><p>NamesrvController#shutdown</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fileWatchService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fileWatchService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动-netty-服务端" tabindex="-1"><a class="header-anchor" href="#启动-netty-服务端" aria-hidden="true">#</a> 启动 Netty 服务端</h3><p>org.apache.rocketmq.remoting.netty.NettyRemotingServer#start</p><p>这个函数的代码比较长，前面创建线程池，设置 TCP 和 Netty 的参数的代码就不贴了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 1.创建服务端 ServerBootstrap 对象，组装 option 参数，添加 ChannelHandler 到管道
 * 2.绑定端口 9876
 * 3.开启一个线程用于监听 Channel 的事件
 * 4.开启定时任务，10 秒扫描一次 responseTable。
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略部分代码...</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 绑定端口 9876</span>
        <span class="token class-name">ChannelFuture</span> sync <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InetSocketAddress</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">)</span> sync<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;this.serverBootstrap.bind().sync() InterruptedException&quot;</span><span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>channelEventListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 开启一个线程，死循环 run 方法</span>
        <span class="token comment">// org.apache.rocketmq.remoting.netty.NettyRemotingAbstract.NettyEventExecutor.run</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nettyEventExecutor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 周期任务，扫描 ResponseTable</span>
    <span class="token comment">// 将 responseTable 的超时的 ResponseFuture 移除掉</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">NettyRemotingServer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scanResponseTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;scanResponseTable exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先是创建一个线程池，用于处理 ChannelHandler 的事件；</li><li>创建共享的 ChannelHandler 对象。 <ul><li>HandshakeHandler：TLS 相关的；</li><li>NettyEncoder：编码器；</li><li>NettyConnectManageHandler：监听 Channel 的 Pipeline 的事件，将其添加到 NettyRemotingServer 的事件队列中，由前面说的 BrokerHousekeepingService 对象去消费。</li><li>NettyServerHandler：根据 RPC 的封装对象 RemotingCommand 中的 type 和 code 做不同的业务处理；</li></ul></li><li>设置 TCP 和 Netty 的参数，初始化 Netty 服务端的管道；</li><li>Netty 服务端绑定端口；</li><li>启动 NettyEventExecutor 线程，监听 Netty 管道中的事件变化，做对应的后续处理；</li><li>定时任务：扫描 RPC 请求的表 responseTable，移除超时的请求，并回调超时的请求的回调方法；</li></ul><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本篇只简单叙述了 NameServer 的启动流程，具体涉及到的定时任务和 Netty 服务端启动的逻辑都未分析，NameServer 的路由管理功能也未分析。后面文章具体分析，这里只知道 NameServer 是如何启动的就行了。</p>`,55),c=[o];function l(i,r){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","02-NameServer启动流程.html.vue"]]);export{d as default};
