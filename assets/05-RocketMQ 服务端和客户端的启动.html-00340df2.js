import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-c12a9a30.js";const p={},e=t(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年06月07日22:28:39</td></tr></tbody></table><h2 id="rocketmq-内的服务端和客户端" tabindex="-1"><a class="header-anchor" href="#rocketmq-内的服务端和客户端" aria-hidden="true">#</a> RocketMQ 内的服务端和客户端</h2><p>RocketMQ 中有四种角色，各个角色内部对应 Netty 服务端和客户端的角色如下：</p><ul><li>NameServer：服务端，因为 Broker 需要和 NameServer 维护心跳，Producer 和 Consumer 都需要从 Nameserver 获取路由信息；</li><li>Broker（master 和 salve）：服务端和客户端。和 NameServer 维护心跳时作为客户端；在与 Producer 和 Consumer 交互时是作为服务端的；</li><li>Producer：客户端。从 NameServer 拉取路由信息；发送消息到 Broker；</li><li>Consumer：客户端。从 NameServer 拉取路由信息；从 Broker 拉取消息；</li></ul><p>本篇不会分析所有的客户端和服务端的启动流程，它们的代码基本上都是 Netty 的模板代码。以 NameServer 为例分析服务端的启动，以 Broker 为例分析客户端的启动。</p><h2 id="nameserver-服务端启动" tabindex="-1"><a class="header-anchor" href="#nameserver-服务端启动" aria-hidden="true">#</a> NameServer 服务端启动</h2><p>在 NameServer 的启动流程中，会调用 NamesrvController#start 方法，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 服务器网络层启动</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fileWatchService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fileWatchService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用了 NettyRemotingServer#start 方法去启动服务端。启动服务端的代码基本上就是 Netty 服务端的模板代码。基本流程就是创建主 Reactor 线程组和从 Reactor 线程组，然后创建 ServerBootstrap 对象，最后绑定端口启动服务端。</p><h3 id="创建主从-reactor-线程组" tabindex="-1"><a class="header-anchor" href="#创建主从-reactor-线程组" aria-hidden="true">#</a> 创建主从 Reactor 线程组</h3><p>创建注册 Reactor 线程组的代码并不在 NamesrvController#start 方法中，而是在 NettyRemotingServer 的构造方法中。根据 useEpoll() 方法来决定是使用 Epoll 还是 NIO 的线程组。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NettyRemotingServer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">NettyServerConfig</span> nettyServerConfig<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">ChannelEventListener</span> channelEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 服务器向客户端主动发起请求时，并发限制</span>
    <span class="token comment">// 1.单向请求的并发限制</span>
    <span class="token comment">// 2.异步请求的并发限制</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerOnewaySemaphoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerAsyncSemaphoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Netty 服务端</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Netty 的一些配置</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig <span class="token operator">=</span> nettyServerConfig<span class="token punctuation">;</span>
    <span class="token comment">// Netty 的一些事件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>channelEventListener <span class="token operator">=</span> channelEventListener<span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略 publicExecutor 线程池的代码......</span>

    <span class="token comment">// 创建两个 Netty 线程组，Boss 和 Worker</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useEpoll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Epoll Boss 线程组</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupBoss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EpollEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略线程工厂的代码 ......</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// I/O 线程池</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupSelector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EpollEventLoopGroup</span><span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSelectorThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略线程工厂的代码 ......</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Nio 线程组</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupBoss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略线程工厂的代码 ......</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// I/O 线程组</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupSelector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSelectorThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略线程工厂的代码 ......</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">loadSslContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-channelhandler-使用的线程池" tabindex="-1"><a class="header-anchor" href="#创建-channelhandler-使用的线程池" aria-hidden="true">#</a> 创建 ChannelHandler 使用的线程池</h3><p>在真正进行业务操作前还需要经过一些 ChannelHandler 进行处理，例如 SSL 相关、网络数据编解码等等。可以为这些 ChannelHandler 指定一个线程池，让其使用这个线程池来处理任务。回到 NettyRemotingServer#start 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 当向 ChannelPipeline 添加 Handler 指定了 group，</span>
<span class="token comment">// 网络 I/O 事件传播到当前 Handler 时，事件处理由分配给 Handler 的线程执行</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>defaultEventExecutorGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventExecutorGroup</span><span class="token punctuation">(</span>
    nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerWorkerThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> threadIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&quot;NettyServerCodecThread_&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>threadIndex<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建可共享的-channelhandler" tabindex="-1"><a class="header-anchor" href="#创建可共享的-channelhandler" aria-hidden="true">#</a> 创建可共享的 ChannelHandler</h3><p>Netty 服务端中有一些 ChannelHandler 是可共享的，其实就是它们是线程安全的。主要有：</p><ul><li>HandshakeHandler：处理 SSL 的；</li><li>NettyEncoder：数据编码工作；</li><li>NettyConnectManageHandler：监听 Channel 变化的；</li><li>NettyServerHandler：真正处理业务的处理器；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">prepareSharableHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    handshakeHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandshakeHandler</span><span class="token punctuation">(</span><span class="token class-name">TlsSystemConfig</span><span class="token punctuation">.</span>tlsMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 编码器</span>
    encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 监听 Channel 变化的 Handler</span>
    connectionManageHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyConnectManageHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据 RemotingCommand 中的 type 和 code 做不同的业务处理</span>
    serverHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-serverbootstrap-对象" tabindex="-1"><a class="header-anchor" href="#创建-serverbootstrap-对象" aria-hidden="true">#</a> 创建 ServerBootstrap 对象</h3><p>没什么好说的，就是创建 ServerBootstrap 对象。</p><ul><li>赋值主从 Reactor 线程组；</li><li>设置服务端的 TCP 参数；</li><li>设置客户端的 TCP 参数；</li><li>设置客户端出站缓冲区的高低水位；</li><li>设置 Netty 是否使用池化内存；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServerBootstrap</span> childHandler <span class="token operator">=</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupBoss<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupSelector<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token function">useEpoll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">EpollServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">:</span> <span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketBacklog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_REUSEADDR</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">TCP_NODELAY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getListenPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                <span class="token comment">// 添加客户端管道</span>
                ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token comment">// 指定线程池</span>
                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>defaultEventExecutorGroup<span class="token punctuation">,</span> <span class="token constant">HANDSHAKE_HANDLER_NAME</span><span class="token punctuation">,</span> handshakeHandler<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>defaultEventExecutorGroup<span class="token punctuation">,</span>
                        encoder<span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">NettyDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerChannelMaxIdleTimeSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        connectionManageHandler<span class="token punctuation">,</span>
                        serverHandler
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketSndBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;server set SO_SNDBUF to {}&quot;</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketSndBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    childHandler<span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_SNDBUF</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketSndBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketRcvBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;server set SO_RCVBUF to {}&quot;</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketRcvBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    childHandler<span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_RCVBUF</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerSocketRcvBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 设置 Netty 的出站缓冲区的高低水位，控制读写，防止 OOM</span>
<span class="token comment">// 出站缓冲区的数据大于 高水位，通道置于不可写状态，直到出站缓冲区的数据小于 低水位，通道置于可写状态</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferLowWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferHighWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;server set netty WRITE_BUFFER_WATER_MARK to {},{}&quot;</span><span class="token punctuation">,</span>
            nettyServerConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferLowWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferHighWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    childHandler<span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">WRITE_BUFFER_WATER_MARK</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WriteBufferWaterMark</span><span class="token punctuation">(</span>
            nettyServerConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferLowWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferHighWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">isServerPooledByteBufAllocatorEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    childHandler<span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">ALLOCATOR</span><span class="token punctuation">,</span> <span class="token class-name">PooledByteBufAllocator</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="绑定端口启动服务端" tabindex="-1"><a class="header-anchor" href="#绑定端口启动服务端" aria-hidden="true">#</a> 绑定端口启动服务端</h3><p>NameServer 绑定 9876 端口，启动 NameServer 服务。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 绑定端口 9876</span>
    <span class="token class-name">ChannelFuture</span> sync <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">InetSocketAddress</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">)</span> sync<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;this.serverBootstrap.bind().sync() InterruptedException&quot;</span><span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="broker-客户端启动" tabindex="-1"><a class="header-anchor" href="#broker-客户端启动" aria-hidden="true">#</a> Broker 客户端启动</h2><p>目光关注到 BrokerController#start 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略其他模块的启动 ......</span>

    <span class="token comment">// broker 作为 Netty 服务端启动</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// broker 作为 Netty 服务端启动，vip 通道</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fastRemotingServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...... 省略其他模块的启动 ......</span>

    <span class="token comment">// broker 作为 Netty 客户端</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerOuterAPI <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brokerOuterAPI<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...... 省略其他模块的启动 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Broker 中启动了两个服务端 remotingServer 和 fastRemotingServer，关于它们的区别我后面文章具体分析。</p><p>调用了 BrokerOuterAPI#start 启动客户端。其中 BrokerOuterAPI 内部封装了 RemotingClient。这个 BrokerOuterAPI#start 方法很简单，就是调用内部封装的 NettyRemotingClient 的 start 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingClient<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么接下来分析下 Broker 作为客户端的启动流程</p><h3 id="创建-reactor-线程组" tabindex="-1"><a class="header-anchor" href="#创建-reactor-线程组" aria-hidden="true">#</a> 创建 Reactor 线程组</h3><p>创建 Reactor 线程组的操作在 NettyRemotingClient 的构造方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NettyRemotingClient</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">NettyClientConfig</span> nettyClientConfig<span class="token punctuation">,</span>
                            <span class="token keyword">final</span> <span class="token class-name">ChannelEventListener</span> channelEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略其他操作 ......</span>

    <span class="token comment">// NEtty 的 worker 线程组，一个线程池</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> threadIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;NettyClientSelector_%d&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>threadIndex<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略其他操作 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-channelhandler-使用的线程池-1" tabindex="-1"><a class="header-anchor" href="#创建-channelhandler-使用的线程池-1" aria-hidden="true">#</a> 创建 ChannelHandler 使用的线程池</h3><p>和 NameServer 服务端一样需要创建一个 ChannelHandler 处理时使用的线程池</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建 Netty Handler 使用的线程池，默认 4 个</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>defaultEventExecutorGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventExecutorGroup</span><span class="token punctuation">(</span>
    nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientWorkerThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> threadIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&quot;NettyClientWorkerThread_&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>threadIndex<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-bootstrap-对象" tabindex="-1"><a class="header-anchor" href="#创建-bootstrap-对象" aria-hidden="true">#</a> 创建 Bootstrap 对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Bootstrap</span> handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupWorker<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">TCP_NODELAY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">CONNECT_TIMEOUT_MILLIS</span><span class="token punctuation">,</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getConnectTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
            <span class="token class-name">ChannelPipeline</span> pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nettyClientConfig<span class="token punctuation">.</span><span class="token function">isUseTLS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> sslContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    pipeline<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>defaultEventExecutorGroup<span class="token punctuation">,</span> <span class="token string">&quot;sslHandler&quot;</span><span class="token punctuation">,</span> sslContext<span class="token punctuation">.</span><span class="token function">newHandler</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Prepend SSL handler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Connections are insecure as SSLContext is null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 添加 Handler 到管道，使用指定线程池</span>
            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>
                defaultEventExecutorGroup<span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">NettyEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">NettyDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientChannelMaxIdleTimeSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">NettyConnectManageHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientSocketSndBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;client set SO_SNDBUF to {}&quot;</span><span class="token punctuation">,</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientSocketSndBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handler<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_SNDBUF</span><span class="token punctuation">,</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientSocketSndBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientSocketRcvBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;client set SO_RCVBUF to {}&quot;</span><span class="token punctuation">,</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientSocketRcvBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handler<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_RCVBUF</span><span class="token punctuation">,</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientSocketRcvBufSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Netty 写缓冲区高低水位</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>nettyClientConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferLowWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferHighWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;client set netty WRITE_BUFFER_WATER_MARK to {},{}&quot;</span><span class="token punctuation">,</span>
            nettyClientConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferLowWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferHighWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handler<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">WRITE_BUFFER_WATER_MARK</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WriteBufferWaterMark</span><span class="token punctuation">(</span>
            nettyClientConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferLowWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getWriteBufferHighWaterMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连接服务端" tabindex="-1"><a class="header-anchor" href="#连接服务端" aria-hidden="true">#</a> 连接服务端</h3><p>需要注意的是在调用 NettyRemotingClient#start 客户端启动后，并没有直接连接服务端。以 Broker 为例，在向服务端发送请求的时候才会去尝试连接服务端。例如 broker 向 NameServer 注册自己的请求，会调用 BrokerOuterAPI#registerBroker 方法，最终会调用 NettyRemotingClient#invokeSync 方法，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">invokeSync</span><span class="token punctuation">(</span><span class="token class-name">String</span> addr<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingConnectException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingSendRequestException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingTimeoutException</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> beginStartTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取或者创建一个客户端和服务端的通道 Channel</span>
    <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndCreateChannel</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 校验通道的状态，条件成立则说明客户端和服务端的通到已经连接，可以通信</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> channel<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略发送 RPC 的操作 ......</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeChannel</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingConnectException</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键点就是这一行代码，参数 addr 就是我们要访问的 NameServer 的地址和端口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndCreateChannel</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么继续查看 NettyRemotingClient#getAndCreateChannel 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Channel</span> <span class="token function">getAndCreateChannel</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> addr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemotingConnectException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getAndCreateNameserverChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 从 channelTables 中查找可用的连接 Channel</span>
    <span class="token class-name">ChannelWrapper</span> cw <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>channelTables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cw <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cw<span class="token punctuation">.</span><span class="token function">isOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 返回已经存在的 Channel</span>
        <span class="token keyword">return</span> cw<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建新的 Channel</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法就是从本地 HashMap 缓存中尝试获取已经存在的连接，假如不存在就调用 NettyRemotingClient#createChannel 去创建一个新的连接。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Channel</span> <span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> addr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略其他操作 ......</span>

    <span class="token comment">// 连接指定地址的服务器</span>
    <span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">string2SocketAddress</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;createChannel: begin to connect remote host[{}] asynchronously&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChannelWrapper</span><span class="token punctuation">(</span>channelFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加到映射表</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>channelTables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> cw<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略其他操作 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本篇文章分析了 NameServer 作为服务端的启动流程，Broker 作为客户端的启动流程。对于 Broker 作为服务器的启动流程、还有 Producer 和 Comsumer 作为客户端的启动流程我们有分析，其实它们的流程和前文分析的都大同小异。</p>`,52),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","05-RocketMQ 服务端和客户端的启动.html.vue"]]);export{r as default};
