import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-ba4ae9cd.js";const t="/assets/15-Exchange的概念示意图-112585b9.png",e="/assets/16-Exchange的单槽交换的流程图-9c5fd3f3.png",o="/assets/17-Exchange的单槽交换的示意图-48145b2c.png",c="/assets/18-Exchanger的多槽交换-5f192927.png",l={},u=p('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年09月26日23:57:49</td></tr></tbody></table><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Exchanger 的作用是交换两个线程的数据，Exchanger 可以被视为SynchronousQueue的双向形式。</p><p>举个例子，线程 A 和 线程 B 交换数据，假如线程 A 数据准备好了，而另外一个线程的数据还没有准备好，此时会让线程 A 等待，直到线程 B 数据准备好了，就交换彼此的数据。</p><p><img src="'+t+`" alt="15-Exchange的概念示意图"></p><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义 Exchanger 类，该类是一个泛型类，String 类型标明一对线程交换的数据只能是 String 类型</span>
    <span class="token class-name">Exchanger</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> exchanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exchanger</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 定义线程T1</span>
    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 随机休眠1～10秒钟</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行 exchange 方法，将对应的数据传递给 T2 线程，同时从 T2 线程获取交换的数据</span>
            <span class="token comment">// 返回值是T2线程中返回的数据</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 开始...&quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> dataFromT2 <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">&quot;T1的数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 获得: &quot;</span> <span class="token operator">+</span> dataFromT2 <span class="token operator">+</span> <span class="token string">&quot;&gt;&gt;&gt;&quot;</span><span class="token operator">+</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 结束...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;T1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 定义线程T1</span>
    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 随机休眠1～10秒钟</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行exchange方法，将对应的数据传递给T2线程，同时从T2线程获取交换的数据</span>
            <span class="token comment">// 返回值是T1线程中返回的数据</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 开始...&quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> dataFromT1 <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">&quot;T2的数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 获取: &quot;</span> <span class="token operator">+</span> dataFromT1 <span class="token operator">+</span> <span class="token string">&quot;&gt;&gt;&gt;&quot;</span><span class="token operator">+</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 结束...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;T2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台：</p><p>从控制台的输出可以看到，线程 T2 先到，T2 会等待直到 T1到达后并交换数据。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>T2 开始...2022-09-26T16:27:49.078
T1 开始...2022-09-26T16:27:57.059
T1 获得: T2的数据&gt;&gt;&gt;2022-09-26T16:27:57.059
T1 结束...
T2 获取: T1的数据&gt;&gt;&gt;2022-09-26T16:27:57.060
T2 end...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exchanger-原理" tabindex="-1"><a class="header-anchor" href="#exchanger-原理" aria-hidden="true">#</a> Exchanger 原理</h2><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Exchanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    participant <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Participant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** The corresponding thread local class */</span>
<span class="token comment">// 线程本地变量，就是保存一个 Node</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Participant</span> <span class="token keyword">extends</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，Exchanger 的构造方法就是创建一个 Participant 对象，这个对象其实就是一个 ThreadLocal，里面封装了 Node 对象。</p><h3 id="node-节点" tabindex="-1"><a class="header-anchor" href="#node-节点" aria-hidden="true">#</a> Node 节点</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// @sun.misc.Contended 填充以减少内存争用。 伪共享</span>
<span class="token annotation punctuation">@sun.misc.Contended</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token comment">// arena 数组的索引</span>
    <span class="token keyword">int</span> index<span class="token punctuation">;</span>              <span class="token comment">// Arena index</span>
    <span class="token comment">// 记录上次的 bound</span>
    <span class="token keyword">int</span> bound<span class="token punctuation">;</span>              <span class="token comment">// Last recorded value of Exchanger.bound</span>
    <span class="token comment">// 在当前 bound 下 CAS 失败的次数</span>
    <span class="token keyword">int</span> collides<span class="token punctuation">;</span>           <span class="token comment">// Number of CAS failures at current bound</span>

    <span class="token comment">// 线程的伪随机数，用于自旋优化</span>
    <span class="token keyword">int</span> hash<span class="token punctuation">;</span>               <span class="token comment">// Pseudo-random for spins</span>
    <span class="token comment">// Node 封装的数据</span>
    <span class="token class-name">Object</span> item<span class="token punctuation">;</span>            <span class="token comment">// This thread&#39;s current item</span>
    <span class="token comment">// 配对线程提供的数据</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Object</span> match<span class="token punctuation">;</span>  <span class="token comment">// Item provided by releasing thread</span>
    <span class="token comment">// 此节点上的阻塞线程</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> parked<span class="token punctuation">;</span> <span class="token comment">// Set to this thread when parked, else null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Node 的前面三个属性是多槽交换使用的，后面几个属性是在单槽交换使用。什么是多槽交换和单槽交换后面解释。</p><blockquote><p>需要注意的是该类使用 @sun.misc.Contended 修饰，表示填充以防止伪共享。</p></blockquote><h3 id="exchanger-的交换-api" tabindex="-1"><a class="header-anchor" href="#exchanger-的交换-api" aria-hidden="true">#</a> Exchanger 的交换 API</h3><p>Exchanger 就提供了两个交换方法，用于交换两个线程的数据。</p><p>exchange 交换数据，支持中断，不支持超时</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token class-name">V</span> x<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> v<span class="token punctuation">;</span>
    <span class="token class-name">Object</span> item <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">NULL_ITEM</span> <span class="token operator">:</span> x<span class="token punctuation">;</span> <span class="token comment">// translate null args</span>
    <span class="token comment">/*
     * 决定数据的交换方式
     * 1. 单槽交换：arena == null
     * 2. 多槽交换：arena != null，或者单槽交换失败
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arena <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token function">slotExchange</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token function">arenaExchange</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL_ITEM</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span>v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Exchanger#exchange(V) 方法其实就是判断当前线程交换使用单槽交换还是多槽交换。</p><ul><li>单槽交换的条件：多槽交换的数据还未初始化，即 <code>arena == null</code>，这个数组是在单槽交换的时候发生竞争才会创建这个数组；</li><li>多槽交换的条件： <ul><li>前置条件是单槽交换的时候发生竞争了，只要发生竞争就会创建 Node 数组 arena，也就是说，只要发生过一次竞争，该 Exchanger 后续的交换都不会走单槽交换了。</li><li>假如当前线程未被中断，就会尝试去多槽交换了。</li></ul></li></ul><p>还有一个支持中断且支持超时的重载方法，主体流程和上面的方法一样。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token class-name">V</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> v<span class="token punctuation">;</span>
    <span class="token class-name">Object</span> item <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">NULL_ITEM</span> <span class="token operator">:</span> x<span class="token punctuation">;</span>
    <span class="token keyword">long</span> ns <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arena <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token function">slotExchange</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token function">arenaExchange</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">TIMED_OUT</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token constant">NULL_ITEM</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span>v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单槽交换" tabindex="-1"><a class="header-anchor" href="#单槽交换" aria-hidden="true">#</a> 单槽交换</h3><p>单槽交换涉及到一个 slot 属性，这个属性会被设置为先到达的节点，交换结束后置 null。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 单槽交换节点</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> slot<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>单槽交换的代码有点长，举个案例讲：ThreadA 先到达并尝试等待 ThreadB 到达，都到达后交换数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token function">slotExchange</span><span class="token punctuation">(</span><span class="token class-name">Object</span> item<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前线程的 Node 对象</span>
    <span class="token class-name">Node</span> p <span class="token operator">=</span> participant<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// preserve interrupt status so caller can recheck</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> q<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// CASE1： slot != null 说明已经有线程先到并占用了 solt，这个数据是先到达的线程设置的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">=</span> slot<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// CAS 尝试让 slot 置为 null</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SLOT</span><span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取当前线程要交换的交换值</span>
                <span class="token class-name">Object</span> v <span class="token operator">=</span> q<span class="token punctuation">.</span>item<span class="token punctuation">;</span>
                <span class="token comment">// 设置交换值给匹配线程的 Node</span>
                q<span class="token punctuation">.</span>match <span class="token operator">=</span> item<span class="token punctuation">;</span>
                <span class="token class-name">Thread</span> w <span class="token operator">=</span> q<span class="token punctuation">.</span>parked<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token comment">// 唤醒在该槽位等待的线程</span>
                    <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 交换成功返回结果</span>
                <span class="token keyword">return</span> v<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// create arena on contention, but continue until slot null</span>
            <span class="token comment">// 上面 CAS 设置 solt 值为 null 失败，说明出现竞争，需要改为多槽交换</span>
            <span class="token comment">// CPU核数数多于1个, 且bound为0时创建arena数组，并将bound设置为SEQ大小</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NCPU</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> bound <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">BOUND</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEQ</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// arena的大小为(FULL + 2) &lt;&lt; ASHIFT，因为1 &lt;&lt; ASHIFT 是用于避免伪共享的，</span>
                <span class="token comment">// 因此实际有效的Node 只有FULL + 2 个</span>
                arena <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">FULL</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// CASE2：前置条件 slot == null</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arena <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token comment">// 单槽交换中途出现了初始化arena的操作，需要重新直接路由到多槽交换(arenaExchange)</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// caller must reroute to arenaExchange</span>
        <span class="token comment">// CASE3：前置条件 slot == null &amp;&amp; arena == null</span>
        <span class="token comment">// 当前线程先到达，则占用此 solt</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>
            <span class="token comment">// 占用 slot 槽位，占用成功则退出循环</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SLOT</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 当前 cas 失败，自旋重试</span>
            p<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// await release</span>
    <span class="token comment">// 执行到这, 说明当前线程先到达, 且已经占用了slot槽, 需要等待配对线程到达</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
    <span class="token comment">// 计算超时时间</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> timed <span class="token operator">?</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ns <span class="token operator">:</span> <span class="token number">0L</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> spins <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">NCPU</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">SPINS</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> v<span class="token punctuation">;</span>
    <span class="token comment">// p.match == null 说明对方线程还未提供它要交换的数据</span>
    <span class="token comment">// 当前线程需要自旋等待，假如自旋足够次数后对方线程还未到达，需要阻塞当前线程</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">=</span> p<span class="token punctuation">.</span>match<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 优化：自旋过程中随机让出 CPU</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>spins <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h <span class="token operator">^=</span> h <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> h <span class="token operator">^=</span> h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span> h <span class="token operator">^=</span> h <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;h值：&quot;</span> <span class="token operator">+</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                h <span class="token operator">=</span> <span class="token constant">SPINS</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">--</span>spins <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">SPINS</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 优化：说明配对线程已经到达，并把 slot 给改了, 但是交换操作还未执行完, 所以需要再自旋等待一会儿</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>slot <span class="token operator">!=</span> p<span class="token punctuation">)</span>
            spins <span class="token operator">=</span> <span class="token constant">SPINS</span><span class="token punctuation">;</span>
        <span class="token comment">// 已经自旋很久了, 还是等不到配对, 此时才阻塞当前线程</span>
        <span class="token comment">// 条件：当前线程未被中断 &amp;&amp; arena == null &amp;&amp; (不支持超时 || 支持超时但未超时)</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arena <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
                 <span class="token punctuation">(</span><span class="token operator">!</span>timed <span class="token operator">||</span> <span class="token punctuation">(</span>ns <span class="token operator">=</span> end <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 设置阻塞当前线程的 parkBlocker</span>
            <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token constant">BLOCKER</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span>parked <span class="token operator">=</span> t<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>slot <span class="token operator">==</span> p<span class="token punctuation">)</span>
                <span class="token comment">// 阻塞当前线程</span>
                <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 被唤醒后，删除一些数据</span>
            p<span class="token punctuation">.</span>parked <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token constant">BLOCKER</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 超时或被中断, 给其他线程腾出slot</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SLOT</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            v <span class="token operator">=</span> timed <span class="token operator">&amp;&amp;</span> ns <span class="token operator">&lt;=</span> <span class="token number">0L</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">TIMED_OUT</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">putOrderedObject</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token constant">MATCH</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>hash <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个案例讲：ThreadA 先到达并尝试等待 ThreadB 到达，都到达后交换数据。</p><h4 id="threada-走的流程" tabindex="-1"><a class="header-anchor" href="#threada-走的流程" aria-hidden="true">#</a> ThreadA 走的流程</h4><p>(1)首先是开启一个自旋，我们案例的顺序是 ThreadA 先到，所以 for 循环的前面两个判断就是 false，直接到最后的else 代码块。在这个代码块中，就是尝试将 slot 属性设置为当前线程的 Node，假如设置成后就退出自旋；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">else</span> <span class="token punctuation">{</span>
    p<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token comment">// 占用 slot 槽位，占用成功则退出循环</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SLOT</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// 当前 cas 失败，自旋重试</span>
    p<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2)退出 for 自旋后，会进入一个 while 循环，循环的条件是 <code>p.match == null</code>，当 p.match 不是 null 的时候，说明是 ThreadB 将自己的数据设置到了 p.match 里。</p><p>OK，我们看 while 循环中做了什么事情，主要有四个条件块：</p><ul><li>CASE1：<code>spins &gt; 0</code>，做一个优化操作，在自旋过程中随机让出 CPU 资源；</li><li>CASE2：<code>slot != p</code>，说明另外一个线程将 slot 改成 null 了，但是还未完成赋值 p.match 的操作，需要继续自旋等待；</li><li>CASE3：<code>!t.isInterrupted() &amp;&amp; arena == null &amp;&amp; (!timed || (ns = end - System.nanoTime()) &gt; 0L)</code>，条件是<code>当前线程未被中断 &amp;&amp; arena == null &amp;&amp; (不支持超时 || 支持超时但未超时)</code>，说明已经自旋足够次数了，对方线程还未到达，需要阻塞当前线程，并将 slot 的 parked 属性设置为当前线程；</li><li>CASE4：说明当前线程超时后，或者被中断了，需要退出 while 循环；</li></ul><p>退出 while 循环的条件：</p><ol><li>假如在自旋过程中，ThreadB 已经准备数据了，此时 p.match 不是 null 了；</li><li>线程被阻塞了，被 ThreadB 唤醒了，然后 p.match 不是 null 了；</li><li>线程被中断或者超时了，直接退出循环；</li></ol><p>退出 while 循环后，需要将 slot 的 match 和 item 属性置为 null，方便下次使用。</p><h4 id="threadb-走的流程" tabindex="-1"><a class="header-anchor" href="#threadb-走的流程" aria-hidden="true">#</a> ThreadB 走的流程</h4><p>案例中，此时 ThreadA 已经把 slot 槽位占了，并且设置了 item 属性。假如 ThreadA 被阻塞了，也会设置 parked 属性。</p><p>所以 ThreadB 会在最开始的 for 循环里面循环，尝试交换数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">=</span> slot<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// CAS 尝试让 slot 置为 null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SLOT</span><span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取当前线程要交换的交换值</span>
        <span class="token class-name">Object</span> v <span class="token operator">=</span> q<span class="token punctuation">.</span>item<span class="token punctuation">;</span>
        <span class="token comment">// 设置交换值给匹配线程的 Node</span>
        q<span class="token punctuation">.</span>match <span class="token operator">=</span> item<span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> w <span class="token operator">=</span> q<span class="token punctuation">.</span>parked<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token comment">// 唤醒在该槽位等待的线程</span>
            <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 交换成功返回结果</span>
        <span class="token keyword">return</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// create arena on contention, but continue until slot null</span>
    <span class="token comment">// 上面 CAS 设置 solt 值为 null 失败，说明出现竞争，需要改为多槽交换</span>
    <span class="token comment">// CPU核数数多于1个, 且bound为0时创建arena数组，并将bound设置为SEQ大小</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NCPU</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> bound <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">BOUND</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEQ</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// arena的大小为(FULL + 2) &lt;&lt; ASHIFT，因为1 &lt;&lt; ASHIFT 是用于避免伪共享的，</span>
        <span class="token comment">// 因此实际有效的Node 只有FULL + 2 个</span>
        arena <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">FULL</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是第一个 if 分支，其实就是简单的和 slot 节点交换数据，并唤醒 parked 线程。在这里 slot 就是 ThreadA 节点的数据，就是这么简单。</p><p>假如上面将 slot 属性置为 null 的 CAS 操作失败，说明出现竞争，需要创建 Node 数组 arena，退出单槽交换的逻辑，进入到多槽交换的逻辑；</p><h4 id="单槽交换示意图" tabindex="-1"><a class="header-anchor" href="#单槽交换示意图" aria-hidden="true">#</a> 单槽交换示意图</h4><p>以上面的案例来画图：ThreadA 先到达并尝试等待 ThreadB 到达，都到达后交换数据。</p><p><img src="`+e+'" alt="16-Exchange的单槽交换的流程图"></p><p>下面补一张原理图</p><p><img src="'+o+`" alt="17-Exchange的单槽交换的示意图"></p><h3 id="多槽交换" tabindex="-1"><a class="header-anchor" href="#多槽交换" aria-hidden="true">#</a> 多槽交换</h3><p>当竞争激烈的时候，一个槽位就会成性能瓶颈了，因此就衍生出了多槽位交换。</p><p>多槽交换的代码太长了，而且里面太绕了，自己目前也没完全搞明白，只能看个大概，这里只给出多槽交换的主体思路。</p><p>arena 数组在单槽交换里发生竞争时创建的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NCPU</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> bound <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">BOUND</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEQ</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// arena的大小为(FULL + 2) &lt;&lt; ASHIFT，因为1 &lt;&lt; ASHIFT 是用于避免伪共享的，</span>
        <span class="token comment">// 因此实际有效的 Node 只有FULL + 2 个</span>
        arena <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">FULL</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多槽交换和单槽交换的整体流程和单槽交换的差不多。</p><p>arena 是一个数组，但是它里面并不是所有位置都是可用的，Exchanger 里面有个 ASHIFT 常量（值是 7），这个值是为了防止内存伪共享的，<code>1 &lt;&lt; ASHIFT</code>的值就是 128。</p><p><img src="`+c+'" alt="18-Exchanger的多槽交换"></p><p>注意：以下分析仅个人理解，代码没有完全搞明白，自行斟酌哦。</p><p>多槽交换中，每个可用位置可以看成一个 slot，单个槽的交换逻辑和单槽交换的思路基本一样。</p><p>拿个案例分析：假如有三个线程 ThreadA，ThreadB，ThreadC 尝试交换数据。</p><ul><li>首先是 ThreadA 进来发现第一个槽的位置是 null，则自己 CAS 占领这个槽，等待其他线程来交换数据；</li><li>ThreadB 和 ThreadC 进来发现第一个槽已经有 Node 了，则它们都会 CAS 尝试尝试将该槽置为 null； <ul><li>假如 ThreadB 置换成功了，那么它就会和 ThreadA 进行数据交换，流程和单槽交换是一样的，就是 <code>spin-&gt;yield-&gt;block/cancel</code>。具体可参考前面的单槽交换的分析；</li><li>ThreadC 置换失败了，则会去向后一个位置去占领槽位，等待其它线程来和它进行线程交换数据。假如有其他线程来了，就和这个线程交换数。假如等了半天发现没有线程进来交换数据，则会将该槽位置 null，将自己的数据向前移槽位，（只有在第一个槽位才会阻塞线程），当一直没有线程和它交换数据，而且它又移动到了第一个槽位，那么这时候就会将其阻塞在第一个槽位，等到别的线程来交换数据并唤醒它。</li></ul></li></ul><blockquote><p>多槽交换还涉及到了数组的扩容和缩减</p></blockquote><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>Exchanger 作用就是交换两个线程之间的数据。</p><p>一般情况使用就是两个线程参与交换。假如多个线程同时进行交换数据的话，那么到底是那两个线程的数据互换就是不可控的了，所以多个线程交换数据的场景很少了。</p><p>Exchanger 里面内部实现有单槽交换和多槽交换，只有在单槽交换的时候发生竞争了才会进行多槽交换。</p><p>多槽交换的时候的槽数组里面的位置并不是都是可用的，每个元素都间隔了<code>1 &lt;&lt; ASHIFT </code>，这主要是防止伪共享的问题，也就是缓存行的影响。因为高速缓存和内存每次交换是通过缓存行交换的，数组是连续的内存地址空间，相邻位置的数据很大可能是被加载到高速缓存的同一个缓存行上，假如这样的话，如果一个槽位数据失效了，那么就会影响到同一缓存行其他槽位的数据，迫使它们失效，需要从内存重新加载，影响性能。</p><p>Exchanger 的多槽交换感觉和 LongAdder 有点像，都是通过<strong>无锁+分散</strong>热点来提升性能。</p>',71),i=[u];function k(r,d){return s(),a("div",null,i)}const b=n(l,[["render",k],["__file","15-交换Exchanger.html.vue"]]);export{b as default};
