import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-cadb7c17.js";const e="/assets/broker处理拉消息请求的主流程-6ed97172.png",p={},o=t(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年06月24日00:26:38</td></tr></tbody></table><h2 id="broker-处理消息拉取请求的入口" tabindex="-1"><a class="header-anchor" href="#broker-处理消息拉取请求的入口" aria-hidden="true">#</a> broker 处理消息拉取请求的入口</h2><p>消费者给 broker 发送拉取消息的 RPC 请求的 code 是 RequestCode.PULL_MESSAGE，这个 code 是在 broker 的 PullMessageProcessor 处理器中处理的。入口在 PullMessageProcessor#processRequest(ChannelHandlerContext, RemotingCommand) 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span>
    <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemotingCommandException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里调用了一个三个参数的重载的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">RemotingCommand</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">boolean</span> brokerAllowSuspend<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ....... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这三个参数分别表示：</p><ul><li><code>Channel channel</code>：消费者的 Netty 的通道；</li><li><code>RemotingCommand request</code>：消费者发送过来的请求数据；</li><li><code>boolean brokerAllowSuspend</code>：是否允许 broker 长轮询，如果是 true，表示支持挂起，则将响应对象 response 置为 null，不会立即向客户端写入响应；false，表示此次处理不允许 broker 进行长轮询操作；</li></ul><p>broker 处理消息拉取的 processRequest 方法的流程很长，分步分析：</p><h2 id="拉消息主流程分析" tabindex="-1"><a class="header-anchor" href="#拉消息主流程分析" aria-hidden="true">#</a> 拉消息主流程分析</h2><blockquote><p>我只能说这段代码 RocketMQ 写的非常烂</p></blockquote><p>先看下主流程图：</p><img src="`+e+`" alt="broker处理拉消息请求的主流程" style="zoom:67%;"><h3 id="解析请求数据-创建响应对象" tabindex="-1"><a class="header-anchor" href="#解析请求数据-创建响应对象" aria-hidden="true">#</a> 解析请求数据&amp;创建响应对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建服务器端对请求的 响应对象，header 的类型是 PullMessageResponseHeader</span>
<span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> <span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token function">createResponseCommand</span><span class="token punctuation">(</span><span class="token class-name">PullMessageResponseHeader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">PullMessageResponseHeader</span> responseHeader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PullMessageResponseHeader</span><span class="token punctuation">)</span> response<span class="token punctuation">.</span><span class="token function">readCustomHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 从 request 请求中解析出 requestHeader</span>
<span class="token keyword">final</span> <span class="token class-name">PullMessageRequestHeader</span> requestHeader <span class="token operator">=</span>
    <span class="token punctuation">(</span><span class="token class-name">PullMessageRequestHeader</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">decodeCommandCustomHeader</span><span class="token punctuation">(</span><span class="token class-name">PullMessageRequestHeader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置响应对象的 opaque</span>
response<span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要就是解析消费者发送过来的请求数据，然后创建响应类型的 RemotingCommand 对象。</p><h3 id="校验-broker-是否可读" tabindex="-1"><a class="header-anchor" href="#校验-broker-是否可读" aria-hidden="true">#</a> 校验 broker 是否可读</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 服务器端是否可读</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">PermName</span><span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略异常响应的组装 ......</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验消费者组的订阅信息" tabindex="-1"><a class="header-anchor" href="#校验消费者组的订阅信息" aria-hidden="true">#</a> 校验消费者组的订阅信息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取当前消费者组订阅的配置</span>
<span class="token class-name">SubscriptionGroupConfig</span> subscriptionGroupConfig <span class="token operator">=</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getSubscriptionGroupManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findSubscriptionGroupConfig</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> subscriptionGroupConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略异常响应的组装 ......</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscriptionGroupConfig<span class="token punctuation">.</span><span class="token function">isConsumeEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略异常响应的组装 ......</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是校验当前消费者组的订阅数据是否在 broker 上存在，broker 上的消费者组的订阅数据是消费者通过心跳上报的。</p><h3 id="获取请求数据内的标记" tabindex="-1"><a class="header-anchor" href="#获取请求数据内的标记" aria-hidden="true">#</a> 获取请求数据内的标记</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 是否允许服务器端长轮询（一般是 true）</span>
<span class="token keyword">final</span> <span class="token keyword">boolean</span> hasSuspendFlag <span class="token operator">=</span> <span class="token class-name">PullSysFlag</span><span class="token punctuation">.</span><span class="token function">hasSuspendFlag</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getSysFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 客户端是否提交 offset（一般是 true）</span>
<span class="token keyword">final</span> <span class="token keyword">boolean</span> hasCommitOffsetFlag <span class="token operator">=</span> <span class="token class-name">PullSysFlag</span><span class="token punctuation">.</span><span class="token function">hasCommitOffsetFlag</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getSysFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 客户端请求是否包含 消费者的订阅数据（一般 false）</span>
<span class="token keyword">final</span> <span class="token keyword">boolean</span> hasSubscriptionFlag <span class="token operator">=</span> <span class="token class-name">PullSysFlag</span><span class="token punctuation">.</span><span class="token function">hasSubscriptionFlag</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getSysFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 长轮询的时间长度（默认是 15 秒）</span>
<span class="token keyword">final</span> <span class="token keyword">long</span> suspendTimeoutMillisLong <span class="token operator">=</span> hasSuspendFlag <span class="token operator">?</span> requestHeader<span class="token punctuation">.</span><span class="token function">getSuspendTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取消费者请求数据内的标记数据，主要是：</p><ul><li>hasSuspendFlag：是否允许 broker 进行长轮询；</li><li>hasCommitOffsetFlag：消费者是否提交自己的消费进度；</li><li>hasSubscriptionFlag：表示消费发送请求时，是否带上消费者的订阅数据，默认是 false，也就是不带；</li><li>suspendTimeoutMillisLong：broker 的长轮询的时间；</li></ul><h3 id="校验主题配置信息" tabindex="-1"><a class="header-anchor" href="#校验主题配置信息" aria-hidden="true">#</a> 校验主题配置信息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TopicConfig</span> topicConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTopicConfigManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectTopicConfig</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> topicConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略异常响应的组装 ......</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">PermName</span><span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span>topicConfig<span class="token punctuation">.</span><span class="token function">getPerm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略异常响应的组装 ......</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 请求的 queueId 不能大于等于读队列的个数， 等于号是因为序号是从 0 开始的</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> topicConfig<span class="token punctuation">.</span><span class="token function">getReadQueueNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略异常响应的组装 ......</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 broker 中的 topic 的配置信息，主要包括主题名字，读队列和写队列的个数。然后校验消费者请求数据中的 queueId 是否合法。</p><h3 id="校验-broker-中消费者组的信息" tabindex="-1"><a class="header-anchor" href="#校验-broker-中消费者组的信息" aria-hidden="true">#</a> 校验 broker 中消费者组的信息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取 consumerGroupInfo 信息，校验 consumerGroupInfo</span>
<span class="token class-name">ConsumerGroupInfo</span> consumerGroupInfo <span class="token operator">=</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getConsumerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConsumerGroupInfo</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> consumerGroupInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略异常响应的组装 ......</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 广播模式的校验</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscriptionGroupConfig<span class="token punctuation">.</span><span class="token function">isConsumeBroadcastEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;&amp;</span> consumerGroupInfo<span class="token punctuation">.</span><span class="token function">getMessageModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">MessageModel</span><span class="token punctuation">.</span><span class="token constant">BROADCASTING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略异常响应的组装 ......</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取订阅信息</span>
subscriptionData <span class="token operator">=</span> consumerGroupInfo<span class="token punctuation">.</span><span class="token function">findSubscriptionData</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> subscriptionData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略异常响应的组装 ......</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptionData<span class="token punctuation">.</span><span class="token function">getSubVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> requestHeader<span class="token punctuation">.</span><span class="token function">getSubVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略异常响应的组装 ......</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ExpressionType</span><span class="token punctuation">.</span><span class="token function">isTagType</span><span class="token punctuation">(</span>subscriptionData<span class="token punctuation">.</span><span class="token function">getExpressionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    consumerFilterData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getConsumerFilterManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        requestHeader<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>consumerFilterData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略异常响应的组装 ......</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>consumerFilterData<span class="token punctuation">.</span><span class="token function">getClientVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> requestHeader<span class="token punctuation">.</span><span class="token function">getSubVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略异常响应的组装 ......</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 broker 中获取消费者组的信息，这个信息主要是消费者通过心跳包维护的。剩下的就是一些校验的代码，没什么好分析的。</p><h3 id="创建-tag-消息过滤器" tabindex="-1"><a class="header-anchor" href="#创建-tag-消息过滤器" aria-hidden="true">#</a> 创建 tag 消息过滤器</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 按照 tag 过滤的 filter</span>
messageFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpressionMessageFilter</span><span class="token punctuation">(</span>subscriptionData<span class="token punctuation">,</span> consumerFilterData<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getConsumerFilterManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取消息" tabindex="-1"><a class="header-anchor" href="#读取消息" aria-hidden="true">#</a> 读取消息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 从存储模块获取消息 核心入口</span>
<span class="token keyword">final</span> <span class="token class-name">GetMessageResult</span> getMessageResult <span class="token operator">=</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getMaxMsgNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> messageFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是从 ConsumeQueue 中读取某个消息的 ConsumeQueueData，一个 ConsumeQueueData 主要包含下面三个数据：</p><ul><li>消息在 CommitLog 上的物理偏移量，8 字节；</li><li>消息大小，4 字节；</li><li>tag 的哈希值，8 字节；</li></ul><p>通过这前两个可以去 CommitLog 中读取消息，最后一个数据可以用于 tag 消息在 broker 端的过滤操作。</p><p>具体怎么去 ConsumeQueue 和 CommitLog 中读取数据的，后面单独一篇分析，这个方法里面也比较复杂。</p><h3 id="组装响应数据" tabindex="-1"><a class="header-anchor" href="#组装响应数据" aria-hidden="true">#</a> 组装响应数据</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span>getMessageResult<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置下次查询的 offset，是服务器计算出来的该队列的下一次 pull 时使用的 offset</span>
responseHeader<span class="token punctuation">.</span><span class="token function">setNextBeginOffset</span><span class="token punctuation">(</span>getMessageResult<span class="token punctuation">.</span><span class="token function">getNextBeginOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置为 pull queue 的最小 offset</span>
responseHeader<span class="token punctuation">.</span><span class="token function">setMinOffset</span><span class="token punctuation">(</span>getMessageResult<span class="token punctuation">.</span><span class="token function">getMinOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
responseHeader<span class="token punctuation">.</span><span class="token function">setMaxOffset</span><span class="token punctuation">(</span>getMessageResult<span class="token punctuation">.</span><span class="token function">getMaxOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置客户端下次拉 queue 时推荐使用的 brokerId</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>getMessageResult<span class="token punctuation">.</span><span class="token function">isSuggestPullingFromSlave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    responseHeader<span class="token punctuation">.</span><span class="token function">setSuggestWhichBrokerId</span><span class="token punctuation">(</span>subscriptionGroupConfig<span class="token punctuation">.</span><span class="token function">getWhichBrokerWhenConsumeSlowly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    responseHeader<span class="token punctuation">.</span><span class="token function">setSuggestWhichBrokerId</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MASTER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">ASYNC_MASTER</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">SYNC_MASTER</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">SLAVE</span><span class="token operator">:</span>
        <span class="token comment">// 如果当前主机节点的角色为 slave 并且从节点读 未开启的话</span>
        <span class="token comment">// 直接给客户端一个状态 PULL_RETRY_IMMEDIATELY</span>
        <span class="token comment">// 客户端检查是该状态后，会重新立马再次发起 pull，此时使用的 brokerId 是 master 了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSlaveReadEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">PULL_RETRY_IMMEDIATELY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            responseHeader<span class="token punctuation">.</span><span class="token function">setSuggestWhichBrokerId</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MASTER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 设置建议 brokerId</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSlaveReadEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// consume too slow ,redirect to another machine</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>getMessageResult<span class="token punctuation">.</span><span class="token function">isSuggestPullingFromSlave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        responseHeader<span class="token punctuation">.</span><span class="token function">setSuggestWhichBrokerId</span><span class="token punctuation">(</span>subscriptionGroupConfig<span class="token punctuation">.</span><span class="token function">getWhichBrokerWhenConsumeSlowly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// consume ok</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        responseHeader<span class="token punctuation">.</span><span class="token function">setSuggestWhichBrokerId</span><span class="token punctuation">(</span>subscriptionGroupConfig<span class="token punctuation">.</span><span class="token function">getBrokerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    responseHeader<span class="token punctuation">.</span><span class="token function">setSuggestWhichBrokerId</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">MASTER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里主要就是组装响应数据，主要包括：</p><ul><li><code>Long nextBeginOffset</code>：下次消费者发送拉取请求的偏移量；</li><li><code>Long minOffset</code>：当前消费队列的最小偏移量；</li><li><code>Long maxOffset</code>：当前消费队列的最大偏移量；</li><li><code>Long suggestWhichBrokerId</code>：下次消费者发送拉取请求建议请求到那个 broker，因为 broker 是有主从概念的，假如当前读取的数据被 RocketMQ 视为“冷数据”，那么就会建议消费者下次的拉取请求发送到 slave 节点。“冷数据”指的是当前请求拉取消息的偏移量和目前最大的偏移量大于系统物理内存的 40%，说明消费者消费进度落后很多，这时如果再去 master 节点去拉取消息，就会给 master 节点增大压力。</li></ul><h3 id="处理消息读取的结果" tabindex="-1"><a class="header-anchor" href="#处理消息读取的结果" aria-hidden="true">#</a> 处理消息读取的结果</h3><p>如果读取消息成功，返回的响应码会是 ResponseCode.SUCCESS，这里主要就是将从 CommitLog 中读取的消息数据转换成一个字节数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 本次 pull 出来的全部消息用 byte 数组表示</span>
<span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> r <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readGetMessageResult</span><span class="token punctuation">(</span>getMessageResult<span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerStatsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incGroupGetLatency</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTimeMills<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将消息 byte 数组 保存到 response body 字段</span>
response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果本次未读取到消息，返回的响应码会是 ResponseCode.PULL_NOT_FOUND，这里主要处理消息拉取长轮询的逻辑，本篇暂不分析，单独一篇分析。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>就这一个方法几百行代码，只能说有点烂。</p><p>本次就分析了 broker 是如何处理消费者的消息拉取请求的，首先：</p><ul><li>首先就是解析来自消费者的请求数据；</li><li>然后就是做一些校验，例如当前 broker 是否可读、消费者组的订阅信息、broker 的主题配置信息、消费者组心跳维护的信息；</li><li>然后就是去 broker 的存储模块去读取消息了，先是从 ConsumeQueue 中读取消息偏移量和消息大小，然后到 CommitLog 去读取消息；</li><li>最后就是处理读取到的消息了：如果是读取到了消息，那就保存队列的消费进度，然后响应本次拉取到的消息给消费者；如果没有读取到消息，就开启 broker 的长轮询操作；</li></ul><p>如何读取消息和 broker 的长轮询操作在后面的文章分析。</p>`,52),c=[o];function u(l,i){return s(),a("div",null,c)}const d=n(p,[["render",u],["__file","21-broker处理消息拉取请求-1-主流程.html.vue"]]);export{d as default};
