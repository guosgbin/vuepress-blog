import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,f as a}from"./app-341a7728.js";const n="/assets/image-20240301171602858-1a8ade1b.png",s="/assets/3-27f77db5.jpg",i="/assets/28-20240301182540566-915583aa.jpg",o="/assets/image-20240301182631659-88a6dcfb.png",d="/assets/image-20240301182655114-c78a87e9.png",c="/assets/image-20240301190447952-26940e49.png",r="/assets/image-20240301190546289-d070eed8.png",p={},g=a(`<h2 id="现象" tabindex="-1"><a class="header-anchor" href="#现象" aria-hidden="true">#</a> 现象</h2><p>2023 年跨年夜，一个大主播关播，大量服务异常，经客户端查看日志，是请求业务接口超时。</p><h2 id="问题排查和分析" tabindex="-1"><a class="header-anchor" href="#问题排查和分析" aria-hidden="true">#</a> 问题排查和分析</h2><h3 id="客户端请求路径" tabindex="-1"><a class="header-anchor" href="#客户端请求路径" aria-hidden="true">#</a> 客户端请求路径</h3><p>客户端请求路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>客户端 -&gt; 阿里云slb -&gt; nginx -&gt; Tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过日志分析，客户端请求信息并没有落到 nginx 日志，怀疑客户端到 nginx 的链路出了问题，从阿里云 slb 当时的流量以及连接数上看，并没有达到上限，咨询阿里云，阿里云的反馈是：slb 侧是有失败连接突增的，后端也出现了健康检查失败的情况，怀疑跟当时业务新建连接增加有关”</p><img src="`+n+`" alt="image-20240301171602858" style="zoom:100%;"><p>观察机器负载情况：</p><ul><li>nginx 机器当时的 cpu、内存、负载、网络流入流出没有异常；</li><li>业务服务器当时的 cpu、内存、负载、网络流入流出没有异常；</li></ul><p>从后端机器负载上看，无明显异常，因此可判断连接异常跟业务系统无关，有可能是 nginx 机器的系统 socket 配置问题：</p><h3 id="全连接队列和半连接队列丢弃请求查询" tabindex="-1"><a class="header-anchor" href="#全连接队列和半连接队列丢弃请求查询" aria-hidden="true">#</a> 全连接队列和半连接队列丢弃请求查询</h3><p>连接异常下命令查看，显示 TCP 相关的网络统计数据，并筛选出包含 &quot;drop&quot;、&quot;reject&quot;、&quot;overflowed&quot;、&quot;listen&quot; 或 &quot;filter&quot; 关键词的统计信息行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>netstat -st |egrep -i &quot;drop|reject|overflowed|listen|filter&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行一下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-st</span> <span class="token operator">|</span><span class="token function">egrep</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;drop|reject|overflowed|listen|filter&quot;</span>
    <span class="token number">26771</span> ICMP packets dropped because they were out-of-window
    <span class="token number">5</span> ICMP packets dropped because socket was locked
    <span class="token number">11678441</span> <span class="token builtin class-name">times</span> the listen queue of a socket overflowed
    <span class="token number">13291240</span> SYNs to LISTEN sockets dropped
    TCPBacklogDrop: <span class="token number">14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是从开机以来的统计，因为队列溢出，总共丢弃2千多万个连接，因为这是统计数据，不能确定是什么时候丢弃，可后续观察</p><p>其中：</p><ul><li>xxx times the listen queue of a socket overflowed 表示全连接队列满了</li><li>xxx SYNs to LISTEN sockets dropped 表示半连接队列满了</li></ul><p>半连接队列 SYN queue，长度由下面三个参数最小值决定：</p><ul><li>tcp_max_syn_backlog，内核参数，通过/proc/sys/net/ipv4/tcp_max_syn_backlog来设置；</li><li>net.core.somaxconn，somaxconn 是Linux内核参数，默认128，可通过/proc/sys/net/core/somaxconn进行配置；</li><li>业务 tcp 调用 listen(fd, backlog) 的 backlog；</li></ul><p>全连接队列：ACCEPT queue ， 长度由下面两者的最小值决定，也就是 min(backlog,somaxconn)</p><ul><li>net.core.somaxconn，somaxconn 是Linux内核参数，默认128，可通过/proc/sys/net/core/somaxconn进行配置；</li><li>业务的 listen(fd, backlog) 的 backlog；</li></ul><blockquote><p>参考地址：</p><p>https://blog.csdn.net/zhangyanfei01/article/details/119881277</p><p>https://www.xiaolincoding.com/network/3_tcp/tcp_queue.html#%E4%BB%80%E4%B9%88%E6%98%AF-tcp-%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97</p></blockquote><h3 id="nginx-连接配置分析" tabindex="-1"><a class="header-anchor" href="#nginx-连接配置分析" aria-hidden="true">#</a> nginx 连接配置分析</h3><p>从前面分析来看，nginx 机器存在连接丢弃情况，影响 nignx 连接的参数有：</p><ul><li>tcp_max_syn_backlog 半连接队列长度的一个配置项（连接中，未完成连接）</li><li>net.core.somaxconn 全连接队列长度（已完成连接，但是没有accept）</li><li>nginx listen 的backlog参数（调用系统listen时候的入参，会根据tcp_max_syn_backlog、net.core.somaxcon、backlog）</li></ul><p>下图是客户端与 nginx 建立连接的过程，半连接、全连接的位置：</p><img src="`+s+'" alt="img" style="zoom:100%;"><ul><li>client 发送 SYN 到 server，将状态修改为 SYN_SEND，如果 server 收到请求，则将状态修改为 SYN_RCVD，并把该请求放到 syns queue 队列中</li><li>server 回复 SYN+ACK 给 client，如果 client 收到请求，则将状态修改为 ESTABLISHED，并发送 ACK 给 server</li><li>server 收到 ACK，将状态修改为 ESTABLISHED，并把该请求从 syns queue 中放到 accept queue</li></ul><p><strong>全连接队列：执行ss -lnt 全连接队列情况：</strong></p><ul><li>Recv-Q：当前全连接队列的大小，也就是当前已完成三次握手并等待服务端 <code>accept()</code> 的 TCP 连接；</li><li>Send-Q：当前全连接最大队列长度，上面的输出结果说明监听 443 端口的 TCP 服务，最大全连接长度为 128；</li></ul><p>当服务端并发处理大量请求时，如果 TCP 全连接队列过小，就容易溢出。发生 TCP 全连接队溢出的时候，后续的请求就会被丢弃，这样就会出现服务端请求数量上不去的现象。</p><p>当发现 TCP 全连接队列发生溢出的时候，我们就需要增大该队列的大小，以便可以应对客户端大量的请求。TCP 全连接队列的最大值取决于 somaxconn 和 backlog 之间的最小值，也就是 min(somaxconn, backlog)</p><p><strong>半连接队列：执行 netstat -natp | grep SYN_RECV | wc -l</strong></p><p>半连接队列最大长度由系统参数tcp_max_syn_backlog 以及全连接队列状态决定：</p><img src="'+i+'" alt="img" style="zoom:50%;"><h3 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h3><p>通过调整 nginx backlog 验证连接队列对突发连接影响，1 秒并发 2000：</p><p>backlog = 2</p><img src="'+o+'" alt="image-20240301182631659" style="zoom:80%;"><p>backlog = 128</p><img src="'+d+'" alt="image-20240301182655114" style="zoom:80%;"><h2 id="问题解决" tabindex="-1"><a class="header-anchor" href="#问题解决" aria-hidden="true">#</a> 问题解决</h2><h3 id="参数修改" tabindex="-1"><a class="header-anchor" href="#参数修改" aria-hidden="true">#</a> 参数修改</h3><p>通过上面分析，nginx 连接调优应该调整tcp_max_syn_backlog、net.core.somaxconn、backlog的值：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">当前值</th><th style="text-align:left;">调整值</th><th style="text-align:left;">操作</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>tcp_max_syn_backlog</strong></td><td style="text-align:left;">262144</td><td style="text-align:left;">262144</td><td style="text-align:left;">vim /etc/sysctl.confnet.ipv4.tcp_max_syn_backlog = 262144sysctl -p</td></tr><tr><td style="text-align:left;"><strong>net.core.somaxconn</strong></td><td style="text-align:left;">128</td><td style="text-align:left;">1024</td><td style="text-align:left;">vim /etc/sysctl.confnet.core.somaxconn = 1024sysctl -p</td></tr><tr><td style="text-align:left;"><strong>backlog(nginx)</strong></td><td style="text-align:left;">511</td><td style="text-align:left;">1024</td><td style="text-align:left;">vim conf/nginx.conflisten 443 backlog=1024</td></tr></tbody></table><p>执行netstat -st |egrep -i &quot;drop|reject|overflowed|listen|filter&quot; 查看半连接、全连接队列丢弃是否有增多，以验证优化是否有效果</p><h3 id="优化效果" tabindex="-1"><a class="header-anchor" href="#优化效果" aria-hidden="true">#</a> 优化效果</h3><p>通过一组对照机器查看优化效果，一台调整过参数值，一台还是旧的参数值。</p><p>经过一个周末，连接队列丢弃数据对比：</p><table><thead><tr><th style="text-align:left;">ip</th><th style="text-align:left;">调整过参数值的机器</th><th style="text-align:left;">调整过参数值的机器</th><th style="text-align:left;">未调整过的机器</th><th style="text-align:left;">未调整过的机器</th></tr></thead><tbody><tr><td style="text-align:left;">日期</td><td style="text-align:left;">全连接丢弃</td><td style="text-align:left;">半连接丢弃</td><td style="text-align:left;">全连接丢弃</td><td style="text-align:left;">半连接丢弃</td></tr><tr><td style="text-align:left;">2024/1/12</td><td style="text-align:left;">11711465</td><td style="text-align:left;">13340388</td><td style="text-align:left;">11360315</td><td style="text-align:left;">12990207</td></tr><tr><td style="text-align:left;">2024/1/15</td><td style="text-align:left;">11712283</td><td style="text-align:left;">13344129</td><td style="text-align:left;">11373654</td><td style="text-align:left;">13007022</td></tr><tr><td style="text-align:left;">丢弃差值</td><td style="text-align:left;">818</td><td style="text-align:left;">3741</td><td style="text-align:left;">13339</td><td style="text-align:left;">16815</td></tr></tbody></table><p>调整过参数的机器负载：</p><img src="'+c+'" alt="image-20240301190447952" style="zoom:100%;"><p>未调整参数的机器负载：</p><img src="'+r+'" alt="image-20240301190546289" style="zoom:100%;"><p>从对比结果上看，优化效果明显，优化后的丢弃连接数少很多了，负载无明显波动。</p><p>最后最终参数调整为：</p><p>net.core.somaxconn：8192</p><p>backlog(nginx)：8192</p>',60),x=[g];function u(m,h){return e(),l("div",null,x)}const b=t(p,[["render",u],["__file","006-linux系统参数-连接队列长度过小导致连接丢弃.html.vue"]]);export{b as default};
