import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-ecfdc732.js";const t="/assets/broker过期文件删除机制-024801b4.png",p={},o=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年06月22日13:15:53</td></tr></tbody></table><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h2><p>由于内存和磁盘都是有限的资源，Broker 不可能永久地保存所有数据，所以一些超过保存期限的数据会被定期删除。在 RocketMQ 中有 commitlog、ConsumeQueue、Index 这三种重要的文件，本文分析这三个文件是如何被定期删除的。</p><p>定期删除涉及到一些后台线程服务：</p><ul><li>CleanCommitLogService：检查/处理 commitLog 文件删除的服务；</li><li>CleanConsumeQueueService：检查/处理 ConsumeQueue 和 Index 文件删除的服务；</li></ul><p>这两个服务是通过定时任务调度的，默认 10 秒钟检查文件是否需要删除。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanFilesPeriodically</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStoreConfig<span class="token punctuation">.</span><span class="token function">getCleanResourceInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+`" alt="broker过期文件删除机制"></p><h2 id="commitlog-过期处理" tabindex="-1"><a class="header-anchor" href="#commitlog-过期处理" aria-hidden="true">#</a> commitLog 过期处理</h2><p>什么时候删除 commitLog 文件，RocketMQ 目前有两个情况会触发删除：</p><ul><li>假如 commitLog 文件最后一次更新时间距离当前已经超过 72 小时了（默认值，可配置）；</li><li>假如 commitLog 文件所在的磁盘空间超过 85% 时（默认值，可配置），也会触发删除操作。</li></ul><p>其实还有第三个情况会触发，这里不做分析。</p><p>清除 CommitLog 文件主要是 CleanCommitLogService 后台线程服务。看一下 CleanCommitLogService#run 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 删除过期的文件</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteExpiredFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">redeleteHangedFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service has exception. &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>deleteExpiredFiles 方法：尝试删除 CommitLog 文件；</li><li>redeleteHangedFile 方法：在上一步删除 CommitLog 文件时，该文件可能被别的程序引用了，这个方法的作用是在一段时间后强制删除 CommitLog 文件。</li></ul><p>主要看 deleteExpiredFiles 方法做了什么 CleanCommitLogService#deleteExpiredFiles</p><p><strong>（1）第一步：获取清理相关的参数；</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> deleteCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 获取文件最大保留时间，默认 72 小时</span>
<span class="token keyword">long</span> fileReservedTime <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFileReservedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 删除物理文件的间隔时间，默认 100ms</span>
<span class="token keyword">int</span> deletePhysicFilesInterval <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeleteCommitLogFilesInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 表示第一次拒绝删除之后能保留文件的最大时间，超过改时间后，文件将被强制删除，默认 120s</span>
<span class="token keyword">int</span> destroyMapedFileIntervalForcibly <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDestroyMapedFileIntervalForcibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要关注 fileReservedTime 和 deletePhysicFilesInterval：</p><ul><li>fileReservedTime：CommitLog 文件保留的最大时间，默认是 72 小时；</li><li>deletePhysicFilesInterval：可能会删除多个 CommitLog 文件，删除多个文件之间需要间隔一小段时间，默认 100ms；</li></ul><p><strong>（2）第二步：校验是否达到删除条件</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 删除文件的时间点，默认 4 点</span>
<span class="token keyword">boolean</span> timeup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isTimeToDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 检查磁盘空间是否充足，如果磁盘空间不充足，则返回true，表示应该触发过期文件删除操作。</span>
<span class="token keyword">boolean</span> spacefull <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isSpaceToDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 预留手动触发机制，目前RocketMQ暂未封装手工触发文件删除的命令。</span>
<span class="token keyword">boolean</span> manualDelete <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>manualDeleteFileSeveralTimes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要有三种：</p><ul><li>过期：假如 commitLog 文件最后一次更新时间距离当前已经超过 72 小时了（默认值，可配置）；</li><li>磁盘不足：假如 commitLog 文件所在的磁盘空间超过 85% 时（默认值，可配置），也会触发删除操作；</li><li>手动触发；</li></ul><p><strong>（3）第三步：调用 MappedFile 相关删除文件的方法。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// RocketMQ 满足如下任意一种情况将继续执行删除文件的操作</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>timeup <span class="token operator">||</span> spacefull <span class="token operator">||</span> manualDelete<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>manualDelete<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>manualDeleteFileSeveralTimes<span class="token operator">--</span><span class="token punctuation">;</span>

    <span class="token comment">// 是否立即清理，cleanImmediately 会在磁盘空间不足的时候修改为 true</span>
    <span class="token keyword">boolean</span> cleanAtOnce <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCleanFileForciblyEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cleanImmediately<span class="token punctuation">;</span>

    <span class="token comment">// ...... 省略日志打印 ......</span>

    fileReservedTime <span class="token operator">*=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>

    <span class="token comment">// 清理</span>
    deleteCount <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">deleteExpiredFile</span><span class="token punctuation">(</span>fileReservedTime<span class="token punctuation">,</span> deletePhysicFilesInterval<span class="token punctuation">,</span>
                                                                       destroyMapedFileIntervalForcibly<span class="token punctuation">,</span> cleanAtOnce<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...... 省略 ......</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="consumequeue-和-index-过期处理" tabindex="-1"><a class="header-anchor" href="#consumequeue-和-index-过期处理" aria-hidden="true">#</a> ConsumeQueue 和 Index 过期处理</h2><p>因为 CommitLog 文件会过期，那么其对应的 ConsumeQueue 和 Index 文件就没有必要再保留了。RocketMQ的删除策略是定时检查，满足删除条件时会删除过期或者无意义的文件。CleanConsumeQueueService 服务用来处理这两个文件的删除。</p><p>CleanConsumeQueueService#deleteExpiredFiles</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">deleteExpiredFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 删除每个 consumeQueue 的间隔时间，默认 100ms</span>
    <span class="token keyword">int</span> deleteLogicsFilesInterval <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessageStoreConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeleteConsumeQueueFilesInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// CommitLog 全部文件中的最小物理位点</span>
    <span class="token keyword">long</span> minOffset <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>commitLog<span class="token punctuation">.</span><span class="token function">getMinOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断是否有新数据没有被检查过</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>minOffset <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastPhysicalMinOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastPhysicalMinOffset <span class="token operator">=</span> minOffset<span class="token punctuation">;</span>

        <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ConcurrentMap</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tables <span class="token operator">=</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>consumeQueueTable<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">&gt;</span></span> maps <span class="token operator">:</span> tables<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumeQueue</span> logic <span class="token operator">:</span> maps<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 根据 CommitLog 全部文件中的最小物理位点尝试删除 ConsumeQueue 的文件</span>
                <span class="token keyword">int</span> deleteCount <span class="token operator">=</span> logic<span class="token punctuation">.</span><span class="token function">deleteExpiredFile</span><span class="token punctuation">(</span>minOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>deleteCount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> deleteLogicsFilesInterval <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>deleteLogicsFilesInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 删除 indexService 的过期文件</span>
        <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>indexService<span class="token punctuation">.</span><span class="token function">deleteExpiredFile</span><span class="token punctuation">(</span>minOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面方法的关键点就是 <code>minOffset &gt; this.lastPhysicalMinOffset</code> 这个判断，介绍一下这两个变量：</p><ul><li>minOffset：当前磁盘上 CommitLog 文件最小的物理偏移量；</li><li>lastPhysicalMinOffset：当前服务已经检查到了哪一个物理偏移量了；</li></ul><p>如果 <code>minOffset &gt; this.lastPhysicalMinOffset</code> 成立，说明还有新数据没有检查，需要去检查 ConsumeQueue 和 Index 文件是否需要删除。</p><p>然后遍历所有的 ConsumeQueue，依次检查 ConsumeQueue 文件是否需要删除，如果过期最后还是调用 MappedFile 的删除方法去删除。对于 Index 文件的删除，除开当前正在写的文件，其他文件都需要检查其存储的文件是否需要删除。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>CommitLog、ConsumeQueue、Index 不会一直存储在磁盘上，需要定时去清理这些文件。</p><ul><li>CommitLog 文件最大存储时间是 72 小时（默认值，可配置），另外假如磁盘占用率过高也是会强制清除 CommitLog 文件的；</li><li>ConsumeQueue 和 Index 文件的删除，是依据所有的 CommitLog 文件中最小的物理偏移量 A去删除的，也就是说假如 ConsumeQueue 和 Index 文件中保存的数据都是小于这个最小偏移量 A 的，那么就需要删除了；</li></ul>`,37),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","17-broker过期文件删除机制.html.vue"]]);export{d as default};
