import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as e}from"./app-024e0b54.js";const p={},t=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年08月10日21:10:24</td></tr><tr><td>V2</td><td>重构</td><td>2023年06月18日17:23:49</td></tr></tbody></table><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h2><p>RocketMQ 中存储的三个存储相关的文件 CommitLog、ComsumeQueue 和 IndexFile 这些类的底层都是基于 MappedFile 来实现的，所以在分析这些类之前需要先了解 MappedFile 类。</p><p>MappedFile 中用的是 mmap 技术，具体的 mmap 技术可以去看这篇文章 <a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html#4008787">mmap 是什么</a></p><p>内存映射是一种将文件的一部分直接映射到进程的虚拟地址空间中，使得这部分区域的访问就像访问内存一样。在使用内存映射时，应用程序不需要调用系统调用来读取或写入文件内容，而是可以通过对内存地址的直接访问来完成操作。</p><p>内存映射创建了一个虚拟地址空间范围，它可以被当作一个数组来访问。与普通的数组不同的是，内存映射数组的内容实际上是存储在文件中的。当应用程序访问内存映射数组时，操作系统会自动将相应的文件数据读取到内存中。</p><p>内存映射技术具有以下特点：</p><ol><li><strong>避免了频繁的系统调用</strong>：内存映射技术可以减少I/O系统调用的次数，提高访问文件的效率。</li><li><strong>简化了文件访问</strong>：使用内存映射技术可以将文件访问看作是对内存的访问，简化了应用程序的代码和运行逻辑。</li><li><strong>共享内存</strong>：多个进程可以同时共享同一个文件的内存映射，使得进程之间的通信更加高效。</li><li><strong>可以实现随机访问</strong>：内存映射技术可以实现对文件的随机访问，从而支持大型文件的读写。</li></ol><p>但是，内存映射技术也有一些限制。由于内存映射是将文件直接映射到内存中，所以需要足够的内存来存储文件数据。此外，使用内存映射技术时需要注意控制内存区域的大小，以免过度消耗系统资源。</p><h2 id="mappedfile" tabindex="-1"><a class="header-anchor" href="#mappedfile" aria-hidden="true">#</a> MappedFile</h2><h3 id="mappedfile-继承体系" tabindex="-1"><a class="header-anchor" href="#mappedfile-继承体系" aria-hidden="true">#</a> MappedFile 继承体系</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappedFile</span> <span class="token keyword">extends</span> <span class="token class-name">ReferenceResource</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MappedFile 继承抽象类 ReferenceResource。</p><h3 id="referenceresource-分析" tabindex="-1"><a class="header-anchor" href="#referenceresource-分析" aria-hidden="true">#</a> ReferenceResource 分析</h3><p>ReferenceResource 是引用计数相关的抽象类</p><p>ReferenceResource 的字段如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceResource</span> <span class="token punctuation">{</span>
    <span class="token comment">// 引用数量，初始值 1，当引用数量 &lt;= 0 的时候，表示该资源可以释放了，没有任何其他程序依赖它了</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> refCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 是否存活，false 表示资源处于非存活状态，不可用</span>
    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> available <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 是否已经清理了，当调用了子类的 cleanup 方法后，该值设置为 true，表示资源已经全部释放了</span>
    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> cleanupOver <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 第一次 shutdown 时间，第一次关闭资源可能会失败，</span>
    <span class="token comment">// 比如说外部程序还依赖当前资源 refCount &gt; 0，此时在这记录初次关闭的时间，</span>
    <span class="token comment">// 之后再次关闭该资源的时候，会传递一个 interval 参数，如果   系统当前时间 - firstShutdownTimestamp &gt; interval，则强制关闭</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> firstShutdownTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于这个类的方法，既然是引用计数相关的，那重要的方法就两个了，</p><ol><li>使用资源，增加引用计数；</li><li>释放资源，减少引用计数；</li></ol><p>具体方法细节后面分析</p><h3 id="mappedfile-属性" tabindex="-1"><a class="header-anchor" href="#mappedfile-属性" aria-hidden="true">#</a> MappedFile 属性</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappedFile</span> <span class="token keyword">extends</span> <span class="token class-name">ReferenceResource</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">OS_PAGE_SIZE</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InternalLogger</span> log <span class="token operator">=</span> <span class="token class-name">InternalLoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LoggerName</span><span class="token punctuation">.</span><span class="token constant">STORE_LOGGER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> <span class="token constant">TOTAL_MAPPED_VIRTUAL_MEMORY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> <span class="token constant">TOTAL_MAPPED_FILES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> wrotePosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> committedPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> flushedPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> fileSize<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">FileChannel</span> fileChannel<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">ByteBuffer</span> writeBuffer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">TransientStorePool</span> transientStorePool <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fileName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> fileFromOffset<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">File</span> file<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">MappedByteBuffer</span> mappedByteBuffer<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> storeTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> firstCreateInQueue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>int OS_PAGE_SIZE</td><td>操作系统内存页的大小，默认 4 KB</td></tr><tr><td>AtomicLong TOTAL_MAPPED_VIRTUAL_MEMORY</td><td>当前 Java 进程中所有的 MappedFile 占用的总虚拟内存的大小</td></tr><tr><td>AtomicInteger TOTAL_MAPPED_FILES</td><td>当前 Java 进程下所有的 MappedFile 的个数</td></tr><tr><td>AtomicInteger wrotePosition</td><td>当前 MappedFile 文件的写指针，从 0 开始</td></tr><tr><td>AtomicInteger committedPosition</td><td>开启了 TransientStorePool 才会使用，表示 commit 提交指针，先 commit 到内存映射的 bytebuffer 中</td></tr><tr><td>AtomicInteger flushedPosition</td><td>MappedFile 数据的刷盘点， flushedPosition 之前的数据都是安全落盘的数据，flushedPosition 到 wrotePosition 之间的数据属于脏页</td></tr><tr><td>int fileSize</td><td>MappedFile 文件的大小</td></tr><tr><td>FileChannel fileChannel</td><td>MappedFile 文件的通道</td></tr><tr><td>ByteBuffer writeBuffer</td><td>开启了 TransientStorePool 才会使用，先临时存储写入的消息</td></tr><tr><td>TransientStorePool transientStorePool</td><td>堆外内存池，用于实现内存级别的读写分离。需要配置开启该机制</td></tr><tr><td>String fileName</td><td>当前 MappedFile 的文件名，就是 CommitLog 和 ConsumeQueue 的名字</td></tr><tr><td>long fileFromOffset</td><td>文件名转 long 的值，其实就是该文件的初始偏移量</td></tr><tr><td>File file</td><td>文件对象</td></tr><tr><td>MappedByteBuffer mappedByteBuffer</td><td>物理文件对应的内存映射缓冲区 buffer，访问虚拟内存</td></tr><tr><td>long storeTimestamp</td><td>文件最后一次写入的时间</td></tr><tr><td>boolean firstCreateInQueue</td><td>当前文件如果是该目录下的第一个文件则为 true。其实就是是否是 MappedFileQueue 队列中的第一个文件</td></tr></tbody></table><h3 id="mappedfile-初始化" tabindex="-1"><a class="header-anchor" href="#mappedfile-初始化" aria-hidden="true">#</a> MappedFile 初始化</h3><p>接下来看 MappedFile 文件的创建，主要看 MappedFile#init(java.lang.String, int) 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fileSize<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 文件名</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fileName <span class="token operator">=</span> fileName<span class="token punctuation">;</span>
    <span class="token comment">// 文件大小</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fileSize <span class="token operator">=</span> fileSize<span class="token punctuation">;</span>
    <span class="token comment">// 创建文件对象</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 文件名转 long，也就是该文件的初始偏移量</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fileFromOffset <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// 确定父级目录是否存在，不存在就创建一个</span>
    <span class="token function">ensureDirOK</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建文件通道</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取内存映射缓冲区</span>
        <span class="token comment">// 将文件内容使用 NIO 的内存映射 Buffer 将文件映射到内存中</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">MapMode</span><span class="token punctuation">.</span><span class="token constant">READ_WRITE</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">TOTAL_MAPPED_VIRTUAL_MEMORY</span><span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>fileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">TOTAL_MAPPED_FILES</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ...... 省略异常处理 ......</span>
    
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很简单，就是创建一个文件 File，并将其映射到内存中，保存到 mappedByteBuffer 中。</p><h3 id="mappedfile-的主要-api" tabindex="-1"><a class="header-anchor" href="#mappedfile-的主要-api" aria-hidden="true">#</a> MappedFile 的主要 api</h3><ol><li>MappedFile#appendMessage：有一些重载方法，追加消息到 MappedFile 文件；</li><li>MappedFile#flush：刷盘方法，将内存中的数据写入磁盘；</li><li>MappedFile#selectMappedBuffer：创建 MappedByteBuffer 的副本，指定开始位置和大小做切片；</li><li>MappedFile#destroy：销毁映射文件对象，删除 MappedFile 对应的文件；</li><li>MappedFile#cleanup：释放堆外内存 mappedByteBuffer；</li></ol><h4 id="写消息到-mappedfile" tabindex="-1"><a class="header-anchor" href="#写消息到-mappedfile" aria-hidden="true">#</a> 写消息到 MappedFile</h4><p>MappedFile#appendMessagesInner</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AppendMessageResult</span> <span class="token function">appendMessagesInner</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MessageExt</span> messageExt<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">AppendMessageCallback</span> cb<span class="token punctuation">,</span>
        <span class="token class-name">PutMessageContext</span> putMessageContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略 ......</span>

    <span class="token comment">// 获取当前内存映射文件的写指针</span>
    <span class="token keyword">int</span> currentPos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wrotePosition<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 条件成立说明当前文件还未写满，可以继续写</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPos <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建内存切片</span>
        <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> writeBuffer <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> writeBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将切片的 byteBuffer 设置数据写入位点</span>
        byteBuffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>currentPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AppendMessageResult</span> result<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageExt <span class="token keyword">instanceof</span> <span class="token class-name">MessageExtBrokerInner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// case:单条消息</span>
            <span class="token comment">/*
                * 向内存映射追加数据
                * param 1: 当前文件的起始偏移地址
                * param 2: 当前文件对应的 MappedByteBuffer slice 后的切片
                * param 3: 当前文件还剩多少空间可以写入
                * param 4: 需要写入的消息（就是根据生产者发送过来的消息，封装了个新的）
                * param 5:
                */</span>
            result <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">doAppend</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> byteBuffer<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileSize <span class="token operator">-</span> currentPos<span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token class-name">MessageExtBrokerInner</span><span class="token punctuation">)</span> messageExt<span class="token punctuation">,</span> putMessageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// ...... 省略处理批量消息和异常的情况   ......</span>

        <span class="token comment">// 更新数据写入位点，加上刚刚写入的数据量</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>wrotePosition<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getWroteBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 保存最后一条 msg 的存储时间</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>storeTimestamp <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写消息的流程</p><ol><li>首先获取当前文件的写指针的位置 currentPos ，校验当前 MappedFile 文件是否写满；</li><li>获取内存切片，设置切片出来的 ByteBuffer 的指针为 currentPos；</li><li>根据消息类型走不同的分支，就是调用 AppendMessageCallback#doAppend 方法去写入；</li><li>更新当前 MappedFile 文件的写指针位置，保存最后一次写入的时间戳；</li></ol><h4 id="mappedfile-flush" tabindex="-1"><a class="header-anchor" href="#mappedfile-flush" aria-hidden="true">#</a> MappedFile#flush</h4><p>MappedFile#flush</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 刷盘，将内存中的数据写入磁盘，永久存储在磁盘中
 *
 * <span class="token keyword">@param</span> <span class="token parameter">flushLeastPages</span> 刷盘的最小页数 （等于 0 时，属于强制刷盘， &gt; 0时，需要脏页数据达到 flushLeastPages 时才进行物理刷盘）
 * <span class="token keyword">@return</span> The current flushed position
 */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> flushLeastPages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isAbleToFlush</span><span class="token punctuation">(</span>flushLeastPages<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 引用计数自增，保证刷盘过程中，不会释放资源</span>
            <span class="token comment">// 获取数据写入位点</span>
            <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">getReadPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">//We only append data to fileChannel or mappedByteBuffer, never both.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>writeBuffer <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel<span class="token punctuation">.</span><span class="token function">force</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 落盘，将内存中的数据持久化到磁盘中</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">force</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred when force data to disk.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 写入位点赋值给刷盘点</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>flushedPosition<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 引用计数 -1</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;in flush, hold failed, flush offset = &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flushedPosition<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>flushedPosition<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">getReadPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回最新的刷盘点</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFlushedPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刷盘方法，有一个参数 flushLeastPages ，</p><ol><li>当 flushLeastPages 小于等于 0 时，表示强制刷盘，只要有脏数据就刷盘；</li><li>当 flushLeastPages 大于 0 时，需要脏页数据达到 flushLeastPages 时才进行刷盘；</li></ol><p>在 MappedFile 中有个表示刷盘位点的指针 flushedPosition，还有表示写入位点的指针 wrotePosition。</p><p>flushedPosition 到 wrotePosition 之间的数据就是脏数据，等待刷盘的数据，而 flushedPosition 之前的数据都是已经安全落盘的数据。</p><p>刷盘的流程：</p><ol><li>首先根据入参 flushLeastPages 校验当前是否可以进行刷盘；</li><li>假如可以刷盘，就调用 ReferenceResource#hold 方法给当前 MappedFile 的引用计数加 1；</li><li>调用 api 强制刷盘；</li><li>更新刷盘点 flushedPosition，MappedFile 的引用计数减 1；</li></ol><h4 id="mappedfile-selectmappedbuffer" tabindex="-1"><a class="header-anchor" href="#mappedfile-selectmappedbuffer" aria-hidden="true">#</a> MappedFile#selectMappedBuffer</h4><p>在看这个方法之前需要看一下 SelectMappedBufferResult 类的属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectMappedBufferResult</span> <span class="token punctuation">{</span>

    <span class="token comment">// 切片出来的 buffer 在 commitLog的偏移量</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> startOffset<span class="token punctuation">;</span>

    <span class="token comment">// 切片出来的 buffer</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> byteBuffer<span class="token punctuation">;</span>

    <span class="token comment">// 大小</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token comment">// 属于哪一个 mappedFile</span>
    <span class="token keyword">private</span> <span class="token class-name">MappedFile</span> mappedFile<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>startOffset</td><td>从 MappedFile 中切片出来的 Buffer 的在 MappedFile 的物理偏移量</td></tr><tr><td>byteBuffer</td><td>切片出来的 buffer</td></tr><tr><td>size</td><td>切片出来的 buffer 的 size</td></tr><tr><td>mappedFile</td><td>从那个 MappedFile 中切片出来的</td></tr></tbody></table><p>OK 那么来看切片方法了，看注释就行了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 创建 mappedByteBuffer 副本
 * 会增加引用计数
 *
 * <span class="token keyword">@param</span> <span class="token parameter">pos</span> 开始位置
 * <span class="token keyword">@param</span> <span class="token parameter">size</span> 大小
 */</span>
<span class="token keyword">public</span> <span class="token class-name">SelectMappedBufferResult</span> <span class="token function">selectMappedBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前文件的写入位点</span>
    <span class="token keyword">int</span> readPosition <span class="token operator">=</span> <span class="token function">getReadPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> readPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 增加引用计数</span>
            <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedByteBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            byteBuffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 切片一个新的 buffer</span>
            <span class="token class-name">ByteBuffer</span> byteBufferNew <span class="token operator">=</span> byteBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            byteBufferNew<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SelectMappedBufferResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fileFromOffset <span class="token operator">+</span> pos<span class="token punctuation">,</span> byteBufferNew<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略日志打印 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token comment">// ...... 省略日志打印 ......</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mappedfile-destroy" tabindex="-1"><a class="header-anchor" href="#mappedfile-destroy" aria-hidden="true">#</a> MappedFile#destroy</h4><p>销毁映射文件对象，删除 MappedFile 对应的文件；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 删除当前文件
 *
 * <span class="token keyword">@param</span> <span class="token parameter">intervalForcibly</span> 表示拒绝被销毁的最大存活时间
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> intervalForcibly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 关闭文件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span>intervalForcibly<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isCleanupOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 关闭通道</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fileChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;close file channel &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileName <span class="token operator">+</span> <span class="token string">&quot; OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 删除文件</span>
            <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// ...... 省略日志打印 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;close file channel &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileName <span class="token operator">+</span> <span class="token string">&quot; Failed. &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略日志打印 ......</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要看下 ReferenceResource#shutdown 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 关闭资源
 *
 * <span class="token keyword">@param</span> <span class="token parameter">intervalForcibly</span> 强制关闭的时间间隔
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> intervalForcibly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>available<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>available <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// 初次关闭时的系统时间</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstShutdownTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 引用计数 -1，有可能释放了资源，也有可能未释放</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 校验当前时间和第一次尝试关闭的时间是否大于 传入的时间间隔</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstShutdownTimestamp<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> intervalForcibly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>refCount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1000</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 释放资源</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refCount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token comment">// 执行到这里，说明当前资源没有其他程序依赖了，可以调用子类的 cleanup 方法释放资源了</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 调用子类释放内存</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cleanupOver <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 ReferenceResource#shutdown 方法有可能并不会立刻释放资源。</p><p>假如当前 MappedFile 引用次数很多的话，</p><ol><li>在第一次调用该方法会将 available 属性设置为 false，</li><li>后续调用该方法时就会走下面的 else if 分支了，回去校验当前时间和 firstShutdownTimestamp 的时间间隔，再去调用 release 方法；</li></ol><h2 id="mappedfilequeue" tabindex="-1"><a class="header-anchor" href="#mappedfilequeue" aria-hidden="true">#</a> MappedFileQueue</h2><h3 id="mappedfilequeue-概述" tabindex="-1"><a class="header-anchor" href="#mappedfilequeue-概述" aria-hidden="true">#</a> MappedFileQueue 概述</h3><p>MappedFileQueue 就是用来管理 MappedFile 文件的，里面有个 List 的属性用来存储 MappedFile 文件。</p><p>对于 CommitLog 来说，会有多个 CommitLog 文件，一个文件对应一个 MappedFile 对象，所以需要一个容器来管理这些 MappedFile 对象。</p><h3 id="mappedfilequeue-属性" tabindex="-1"><a class="header-anchor" href="#mappedfilequeue-属性" aria-hidden="true">#</a> MappedFileQueue 属性</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DELETE_FILES_BATCH_MAX</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> storePath<span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> mappedFileSize<span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MappedFile</span><span class="token punctuation">&gt;</span></span> mappedFiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MappedFile</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AllocateMappedFileService</span> allocateMappedFileService<span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token keyword">long</span> flushedWhere <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">long</span> committedWhere <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> storeTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>DELETE_FILES_BATCH_MAX</td><td>常量，最大删除 MappedFile 文件的个数</td></tr><tr><td>storePath</td><td>MappedFileQueue 管理的目录，例如 commitLog: ../store/commitlog</td></tr><tr><td>mappedFileSize</td><td>目录下单个文件的大小，<br> commitLog文件默认 1g，<br>consumerQueue 文件默认 20 * 30w 字节</td></tr><tr><td>mappedFiles</td><td>存放 MappedFile 的 List</td></tr><tr><td>allocateMappedFileService</td><td>创建 MappedFile 内存映射文件的服务，内部有自己的线程</td></tr><tr><td>flushedWhere</td><td>目录下的当前刷盘指针，表示该指针之前的所有数据全部持久化到磁盘</td></tr><tr><td>committedWhere</td><td>当前数据提交指针，内存中 ByteBuffer z当前的写指针，该值大于、等于 flushedWhere。</td></tr><tr><td>storeTimestamp</td><td>当前目录下最后一条 msg 的存储时间</td></tr></tbody></table><h3 id="mappedfilequeue-构造方法" tabindex="-1"><a class="header-anchor" href="#mappedfilequeue-构造方法" aria-hidden="true">#</a> MappedFileQueue 构造方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 创建 MappedFileQueue 对象
 *
 * <span class="token keyword">@param</span> <span class="token parameter">storePath</span> 存储的目录
 * <span class="token keyword">@param</span> <span class="token parameter">mappedFileSize</span> 单个 MappedFileSize 文件的大小
 * <span class="token keyword">@param</span> <span class="token parameter">allocateMappedFileService</span> 创建 MappedFile 文件的服务
 */</span>
<span class="token keyword">public</span> <span class="token class-name">MappedFileQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> storePath<span class="token punctuation">,</span> <span class="token keyword">int</span> mappedFileSize<span class="token punctuation">,</span>
    <span class="token class-name">AllocateMappedFileService</span> allocateMappedFileService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>storePath <span class="token operator">=</span> storePath<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileSize <span class="token operator">=</span> mappedFileSize<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>allocateMappedFileService <span class="token operator">=</span> allocateMappedFileService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mappedfilequeue-的方法" tabindex="-1"><a class="header-anchor" href="#mappedfilequeue-的方法" aria-hidden="true">#</a> MappedFileQueue 的方法</h3><p>关于 MappedFileQueue 方法就是一些针对 MappedFile 的操作，具体使用时分析（后续分析）</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>RocketMQ 中的 CommitLog、ConsumeQueue 和 IndexFile 这些文件底层都是基于 MappedFile 来实现的。</p><p>MappedFile 自带简单的引用计数功能。</p><p>MappedFile 主要用了 mmap + pageCache 来实现的。</p>`,72),o=[t];function l(c,i){return s(),a("div",null,o)}const r=n(p,[["render",l],["__file","13-MappedFile和MappedFileQueue分析.html.vue"]]);export{r as default};
