import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-42161907.js";const t="/assets/管道相关类的关系-bf4714fe.png",p="/assets/image-20230528171116799-e68c6014.png",o="/assets/image-20230528183649373-c8d2f70f.png",c="/assets/image-20230528185550601-11161303.png",l="/assets/image-20230528185337140-9a9fb952.png",i="/assets/image-20230528185651645-7732fc83.png",u="/assets/image-20230528220246920-96404993.png",k={},d=e('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年03月16日12:30:42</td></tr><tr><td>V2</td><td>重构</td><td>2023年05月29日01:01:33</td></tr></tbody></table><h2 id="管道相关的类的关系" tabindex="-1"><a class="header-anchor" href="#管道相关的类的关系" aria-hidden="true">#</a> 管道相关的类的关系</h2><p>Netty 管道中涉及到三个接口：</p><ul><li>ChannelPipeline：管道接口，定义了管道内的 ChannelHandler 的增删改查的操作，而且提供了管道内的传播的事件的API；</li><li>ChannelHandlerContext：管道是一个双向链表，ChannelHandlerContext 就是链表上的节点对象，是管道内的事件传播的具体实现。ChannelHandlerContext 内部封装着 ChannelHandler 处理器；</li><li>ChannelHandler：处理器，Netty 自带的处理器和用户自定义的处理器；</li></ul><p>总的来说：ChannelPipeline 是一个拦截流经 Channel 的入站和出站事件的 ChannelHandler 实例链，可以看成是ChannelHandler 的容器，<strong>新建的 Channel 都会被分配一个新的 ChannelPipeline</strong>。<strong>在 Channel 的 Pipeline 中，存放着许多 ChannelHandlerContext ，ChannelHandlerContext 通过前后指针连接组成链表，每个 ChannelHandlerContext 内部封装一个 ChannelHandler 对象。事件通过 ChannelHandlerContext 对象来进行前后传递，ChannelHandlerContext 内部的 ChannelHandler 来处理传递进来的事件。</strong></p><p>一个管道的示例图如下：</p><p><img src="'+t+`" alt="管道相关类的关系"></p><h2 id="管道的创建" tabindex="-1"><a class="header-anchor" href="#管道的创建" aria-hidden="true">#</a> 管道的创建</h2><h3 id="管道创建的入口" tabindex="-1"><a class="header-anchor" href="#管道创建的入口" aria-hidden="true">#</a> 管道创建的入口</h3><p>每一个 Channel 都有一个自己的 pipeline。NioServerSocketChannel 和 NioSocketChannel 创建的流程中，最终在父类 AbstractChannel 内会初始化它们内部的 Pipeline。</p><p>下面看下 AbstractChannel 的构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">AbstractChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    <span class="token comment">// 给Channel实例分配一个唯一的ID对象</span>
    id <span class="token operator">=</span> <span class="token function">newId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 封装一个unsafe对象</span>
    <span class="token comment">// 当Channel是NioServerSocketChannel时，Unsafe实例是NioMessageUnSafe</span>
    <span class="token comment">// 当Channel是NioSocketChannel时，实例是NioByteUnSafe</span>
    unsafe <span class="token operator">=</span> <span class="token function">newUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 构建Channel消息处理管道Pipeline</span>
    <span class="token comment">// 设置好两个节点(默认的处理器)，一个头结点HeadContext，一个尾节点TailContext</span>
    pipeline <span class="token operator">=</span> <span class="token function">newChannelPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 Channel 的 pipeline 的关键就是在 io.netty.channel.DefaultChannelPipeline 方法里：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">DefaultChannelPipeline</span> <span class="token function">newChannelPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultChannelPipeline</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是 new 一个 DefaultChannelPipeline 对象。</p><h3 id="defaultchannelpipeline" tabindex="-1"><a class="header-anchor" href="#defaultchannelpipeline" aria-hidden="true">#</a> DefaultChannelPipeline</h3><p>继承关系</p><p><img src="`+p+`" alt="image-20230528171116799"></p><p>前面在 AbstractChannel 中调用的构造方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 管道的头节点</span>
<span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> head<span class="token punctuation">;</span>
<span class="token comment">// 管道的尾节点</span>
<span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> tail<span class="token punctuation">;</span>
<span class="token comment">// 当前管道所属的 Channel 通道</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 创建一个实例
 * 初始化一个头节点和尾节点
 *
 * <span class="token keyword">@param</span> <span class="token parameter">channel</span>
 */</span>
<span class="token keyword">protected</span> <span class="token class-name">DefaultChannelPipeline</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token string">&quot;channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    succeededFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SucceededChannelFuture</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    voidPromise <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">VoidChannelPromise</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TailContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeadContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>
    tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先就是将当前 ChannelPipeline 属于的 Channel 保存到自己的属性中，然后创建两个 ChannelHandlerContext 类型的 HeadContext 和 TailContext，分别代表 Pipeline 的双向链表的头节点和尾结点。</p><p>管道的初始状态如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>--------------           ---------------
|			 |  ------&gt;  |             |
| HeadContext|           | TailContext |
|			 |  &lt;------  |             |
--------------           ---------------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="headcontext" tabindex="-1"><a class="header-anchor" href="#headcontext" aria-hidden="true">#</a> HeadContext</h3><p><img src="`+o+'" alt="image-20230528183649373"></p><p>HeadContext 是 Pipeline 内部双向链表的头节点，实现了 ChannelHandlerContext 接口。</p><p>HeadContext 又实现了 ChannelInboundHandler 和 ChannelOutboundHandler 接口，说明 HeadContext 即是一个 ChannelHandlerContext 又是一个 ChannelHandler ，它可以同时处理 Inbound 入站事件和 Outbound 出站事件。</p><p>另外 HeadContext 内部有个 Unsafe 类的字段，Unsafe 是提供 Channel 类的底层操作的接口，例如读、写、连接和绑定等I/O 操作，这也说明 I/O 事件在 pipeline 中的传播最终会落在 HeadContext 中进行最后的 I/O 处理。</p><p>下面是 HeadContext 提供的 API，可以看到既有出站事件的 API，也有入站事件的 API。</p><p><img src="'+c+'" alt="image-20230528185550601"></p><h3 id="tailcontext" tabindex="-1"><a class="header-anchor" href="#tailcontext" aria-hidden="true">#</a> TailContext</h3><p><img src="'+l+'" alt="image-20230528185337140"></p><p>TailContext 是 Pipeline 内部双向链表的头节点，实现了 ChannelHandlerContext 接口。</p><p>TailContext 又实现了 ChannelInboundHandler 接口，说明 TailContext 即是一个 ChannelHandlerContext 又是一个 ChannelHandler ，它可以处理 Inbound 入站事件。</p><p>下面是 TailContext 提供了 API，可以看到提供了入站事件的 API。</p><p><img src="'+i+`" alt="image-20230528185651645"></p><p>我们知道入站事件是从 HeadContext 向 TailContext 传播的，既然 TailContext 也是一个 ChannelInboundHandler，那么 TailContext 作为入站处理器的作用是什么呢？假如我们自定义的入站处理器没有处理某次传递的 channelRead 事件，那么需要一个兜底的处理，TailContext 就是作为一个兜底的处理器，比如释放可能未释放的堆外内存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onUnhandledInboundMessage</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>
            <span class="token string">&quot;Discarded inbound message {} that reached at the tail of the pipeline. &quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;Please check your pipeline configuration.&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token class-name">ReferenceCountUtil</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="管道的增删改查" tabindex="-1"><a class="header-anchor" href="#管道的增删改查" aria-hidden="true">#</a> 管道的增删改查</h2><p>Pipeline 添加 ChannelHandler 的 API 有很多，主要如下：</p><ol><li>addFirst 系列；</li><li>addBefore 系列；</li><li>addAfter 系列；</li><li>addLast 系列；</li></ol><p>以 addLast 方法为例分析</p><p>DefaultChannelPipeline#addLast(EventExecutorGroup, String, ChannelHandler)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ChannelPipeline</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">EventExecutorGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> newCtx<span class="token punctuation">;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查是否可以多个线程使用这个Handler    @Sharable</span>
        <span class="token function">checkMultiplicity</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

        newCtx <span class="token operator">=</span> <span class="token function">newContext</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token function">filterName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将newCtx放到Head和tail之间</span>
        <span class="token function">addLast0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 如果 registered 是 false 则表示 Channel 还未注册到 EventLoop 上去</span>
        <span class="token comment">// 此时会添加 ctx 到 pipeline，然后添加一个任务去 ChannelHandler.handlerAdded(...)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registered<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newCtx<span class="token punctuation">.</span><span class="token function">setAddPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 添加一个任务</span>
            <span class="token function">callHandlerCallbackLater</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 执行到这里，说明添加的ChannelHanddler已经完成了注册</span>
        <span class="token class-name">EventExecutor</span> executor <span class="token operator">=</span> newCtx<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">callHandlerAddedInEventLoop</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">callHandlerAdded0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>首先因为 addLast 方法可能会有很多线程同时调用，所以需要使用 synchronized 保证线程安全；</p></li><li><p>Netty 中未被 @Sharable 注解标记的 ChannelHandler 是不允许重复添加的。 <code>checkMultiplicity(handler)</code> 就是用于校验这个的。需要注意的是使用共享 ChannelHandler 的时候需要确保其线程安全性；</p></li><li><p>创建 ChannelHandlerContext 实例，封装一下 ChannelHandler。ChannelHandlerContext 关注事件传播，ChannelHandler 关注的是业务处理；</p></li><li><p><code>addLast0(newCtx)</code> 将新创建的 ChannelHandlerContext 插入到链表末尾（其实是 TailContext 的前一个节点）。需要注意的是刚插入到链表中的 ChannelHandlerContext 还只是 INIT 初始状态。当 ChannelHandler 的 handlerAdded 方法被回调时，状态才变为 ADD_COMPLETE ，而只有 ADD_COMPLETE 状态的 ChannelHandler 才能响应 pipeline 中传播的事件；</p></li><li><p>回调 ChannelHandler 的 handlerAdded 方法有几种情况：</p><ol><li>Channel 还未注册到 NioEventLoop 上，也就是说服务端或者客户端还未启动完成，此时会封装成一个任务添加到一个单链表中，等待 Channel 注册到 NioEventLoop 上时，就会触发执行这个任务去执行 handlerAdded 方法；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registered<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newCtx<span class="token punctuation">.</span><span class="token function">setAddPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加一个任务</span>
    <span class="token function">callHandlerCallbackLater</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>这里主要是保证执行 handlerAdded 方法的线程是 Channel 指定的 EventExecutor；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 执行到这里，说明添加的ChannelHanddler已经完成了注册</span>
<span class="token class-name">EventExecutor</span> executor <span class="token operator">=</span> newCtx<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callHandlerAddedInEventLoop</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">callHandlerAdded0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>管道的增删查改的源码比较简单，就是针对双向链表的操作，其他的 API 就不分析了。</p><h2 id="defaultchannelhandlercontext" tabindex="-1"><a class="header-anchor" href="#defaultchannelhandlercontext" aria-hidden="true">#</a> DefaultChannelHandlerContext</h2><h3 id="继承体系" tabindex="-1"><a class="header-anchor" href="#继承体系" aria-hidden="true">#</a> 继承体系</h3><p><img src="`+u+`" alt="image-20230528220246920"></p><h3 id="defaultchannelhandlercontext-类" tabindex="-1"><a class="header-anchor" href="#defaultchannelhandlercontext-类" aria-hidden="true">#</a> DefaultChannelHandlerContext 类</h3><p>DefaultChannelHandlerContext 类就一个字段，就是保存的它封装的 ChannelHandler 实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DefaultChannelHandlerContext</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractChannelHandlerContext</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">;</span>

    <span class="token class-name">DefaultChannelHandlerContext</span><span class="token punctuation">(</span>
            <span class="token class-name">DefaultChannelPipeline</span> pipeline<span class="token punctuation">,</span> <span class="token class-name">EventExecutor</span> executor<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 参数1：当前ctx所属的pipeline</span>
        <span class="token comment">// 参数2：执行器，</span>
        <span class="token comment">// 参数3：名字</span>
        <span class="token comment">// 参数4：ctx封装的handler的字节码对象</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> name<span class="token punctuation">,</span> handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ChannelHandler</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> handler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="abstractchannelhandlercontext-类" tabindex="-1"><a class="header-anchor" href="#abstractchannelhandlercontext-类" aria-hidden="true">#</a> AbstractChannelHandlerContext 类</h3><h4 id="常量和成员变量" tabindex="-1"><a class="header-anchor" href="#常量和成员变量" aria-hidden="true">#</a> 常量和成员变量</h4><p>AbstractChannelHandlerContext 中有两个自身类型的字段，这就是双向链表中的前驱和后驱指针。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 后驱节点</span>
<span class="token keyword">volatile</span> <span class="token class-name">AbstractChannelHandlerContext</span> next<span class="token punctuation">;</span>
<span class="token comment">// 前驱节点</span>
<span class="token keyword">volatile</span> <span class="token class-name">AbstractChannelHandlerContext</span> prev<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AbstractChannelHandlerContext 上下文对象的状态，默认是初始状态 INIT。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 表示 handlerAdded 方法即将被调用
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ADD_PENDING</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 表示 handlerAdded 方法已经被调用
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ADD_COMPLETE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 表示 handlerRemoved 已经被调用
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">REMOVE_COMPLETE</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 初始状态， handlerAdded 和 handlerRemoved 方法都没有被调用
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INIT</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> handlerState <span class="token operator">=</span> <span class="token constant">INIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代表状态的 handlerState 字段，要保证它的更新是原子性的，所以提供了一个原子更新器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// handlerState 字段改变的 CAS 更新器</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">&gt;</span></span> <span class="token constant">HANDLER_STATE_UPDATER</span> <span class="token operator">=</span>
    <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;handlerState&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 当前ctx所属的pipeline</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultChannelPipeline</span> pipeline<span class="token punctuation">;</span>
<span class="token comment">// 当前ctx的名字</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token comment">// 当前ctx是否有序</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> ordered<span class="token punctuation">;</span>
<span class="token comment">// 用来判断是否跳过执行器 ChannelHandler 的某些事件处理方法</span>
<span class="token comment">// io.netty.channel.ChannelHandlerMask.mask0 计算得到</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> executionMask<span class="token punctuation">;</span>

<span class="token comment">// Will be set to null if no child executor should be used, otherwise it will be set to the</span>
<span class="token comment">// child executor.</span>
<span class="token comment">// 如果这个值是 null,那么上下文的执行器用的就是所属通道 Channel 的事件轮询器。</span>
<span class="token keyword">final</span> <span class="token class-name">EventExecutor</span> executor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析一下这几个属性：</p><ul><li>DefaultChannelPipeline pipeline：标记当前 ChannelHandlerContext 是属于那个管道的；</li><li>String name：表示当前 ChannelHandlerContext 的名字；</li><li>boolean ordered：一般情况下，必须当 ChannelHandlerContext 上下文状态是 ADD_COMPLETE 才能够处理管道中的事件，假如 ordered 是 true 的情况下，上下文状态是 ADD_PENDING 状态就可以处理管道中的事件了；</li><li>int executionMask：掩码。用于标记当前 ChannelHandlerContext 内部的 ChannelHandler 是入站处理器还是出站处理器，能够处理那些事件；</li><li>EventExecutor executor：channelHandler 对应的 executor，除非特殊指定，默认就是 Channel 的绑定的 NioEventLoop；</li></ul><h4 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">(</span><span class="token class-name">DefaultChannelPipeline</span> pipeline<span class="token punctuation">,</span> <span class="token class-name">EventExecutor</span> executor<span class="token punctuation">,</span>
                              <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">&gt;</span></span> handlerClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pipeline <span class="token operator">=</span> pipeline<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>
    <span class="token comment">// mask方法用于计算一个掩码，作用是方便ctx前后传递时，查找合适的下一个ctx</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>executionMask <span class="token operator">=</span> <span class="token function">mask</span><span class="token punctuation">(</span>handlerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Its ordered if its driven by the EventLoop or the given Executor is an instanceof OrderedEventExecutor.</span>
    <span class="token comment">// 表示上下文的事件执行器是不是有序的，即以有序/串行的方式处理所有提交的任务。</span>
    <span class="token comment">// executor == null，说明当前上下文用的是通道Channel的 channel().eventLoop()，这个肯定是有序的</span>
    ordered <span class="token operator">=</span> executor <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> executor <span class="token keyword">instanceof</span> <span class="token class-name">OrderedEventExecutor</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造方法中调用了 ChannelHandlerMask 类的一个重要的 mask 方法，重点分析 mask 方法。mask 方法的作用是，**根据传入的 ChannelHandler 的字节码对象，来计算出一个掩码，可以根据这个掩码来判断当前 ChannelHandler 是否重写过某些方法。**也就是说，根据这个掩码来标记 ChannelHandler 能够处理那些事件。</p><h4 id="skip-注解的作用" tabindex="-1"><a class="header-anchor" href="#skip-注解的作用" aria-hidden="true">#</a> @Skip 注解的作用</h4><p>在分析 io.netty.channel.ChannelHandlerMask#mask 方法之前，得先了解一下 @Skip 注解。</p><p>ChannelInboundHandlerAdapter 和 ChannelOutboundHandlerAdapter 类中每个方法都有 @Skip 注解，这个注解后面将在 mask 方法中用于判断自己实现的 ChannelHandler 类是否重写过其中的某种方法，因为我们自己写的 ChannelHandler 中是没有标注 @Skip 注解的。</p><p>ChannelHandlerMask 中有个 isSkippable 方法，根据反射判断某个方法是否有 @Skip 注解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSkippable</span><span class="token punctuation">(</span>
        <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> handlerType<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> paramTypes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedExceptionAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
            <span class="token class-name">Method</span> m<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                m <span class="token operator">=</span> handlerType<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> paramTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               	<span class="token comment">// ..... 省略日志打印 ......</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Skip</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 ChannelInboundHandlerAdapter 和 ChannelOutboundHandlerAdapter 中的方法，其实就是对应的入站和出站事件，举个例子：ChannelInboundHandlerAdapter#channelRegistered</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Calls <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">#</span><span class="token function">fireChannelRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> to forward
 * to the next <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelInboundHandler</span></span><span class="token punctuation">}</span> in the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ChannelPipeline</span></span><span class="token punctuation">}</span>.
 *
 * Sub-classes may override this method to change behavior.
 *
 * 调用 ChannelHandlerContext.fireChannelRegistered() 方法
 * 转发到 ChannelPipeline 中的下一个 ChannelInboundHandler。
 */</span>
<span class="token annotation punctuation">@Skip</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRegistered</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ChannelInboundHandlerAdapter 和 ChannelOutboundHandlerAdapter 类中每个方法都有 @Skip 注解，而我们自己要实现 ChannelHandler，一般也就是继承这两个类去实现的，但是我们自己实现的 ChannelHandler 重写它的方法的时候是不会自己加 @Skip 注解的（除非你非要自己手动加......），所以，这就可以标记出来那些方法是我们自己的 ChannelHandler 重写过的。</strong></p><h3 id="channelhandlermask-类" tabindex="-1"><a class="header-anchor" href="#channelhandlermask-类" aria-hidden="true">#</a> ChannelHandlerMask 类</h3><p>ChannelHandlerMask 类就是处理 @Skip 注解的关键。</p><p>前面在分析 AbstractChannelHandlerContext 类的构造方法的时候看到过一个 executionMask 字段，这个字段的作用就是 用于标记当前 ChannelHandlerContext 内部的 ChannelHandler 是入站处理器还是出站处理器，能够处理那些事件。计算这个字段的入口就是 ChannelHandlerMask#mask 方法。</p><h4 id="channelhandlermask-的常量" tabindex="-1"><a class="header-anchor" href="#channelhandlermask-的常量" aria-hidden="true">#</a> ChannelHandlerMask 的常量</h4><p>在看 ChannelHandlerMask#mask 方法之前，得先了解一下 ChannelHandlerMask 类的一些常量的含义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_EXCEPTION_CAUGHT</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_CHANNEL_REGISTERED</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_CHANNEL_UNREGISTERED</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_CHANNEL_ACTIVE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_CHANNEL_INACTIVE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_CHANNEL_READ</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_CHANNEL_READ_COMPLETE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_USER_EVENT_TRIGGERED</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_CHANNEL_WRITABILITY_CHANGED</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_BIND</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_CONNECT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_DISCONNECT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_CLOSE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_DEREGISTER</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_READ</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_WRITE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_FLUSH</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些常量是按位标记每个方法，如代表异常的方法的常量 MASK_EXCEPTION_CAUGHT，它的二进制就是<code>0000 0000 0000 0000 0000 0000 0000 0001</code>。</p><p>根据这些常量的组合的属性</p><ol><li><strong>MASK_ONLY_INBOUND</strong>：入站事件掩码；</li><li><strong>MASK_ALL_INBOUND</strong>：入站事件掩码，包含 MASK_EXCEPTION_CAUGHT；</li><li><strong>MASK_ONLY_OUTBOUND</strong>：出站事件的掩码；</li><li><strong>MASK_ALL_OUTBOUND</strong>：出站事件的掩码，包含 MASK_EXCEPTION_CAUGHT；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 计算入站事件掩码</span>
<span class="token comment">// 0000 0000 0000 0000 0000 0001 1111 1110</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_ONLY_INBOUND</span> <span class="token operator">=</span>  <span class="token constant">MASK_CHANNEL_REGISTERED</span> <span class="token operator">|</span>
        <span class="token constant">MASK_CHANNEL_UNREGISTERED</span> <span class="token operator">|</span> <span class="token constant">MASK_CHANNEL_ACTIVE</span> <span class="token operator">|</span> <span class="token constant">MASK_CHANNEL_INACTIVE</span> <span class="token operator">|</span> <span class="token constant">MASK_CHANNEL_READ</span> <span class="token operator">|</span>
        <span class="token constant">MASK_CHANNEL_READ_COMPLETE</span> <span class="token operator">|</span> <span class="token constant">MASK_USER_EVENT_TRIGGERED</span> <span class="token operator">|</span> <span class="token constant">MASK_CHANNEL_WRITABILITY_CHANGED</span><span class="token punctuation">;</span>

<span class="token comment">// 计算入站事件掩码，包含 MASK_EXCEPTION_CAUGHT</span>
<span class="token comment">// 0000 0000 0000 0000 0000 0001 1111 1111</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_ALL_INBOUND</span> <span class="token operator">=</span> <span class="token constant">MASK_EXCEPTION_CAUGHT</span> <span class="token operator">|</span> <span class="token constant">MASK_ONLY_INBOUND</span><span class="token punctuation">;</span>

<span class="token comment">// 计算出出站事件的掩码</span>
<span class="token comment">// 0000 0000 0000 0001 1111 1110 0000 0000</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_ONLY_OUTBOUND</span> <span class="token operator">=</span>  <span class="token constant">MASK_BIND</span> <span class="token operator">|</span> <span class="token constant">MASK_CONNECT</span> <span class="token operator">|</span> <span class="token constant">MASK_DISCONNECT</span> <span class="token operator">|</span>
        <span class="token constant">MASK_CLOSE</span> <span class="token operator">|</span> <span class="token constant">MASK_DEREGISTER</span> <span class="token operator">|</span> <span class="token constant">MASK_READ</span> <span class="token operator">|</span> <span class="token constant">MASK_WRITE</span> <span class="token operator">|</span> <span class="token constant">MASK_FLUSH</span><span class="token punctuation">;</span>

<span class="token comment">// 计算出出站事件的掩码 包含 MASK_EXCEPTION_CAUGHT</span>
<span class="token comment">// 0000 0000 0000 0001 1111 1110 0000 0001</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MASK_ALL_OUTBOUND</span> <span class="token operator">=</span> <span class="token constant">MASK_EXCEPTION_CAUGHT</span> <span class="token operator">|</span> <span class="token constant">MASK_ONLY_OUTBOUND</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="channelhandlermask-mask" tabindex="-1"><a class="header-anchor" href="#channelhandlermask-mask" aria-hidden="true">#</a> ChannelHandlerMask#mask</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Return the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">executionMask</span></span><span class="token punctuation">}</span>.
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mask</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Try to obtain the mask from the cache first. If this fails calculate it and put it in the cache for fast</span>
    <span class="token comment">// lookup in the future.</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token constant">MASKS</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> mask <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mask <span class="token operator">=</span> <span class="token function">mask0</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> mask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 MASKS 是一个 FastThreadLocal，用来缓存 ChannelHandler 子类对应的执行标记 mask，就不用每次都计算掩码了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 用来缓存， ChannelHandler 子类对应的执行标记 mask，就不用每次都需要计算了</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">FastThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">MASKS</span> <span class="token operator">=</span>
    <span class="token keyword">new</span> <span class="token class-name">FastThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WeakHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到最终是调用 io.netty.channel.ChannelHandlerMask#mask0 方法了，方法的返回值是一个int的二进制，</p><ul><li>假如对应下标位（代表指定方法） 的值是 1，表示 handlerType 类型的 ChannelHandler 中重写了该方法；</li><li>位值是 0 表示 handlerType 类型的 ChannelHandler 中没有重写该方法；</li></ul><p>ChannelHandler 的掩码包含的是该 ChannelHandler 重写的事件方法的掩码集合。当事件在 pipeline 中传播的时候，在 ChannelHandlerContext 中可以利用这个掩码来判断，当前 ChannelHandler 是否应该响应这个事件，也就是是否要执行这个 ChannelHandler 里面的逻辑了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Calculate the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">executionMask</span></span><span class="token punctuation">}</span>.
 * 返回值是一个int类型的 二进制
 * 对应下标位 代表指定方法 位的值是1，表示方法handlerType类型中实现了该方法
 * 位置是0表示handlerType类型中 没有实现该方法
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mask0</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">&gt;</span></span> handlerType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 0000 0000 0000 0000 0000 0000 0000 0001</span>
    <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token constant">MASK_EXCEPTION_CAUGHT</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 条件成立 说明handlerType类型是属于ChannelInBoundHandler的子类</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ChannelInboundHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 结果 0000 0000 0000 0000 0000 0001 1111 1111</span>
            mask <span class="token operator">|=</span> <span class="token constant">MASK_ALL_INBOUND</span><span class="token punctuation">;</span>

            <span class="token comment">// 参数1：handler的真实class类型</span>
            <span class="token comment">// 参数2：检查的方法名</span>
            <span class="token comment">// 参数3：ChannelHandlerContext.class</span>
            <span class="token comment">// isSkippable返回handlerType这个class 有没有重写指定的方法，重写之后指定方法上的Skip注解就没有了</span>
            <span class="token comment">// 条件成立，说明没有重写该方法</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;channelRegistered&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//     0000 0000 0000 0000 0000 0001 1111 1111</span>
                <span class="token comment">// 取反 1111 1111 1111 1111 1111 1111 1111 1101</span>
                <span class="token comment">// &amp;   0000 0000 0000 0000 0000 0001 1111 1101</span>
                <span class="token comment">// 也就是说 假如你自己实现了这些方法 该位置就是1，没有实现该方法 该位置就是0</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_CHANNEL_REGISTERED</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;channelUnregistered&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_CHANNEL_UNREGISTERED</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;channelActive&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_CHANNEL_ACTIVE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;channelInactive&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_CHANNEL_INACTIVE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;channelRead&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_CHANNEL_READ</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;channelReadComplete&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_CHANNEL_READ_COMPLETE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;channelWritabilityChanged&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_CHANNEL_WRITABILITY_CHANGED</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;userEventTriggered&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_USER_EVENT_TRIGGERED</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ChannelOutboundHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mask <span class="token operator">|=</span> <span class="token constant">MASK_ALL_OUTBOUND</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;bind&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token class-name">SocketAddress</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_BIND</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SocketAddress</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token class-name">SocketAddress</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_CONNECT</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_DISCONNECT</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_CLOSE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;deregister&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_DEREGISTER</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_READ</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;write&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_WRITE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;flush&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_FLUSH</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// &quot;exceptionCaught&quot; 方法需要单独判断，因为 ChannelInboundHandler 和 ChannelOutboundHandler 都有它</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSkippable</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> <span class="token string">&quot;exceptionCaught&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Throwable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token constant">MASK_EXCEPTION_CAUGHT</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Should never reach here.</span>
        <span class="token class-name">PlatformDependent</span><span class="token punctuation">.</span><span class="token function">throwException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> mask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="管道的事件传播" tabindex="-1"><a class="header-anchor" href="#管道的事件传播" aria-hidden="true">#</a> 管道的事件传播</h2><h3 id="入站的事件传播" tabindex="-1"><a class="header-anchor" href="#入站的事件传播" aria-hidden="true">#</a> 入站的事件传播</h3><h4 id="管道传递事件入口" tabindex="-1"><a class="header-anchor" href="#管道传递事件入口" aria-hidden="true">#</a> 管道传递事件入口</h4><p>以 ChannelRead 事件为例来分析入站事件的传播，调用 pipeline 的 API 传递事件，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>pipeline<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>DefaultChannelPipeline#fireChannelRead</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ChannelPipeline</span> <span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到就是调用 AbstractChannelHandlerContext 的静态方法 invokeChannelRead 出处理事件传播，其中入参：</p><ul><li>head 参数：就是管道内的 HeadContext，从这里也说明了，入站事件就是从 HeadContext 向 TailContext 方向传播的；</li><li>mag 参数：就是管道内传递的要处理的数据；</li></ul><p>好了，继续跟进看 AbstractChannelHandlerContext 的 invokeChannelRead 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> next<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 资源泄漏相关</span>
    <span class="token keyword">final</span> <span class="token class-name">Object</span> m <span class="token operator">=</span> next<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 保证是 AbstractChannelHandlerContext 绑定的线程执行 invokeChannelRead 方法</span>
    <span class="token class-name">EventExecutor</span> executor <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用了 invokeChannelRead 的重载方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// invokeHandler 判断 ChannelHandler 的状态，确保 ChannelHandler 能够处理事件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">invokeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 调用 ChannelHandler 的对应处理方法</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannelInboundHandler</span><span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果发生异常，则就 ChannelHandler 的 exceptionCaught 方法</span>
            <span class="token function">invokeExceptionCaught</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// ChannelHandler 的状态不对，无法处理该事件，继续向后传播</span>
        <span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="channelhandlercontext-传递事件" tabindex="-1"><a class="header-anchor" href="#channelhandlercontext-传递事件" aria-hidden="true">#</a> ChannelHandlerContext 传递事件</h4><p>关键点就是调用 ChannelHandler 的对应的 channelRead 方法。一般在 ChannelHandler 中处理完后，都会调用 AbstractChannelHandlerContext 对应的 fire 系列方法，例如 fireChannelRead 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">ChannelHandlerContext</span> <span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token constant">MASK_CHANNEL_READ</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 AbstractChannelHandlerContext 的 findContextInbound 方法找到下一个能够处理 channelRead 方法的处理器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 找到下一个入站Handler
 *
 * <span class="token keyword">@param</span> <span class="token parameter">mask</span>
 */</span>
<span class="token keyword">private</span> <span class="token class-name">AbstractChannelHandlerContext</span> <span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token keyword">int</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AbstractChannelHandlerContext</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token class-name">EventExecutor</span> currentExecutor <span class="token operator">=</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token comment">// 0000 0000 0000 0000 0000 0001 1111 1110</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">skipContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> currentExecutor<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> <span class="token constant">MASK_ONLY_INBOUND</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是一个 do...while... 循环，在双向链表中向后查找 ChannelHandlerContext 中封装的 ChannelHandler 是否能够处理对应的入站事件，关键点就是 while 条件的 skipContext 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">skipContext</span><span class="token punctuation">(</span>
        <span class="token class-name">AbstractChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">EventExecutor</span> currentExecutor<span class="token punctuation">,</span> <span class="token keyword">int</span> mask<span class="token punctuation">,</span> <span class="token keyword">int</span> onlyMask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// (ctx.executor() == currentExecutor &amp;&amp; (ctx.executionMask &amp; mask) == 0)</span>
    <span class="token comment">// 只有当 EventExecutor 相同的时候，才会考虑是否跳过 ctx，因为我们要保证事件处理的顺序。</span>

    <span class="token comment">// onlyMask 0000 0000 0000 0000 0000 0001 1111 1110</span>
    <span class="token comment">// mask     0000 0000 0000 0000 0000 0000 0000 0010</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>executionMask <span class="token operator">&amp;</span> <span class="token punctuation">(</span>onlyMask <span class="token operator">|</span> mask<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span>
            <span class="token comment">// See https://github.com/netty/netty/issues/10067</span>
            <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> currentExecutor <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>executionMask <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法的返回值表示是否需要跳过这个 ctx 上下文，返回 true 表示跳过。</p><ul><li><code>(ctx.executionMask &amp; (onlyMask | mask)) == 0</code><ol><li>假如返回 true，表示当前这个 ctx 对象的 executionMask 掩码中没有 <code>(onlyMask | mask) </code> 中的任何方法，也就很容易就判断 ChannelHandler 不属于入站事件或者出站事件，则返回 true，表示跳过这个 ctx；</li><li>返回 false，表示自定义的 ChannelHandler 是对应的出站处理器或者入站处理器；</li></ol></li><li><code>(ctx.executor() == currentExecutor &amp;&amp; (ctx.executionMask &amp; mask) == 0)</code><ol><li><code>ctx.executor() == currentExecutor</code> ，这个判断是为了保证事件处理的顺序，如果事件的执行器不一样，无论是否被 @skip 注解标记也不能跳过这个 ctx；</li><li><code>(ctx.executionMask &amp; mask) == 0</code>，判断自定义 ChannelHandler 是否重写过指定方法，假如重写过 executionMask 掩码的指定位置就是 1 ，此时返回 false，表示不跳过这个 ctx；</li></ol></li></ul><p>findContextInbound 方法结束后，找到了一个封装了实现了 channelRead 方法的 ChannelHandler 对象的 ctx。拿到后面的 ctx 后，就会调用 invokeChannelRead 方法，就去执行该 ChannelHandler 处理 channelRead 事件的逻辑了。</p><h3 id="出站事件的传播" tabindex="-1"><a class="header-anchor" href="#出站事件的传播" aria-hidden="true">#</a> 出站事件的传播</h3><p>以 bind 事件为例来分析出站事件的传播，AbstractChannel#bind(SocketAddress, ChannelPromise)：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">ChannelFuture</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> pipeline<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>localAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到就是调用 pipeline 的 API</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ChannelFuture</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> tail<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>localAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 TailContext 的 bind 方法，该 bind 方法的具体实现是在 TailContext 的抽象父类 AbstractChannelHandlerContext 中。</p><p>AbstractChannelHandlerContext#bind(SocketAddress, ChannelPromise)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">ChannelFuture</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>localAddress<span class="token punctuation">,</span> <span class="token string">&quot;localAddress&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotValidPromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// cancelled</span>
        <span class="token keyword">return</span> promise<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 找到上一个出站处理器的上下文对象</span>
    <span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> next <span class="token operator">=</span> <span class="token function">findContextOutbound</span><span class="token punctuation">(</span><span class="token constant">MASK_BIND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">EventExecutor</span> executor <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        next<span class="token punctuation">.</span><span class="token function">invokeBind</span><span class="token punctuation">(</span>localAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">safeExecute</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                next<span class="token punctuation">.</span><span class="token function">invokeBind</span><span class="token punctuation">(</span>localAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> promise<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> promise<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键点就是 findContextOutbound 方法了，从双向链表的尾部向前查找出站处理器去处理 bind 事件，最终会走到 HeadContext 节点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 从双向链表的tail开始，不断向前找
 * <span class="token keyword">@param</span> <span class="token parameter">mask</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">private</span> <span class="token class-name">AbstractChannelHandlerContext</span> <span class="token function">findContextOutbound</span><span class="token punctuation">(</span><span class="token keyword">int</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AbstractChannelHandlerContext</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token class-name">EventExecutor</span> currentExecutor <span class="token operator">=</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">skipContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> currentExecutor<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> <span class="token constant">MASK_ONLY_OUTBOUND</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常事件的传播" tabindex="-1"><a class="header-anchor" href="#异常事件的传播" aria-hidden="true">#</a> 异常事件的传播</h3><p>异常事件的传播分为两种，</p><ul><li>一种是 Netty 框架自身处理导致的异常，此时是从 HeadContext 向后传播异常事件；</li><li>一种是某个 ChannelHandler 中处理事件逻辑发生异常，这时该 ChannelHandler 的 exceptionCaught 方法会被回调。用户可以在这里处理异常事件，并决定是否通过 ctx.fireExceptionCaught(cause) 继续向后传播异常事件。</li></ul><h4 id="netty-自身的异常" tabindex="-1"><a class="header-anchor" href="#netty-自身的异常" aria-hidden="true">#</a> Netty 自身的异常</h4><p>以客户端 Channel 处理 READ 事件为例，NioByteUnsafe#read</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略 ......</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略业务处理逻辑 ......</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">handleReadException</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> byteBuf<span class="token punctuation">,</span> t<span class="token punctuation">,</span> close<span class="token punctuation">,</span> allocHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 代码块 .....</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NioByteUnsafe#handleReadException</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleReadException</span><span class="token punctuation">(</span><span class="token class-name">ChannelPipeline</span> pipeline<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> byteBuf<span class="token punctuation">,</span> 
                                 <span class="token class-name">Throwable</span> cause<span class="token punctuation">,</span> <span class="token keyword">boolean</span> close<span class="token punctuation">,</span>
                                 <span class="token class-name">RecvByteBufAllocator<span class="token punctuation">.</span>Handle</span> allocHandle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>byteBuf <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>byteBuf<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            readPending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            pipeline<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            byteBuf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    allocHandle<span class="token punctuation">.</span><span class="token function">readComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pipeline<span class="token punctuation">.</span><span class="token function">fireChannelReadComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pipeline<span class="token punctuation">.</span><span class="token function">fireExceptionCaught</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// If oom will close the read event, release connection.</span>
    <span class="token comment">// See https://github.com/netty/netty/issues/10434</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>close <span class="token operator">||</span> cause <span class="token keyword">instanceof</span> <span class="token class-name">OutOfMemoryError</span> <span class="token operator">||</span> cause <span class="token keyword">instanceof</span> <span class="token class-name">IOException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">closeOnRead</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法的 pipeline.fireExceptionCaught(cause) 代码就是在管道中传播异常事件。</p><h4 id="channelhandler-处理事件逻辑的异常" tabindex="-1"><a class="header-anchor" href="#channelhandler-处理事件逻辑的异常" aria-hidden="true">#</a> ChannelHandler 处理事件逻辑的异常</h4><p>假如在 ChannelHandler 中处理 ChannelActive 事件的逻辑时发送异常，就会触发改 ChannelHandler 中的 exceptionCaught 方法：</p><p>AbstractChannelHandlerContext#invokeChannelActive()</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">invokeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannelInboundHandler</span><span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">invokeExceptionCaught</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">fireChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task-特殊事件处理-减少实例创建" tabindex="-1"><a class="header-anchor" href="#task-特殊事件处理-减少实例创建" aria-hidden="true">#</a> Task 特殊事件处理 - 减少实例创建</h3><p>AbstractChannelHandlerContext 的内部类 Tasks</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Tasks</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> next<span class="token punctuation">;</span>

    <span class="token comment">// channelReadComplete 读完成的入站事件</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> invokeChannelReadCompleteTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next<span class="token punctuation">.</span><span class="token function">invokeChannelReadComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// read 设置读的出站事件</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> invokeReadTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next<span class="token punctuation">.</span><span class="token function">invokeRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// channelWritabilityChanged 可读状态改变的入站事件</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> invokeChannelWritableStateChangedTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next<span class="token punctuation">.</span><span class="token function">invokeChannelWritabilityChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// flush 刷新数据的出站事件</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> invokeFlushTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next<span class="token punctuation">.</span><span class="token function">invokeFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Tasks</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有的入站和出站事件的处理，与上面的流程不一样，有四个事件:</p><ul><li><code>channelReadComplete</code> ：读完成的入站事件；</li><li><code>channelWritabilityChanged</code>：可读状态改变的入站事件；</li><li><code>read</code> ：读的出站事件；</li><li><code>flush</code> ：刷新数据的出站事件；</li></ul><p>这样做法的好处是减少任务实例的创建，比如 channelReadComplete 事件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">ChannelHandlerContext</span> <span class="token function">fireChannelReadComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">invokeChannelReadComplete</span><span class="token punctuation">(</span><span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token constant">MASK_CHANNEL_READ_COMPLETE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeChannelReadComplete</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">EventExecutor</span> executor <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        next<span class="token punctuation">.</span><span class="token function">invokeChannelReadComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">Tasks</span> tasks <span class="token operator">=</span> next<span class="token punctuation">.</span>invokeTasks<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next<span class="token punctuation">.</span>invokeTasks <span class="token operator">=</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tasks</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>tasks<span class="token punctuation">.</span>invokeChannelReadCompleteTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的一些方法的 else 分支下面一般是 <code>executor.execute(new Runnable(){...});</code> 创建一个任务。</p><p>而上面这四个事件是获取 Task 类中对应的任务，减少 Runnable 实例的创建，因为这些事件的处理方法是没有参数的。</p><h3 id="writetask-写操作事件" tabindex="-1"><a class="header-anchor" href="#writetask-写操作事件" aria-hidden="true">#</a> WriteTask - 写操作事件</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">,</span> <span class="token keyword">boolean</span> flush<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查 promise 是否有效</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotValidPromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ReferenceCountUtil</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// cancelled</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ReferenceCountUtil</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 找出上一个出站的ctx对象</span>
    <span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> next <span class="token operator">=</span> <span class="token function">findContextOutbound</span><span class="token punctuation">(</span>flush <span class="token operator">?</span>
            <span class="token punctuation">(</span><span class="token constant">MASK_WRITE</span> <span class="token operator">|</span> <span class="token constant">MASK_FLUSH</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">MASK_WRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加附加信息，在内存泄露的时候，可以获取到这个附加信息</span>
    <span class="token keyword">final</span> <span class="token class-name">Object</span> m <span class="token operator">=</span> pipeline<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">EventExecutor</span> executor <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flush<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果需要刷新，就调用 invokeWriteAndFlush 方法</span>
            next<span class="token punctuation">.</span><span class="token function">invokeWriteAndFlush</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果不需要刷新，就调用 invokeWrite 方法</span>
            next<span class="token punctuation">.</span><span class="token function">invokeWrite</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将写操作封装成一个 WriteTask，是 Runnable 子类。</span>
        <span class="token keyword">final</span> <span class="token class-name">WriteTask</span> task <span class="token operator">=</span> <span class="token class-name">WriteTask</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> m<span class="token punctuation">,</span> promise<span class="token punctuation">,</span> flush<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">safeExecute</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> task<span class="token punctuation">,</span> promise<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token operator">!</span>flush<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// We failed to submit the WriteTask. We need to cancel it so we decrement the pending bytes</span>
            <span class="token comment">// and put it back in the Recycler for re-use later.</span>
            <span class="token comment">//</span>
            <span class="token comment">// See https://github.com/netty/netty/issues/8343.</span>
            task<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>else 分支内封装了一个 WriteTask 对象来执行，WriteTask 是一个 Runable 对象。具体后续配合出站缓冲区分析。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本篇分析了 Channel、ChannelHandler、ChannelHandlerContext、ChannelPipeline 之间的关系，已经入站事件和出站事件是如何传播的。</p><ul><li>每个 Channel 都有一个自己的 ChannelPipeline；</li><li>每个 ChannelPipeline 都是一个双向链表，链表上的节点类型是 ChannelHandlerContext，每个节点中封装一个 ChannelHandler；</li></ul><p>ChannelHandlerContext 主要负责事件的传播，而 ChannelHandler 主要处理事件的逻辑处理。两者各司其职，符合单一职责的思想。用户只需要关注 ChannelHandler 中的事件业务逻辑处理，无需关注事件是如何传播的。</p>`,155),r=[d];function v(m,b){return s(),a("div",null,r)}const y=n(k,[["render",v],["__file","17-Netty管道机制.html.vue"]]);export{y as default};
