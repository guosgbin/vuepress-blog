import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as o,b as t,e as a,d as p,f as n}from"./app-c5a35b28.js";const c="/assets/image-20240107234840946-2628cc98.png",d="/assets/image-20240108000723582-75f60672.png",r="/assets/image-20240228180127627-2e4315f7.png",u="/assets/image-20240228180645798-10291a66.png",x="/assets/image-20240228181205615-d6f07bc5.png",g="/assets/image-20240229101309255-37af16f3.png",m="/assets/image-20240228191329029-e4226e05.png",k="/assets/image-20240228190934916-3abc8865.png",h={},b=n('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年12月19日22:36:22</td></tr></tbody></table><h2 id="现象" tabindex="-1"><a class="header-anchor" href="#现象" aria-hidden="true">#</a> 现象</h2><p>最近公司做服务拆分，抽出一个业务拆分出来单独部署。在晚高峰时候，新服务的服务器的『系统平均负载』很高，对应监控指标就会报警，但是『 CPU 的使用率』并不是很高。</p><img src="'+c+'" alt="image-20240107234840946" style="zoom:67%;">',4),v=t("p",null,"ps. 我们的服务器是 24 核 CPU 的，报警指标的阈值是 24 * 0.7 ≈ 17 。",-1),f={href:"https://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html",target:"_blank",rel:"noopener noreferrer"},y=n('<p>发现报警之后，点到控制台查看一小时内的服务器的监控信息如下：</p><img src="'+d+`" alt="image-20240108000723582" style="zoom:67%;"><p>可以看到，CPU 使用率不高、内存也充足、磁盘相关指标也正常，没有突发流量。</p><h2 id="负载相关知识" tabindex="-1"><a class="header-anchor" href="#负载相关知识" aria-hidden="true">#</a> 负载相关知识</h2><p>Linux的负载高，主要是由于 CPU 使用、内存使用、IO 消耗三部分构成。任意一项使用过多，都将导致服务器负载的急剧攀升。比如说<strong>带宽不足、内存不足、CPU 负载过高、硬盘满了这些都可能会导致服务器负载变高。</strong></p><p>可以使用 uptime 命令和 top 命令查看当前系统的负载，以 uptime 为例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /proc/loadavg
<span class="token number">8.51</span> <span class="token number">7.64</span> <span class="token number">7.96</span> <span class="token number">4</span>/29438 <span class="token number">7761</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>每列代表的含义依次为 ：1 分钟平均 load、5 分钟平均 load、15 分钟平均 load、cpu 队列中的任务数/总任务数、最后一次运行的进程或线程 id；</p><p><strong>load飙高一般有三种情况</strong></p><ol><li>cpu 使用率高，load 值高，有状态为 R 的进程 <ol><li>说明任务都是 cpu 密集型的，都在等待着 cpu，这种情况下说明 cpu 负载很高。</li></ol></li><li>cpu 使用率不高，load 值高，有状态为 D 的进程 <ol><li>这种情况会发现进程状态为 D，说明任务为 IO 密集型的任务，都在等待 IO，这种情况下要检查 IO 设备。</li></ol></li><li>cpu 使用率高，load 值高，系统中既有 R 状态又有 D 状态的进程 <ol><li>这种情况就不好判断 cpu 负载了，但是存在 D 状态的任务，就说明 IO 操作出现了阻塞，要关注一下 IO 设备情况了；cpu 负载需要排查了 D 状态进程问题后再去判断；</li></ol></li></ol><h2 id="排查方向" tabindex="-1"><a class="header-anchor" href="#排查方向" aria-hidden="true">#</a> 排查方向</h2><p>晚高峰进入一台服务器查看 CPU 的使用率，观察一段时间后发现 CPU 飙升的现象。</p><img src="`+r+`" alt="image-20240228180127627" style="zoom:67%;"><p>分析服务中线程 cpu 使用率</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 实时查询java进行下线程
top -Hp 23180
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>分析 java 进程中最耗性能的线程</p><img src="`+u+'" alt="image-20240228180645798" style="zoom:80%;"><p>因为现在是晚高峰，如果查看线程可能会导致服务卡顿造成超时。所以要等第二天上午，在观察查看具体的线程</p><ol><li>登录上面机器</li><li>导出线程日志</li><li>执行命令：jcmd 5045 Thread.print &gt; thread23180</li></ol><p>查看具体工作线程名称，来判断是哪个业务导致：</p><table><thead><tr><th style="text-align:left;">机器ip</th><th style="text-align:left;">线程号</th><th style="text-align:left;">16进制</th><th style="text-align:left;">线程name</th><th style="text-align:left;">对应java线程</th></tr></thead><tbody><tr><td style="text-align:left;"></td><td style="text-align:left;">18984</td><td style="text-align:left;">4a28</td><td style="text-align:left;">xxxxxx-weibo</td><td style="text-align:left;"><img src="'+x+'" alt="image-20240228181205615" style="zoom:80%;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">26618</td><td style="text-align:left;">67fa</td><td style="text-align:left;"></td><td style="text-align:left;">无</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">10259</td><td style="text-align:left;">2813</td><td style="text-align:left;"></td><td style="text-align:left;">无</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">....</td><td style="text-align:left;">.....</td><td style="text-align:left;"></td><td style="text-align:left;">无</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">18912</td><td style="text-align:left;">49e0</td><td style="text-align:left;">xxxxxx-weibo</td><td style="text-align:left;"><img src="'+g+`" alt="image-20240229101309255"></td></tr></tbody></table><p>大部分线程 id 已经在当前运行中线程找不到了</p><p>定位一下上面的线程池的定义：（脱敏了）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadPoolExecutor</span> xxxxxxWeibo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutorTraceId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">10l</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token class-name">StatLog</span><span class="token punctuation">.</span><span class="token function">registerExecutor</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxx-weibo&quot;</span><span class="token punctuation">,</span> threadPoolExecutorSendMsg2Weibo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看两台服务器这个线程池的一天使用情况：</p><p>服务器 1：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2023-12-20 23:59:56:366  Thread-20 ERROR debug_stat - xxxxxx-weibo{队列任务堆积：0;完成任务数：1934717;总任务数：1934719;活跃线程数：2;历史最大活跃线程数：282;历史最大线程数：282;核心线程数：2}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器 2：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2023-12-20 23:59:59:512  Thread-20 ERROR debug_stat - xxxxxx-weibo{队列任务堆积：0;完成任务数：2017654;总任务数：2017655;活跃线程数：1;历史最大活跃线程数：135;历史最大线程数：135;核心线程数：2}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>昨晚的线程今天早上大部分已经不存在了，可能因为是触发的最大线程数被回收。</p><p>存在的线程，可能是线程号被回收后由其他线程池创建，存在不准的情况。</p><p>继续分析，在晚高峰的时候实时查看线程：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jstack 12456 | grep 3358
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看了几台机器都是这个线程池</p><table><thead><tr><th style="text-align:left;">机器ip</th><th style="text-align:left;">线程号</th><th style="text-align:left;">16进制</th><th style="text-align:left;">线程name</th><th style="text-align:left;">对应java线程</th></tr></thead><tbody><tr><td style="text-align:left;"></td><td style="text-align:left;">17005</td><td style="text-align:left;">426d</td><td style="text-align:left;">xxxxxx-weibo</td><td style="text-align:left;">jstack 26055 | grep 426d <br>&quot;xxxxxx-weibo&quot;\` #18913 prio=5 os_prio=0 tid=0x00007f545801d800 nid=0x426d waiting on condition [0x00007f51d4c9c000]</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">17116</td><td style="text-align:left;">42dc</td><td style="text-align:left;">xxxxxx-weibo</td><td style="text-align:left;">jstack 26055 | grep 42dc <br>&quot;xxxxxx-weibo&quot;<code></code>#19023 prio=5 os_prio=0 tid=0x00007f52cc08f800 nid=0x42dc waiting on condition [0x00007f51bd766000]</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">17027</td><td style="text-align:left;">4283</td><td style="text-align:left;">xxxxxx-weibo</td><td style="text-align:left;">jstack 26055 | grep 4283 <br>&quot;xxxxxx-weibo&quot;<code></code>#18936 prio=5 os_prio=0 tid=0x00007f54a8012800 nid=0x4283 waiting on condition [0x00007f51c9a72000]</td></tr></tbody></table><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>定位到这个 xxxxxx-weibo 线程池了，接下来分析为什么它会疯狂占用 CPU</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadPoolExecutor</span> xxxxxxWeibo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutorTraceId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">10l</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token class-name">StatLog</span><span class="token punctuation">.</span><span class="token function">registerExecutor</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxx-weibo&quot;</span><span class="token punctuation">,</span> threadPoolExecutorSendMsg2Weibo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记录某一时刻的线程池的状态</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2023-12-21 21:21:52:017  Thread-20 ERROR debug_stat - xxxxxx-weibo{队列任务堆积：0;完成任务数：914595;总任务数：914596;活跃线程数：1;历史最大活跃线程数：205;历史最大线程数：205;核心线程数：2}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>线程池最大300，并没有用满，任务数并不是很多，为什么如此耗 cpu、负载？</li><li>这个线程池的任务就是将自研 IM 消息通过普通的 http post 请求转发到微博。</li><li>可疑点：最大活跃205，观察其它线程池日志，一般监控很难抓到活跃中的线程数量。</li><li>排查线程池日志，发现【历史最大活跃线程数】大于 100 的有几个</li></ol><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h2><p>可能是由于频繁创建、销毁线程会导致系统负载、cpu增加。另外像这种高峰期任务数一直很多的情况下，创建线程池参数最大线程过期时间建议不低于一个小时；</p><p>xxxxxxWeibo 线程池参数调整如下：</p><ul><li>将核心线程数由 2 改为 20；</li><li>将线程超时时间由 10 秒改为 3600 秒；（理由是高峰期任务数一直很多的情况下最大线程过期时间应该调大一点，防止频繁的创建和销毁线程）</li></ul><p>优化前高峰期系统负载：</p><img src="`+m+'" alt="image-20240228191329029" style="zoom:80%;"><p>优化后高峰期系统负载：</p><img src="'+k+'" alt="image-20240228190934916" style="zoom:80%;"><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>频繁创建、销毁线程会导致系统负载、cpu增加。如果某些任务的数量在某个时间段数一直很多，这种情况最大线程的过期时间建议调大一点；</p>',51);function _(w,P){const s=l("ExternalLinkIcon");return i(),o("div",null,[b,t("blockquote",null,[v,t("p",null,[a("关于服务器的系统负载的解释可以看看阮一峰的这个文章："),t("a",f,[a("理解Linux系统负荷"),p(s)])])]),y])}const T=e(h,[["render",_],["__file","003-服务器CPU使用率较低但系统负载高.html.vue"]]);export{T as default};
