import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-6dab4fa1.js";const t={},p=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年06月26日23:58:48</td></tr></tbody></table><h2 id="回顾消息拉取流程" tabindex="-1"><a class="header-anchor" href="#回顾消息拉取流程" aria-hidden="true">#</a> 回顾消息拉取流程</h2><p>消费者消费 topic 的某个 queue，就会发送拉取消息 RPC 到 broker，消费者拿到 broker 返回的消息就会去消费了，这里看下从 broker 正常拉取到消息的分支。</p><p>org.apache.rocketmq.client.consumer.PullCallback#onSuccess 方法里的逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取本次拉取消息的第一条消息的 offset</span>
firstMsgOffset <span class="token operator">=</span> pullResult<span class="token punctuation">.</span><span class="token function">getMsgFoundList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">DefaultMQPushConsumerImpl</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConsumerStatsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incPullTPS</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        pullRequest<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pullResult<span class="token punctuation">.</span><span class="token function">getMsgFoundList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将服务器拉取的消息 list 加入到消费者本地的该 queue 的 processQueue 中</span>
<span class="token keyword">boolean</span> dispatchToConsume <span class="token operator">=</span> processQueue<span class="token punctuation">.</span><span class="token function">putMessage</span><span class="token punctuation">(</span>pullResult<span class="token punctuation">.</span><span class="token function">getMsgFoundList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 提交 &quot;消费任务&quot;</span>
<span class="token class-name">DefaultMQPushConsumerImpl</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>consumeMessageService<span class="token punctuation">.</span><span class="token function">submitConsumeRequest</span><span class="token punctuation">(</span>
        pullResult<span class="token punctuation">.</span><span class="token function">getMsgFoundList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        processQueue<span class="token punctuation">,</span>
        pullRequest<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        dispatchToConsume<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">DefaultMQPushConsumerImpl</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getPullInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DefaultMQPushConsumerImpl</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executePullRequestLater</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">,</span>
            <span class="token class-name">DefaultMQPushConsumerImpl</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getPullInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将更新过 pullRequest.nextOffset 字段的 pullRequest 对象，再次放到 pullMessageService 的队列中</span>
    <span class="token class-name">DefaultMQPushConsumerImpl</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executePullRequestImmediately</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这部分主要的逻辑就是将 broker 返回的所有消息存到本地消费快照队列 ProcessQueue 中，然后交给 ConsumeMessageService 消费服务去处理。</p><p>RocketMQ 中 ConsumeMessageService 分为两种，一种是并发消费 ConsumeMessageConcurrentlyService ，一种是顺序消费 ConsumeMessageOrderlyService。本篇分析并发消费的原理。</p><h2 id="并发消费服务简要分析" tabindex="-1"><a class="header-anchor" href="#并发消费服务简要分析" aria-hidden="true">#</a> 并发消费服务简要分析</h2><h3 id="字段分析" tabindex="-1"><a class="header-anchor" href="#字段分析" aria-hidden="true">#</a> 字段分析</h3><p>ConsumeMessageConcurrentlyService 类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 消费者实现对象，推模式实现类</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultMQPushConsumerImpl</span> defaultMQPushConsumerImpl<span class="token punctuation">;</span>
<span class="token comment">// 消费者门面对象 就是一个配置</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultMQPushConsumer</span> defaultMQPushConsumer<span class="token punctuation">;</span>
<span class="token comment">// 消息监听器（消息处理的逻辑再这里封装，这个 messageListener 由开发者自己实现，并注册到 defaultMQPushConsumer）</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageListenerConcurrently</span> messageListener<span class="token punctuation">;</span>
<span class="token comment">// 消费任务队列</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> consumeRequestQueue<span class="token punctuation">;</span>
<span class="token comment">// 消费任务线程池</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> consumeExecutor<span class="token punctuation">;</span>
<span class="token comment">// 消费者组</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">;</span>

<span class="token comment">// 调度线程池，用于延迟提交消费任务</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService<span class="token punctuation">;</span>
<span class="token comment">// 清理过期消息的任务的 线程池，15 分钟一次</span>
<span class="token comment">// 从服务器拉取到消息后，回调 pullBack 方法，先将消息放入 processQueue 中，然后把消息提交到消费线程池中执行</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> cleanExpireMsgExecutors<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>主要是 <code>MessageListenerConcurrently messageListener</code> 这个字段，这个是我们真正业务程序员需要实现的逻辑，也就是我们想要怎么消费消息；</li><li><code>ThreadPoolExecutor consumeExecutor</code>：因为是并发消费，所以是使用线程池异步提交任务去消费消息的；</li><li>其他的字段遇到时具体分析。</li></ul><h3 id="并发消费原理" tabindex="-1"><a class="header-anchor" href="#并发消费原理" aria-hidden="true">#</a> 并发消费原理</h3><p>从 broker 拉取到的消息，通过一些处理后会调用 ConsumeMessageConcurrentlyService#submitConsumeRequest 方法去将消息封装为一个 ConsumeRequest 对象，然后分批提交到线程池中去执行，因为是提交到线程池异步执行，这也就是并发消费的命名的由来。</p><p>看一下流程图：</p><p>TODO-KWOK</p><h2 id="并发消息源码分析" tabindex="-1"><a class="header-anchor" href="#并发消息源码分析" aria-hidden="true">#</a> 并发消息源码分析</h2><h3 id="封装任务到消费线程池" tabindex="-1"><a class="header-anchor" href="#封装任务到消费线程池" aria-hidden="true">#</a> 封装任务到消费线程池</h3><p>ConsumeMessageConcurrentlyService#submitConsumeRequest</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitConsumeRequest</span><span class="token punctuation">(</span>
    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">ProcessQueue</span> processQueue<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> messageQueue<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token keyword">boolean</span> dispatchToConsume<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此参数控制一个消费任务 可消费的消息数量，默认 1</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> consumeBatchSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getConsumeMessageBatchMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>msgs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> consumeBatchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// case:msgs内部的消息数 小于 consumeBatchSize，直接封装一个消费任务提交到消费线程池即可</span>
        <span class="token class-name">ConsumeRequest</span> consumeRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumeRequest</span><span class="token punctuation">(</span>msgs<span class="token punctuation">,</span> processQueue<span class="token punctuation">,</span> messageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>consumeExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>consumeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">submitConsumeRequestLater</span><span class="token punctuation">(</span>consumeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 分页提交</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> total <span class="token operator">&lt;</span> msgs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgThis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>consumeBatchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> consumeBatchSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> total<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">&lt;</span> msgs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    msgThis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msgs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">ConsumeRequest</span> consumeRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumeRequest</span><span class="token punctuation">(</span>msgThis<span class="token punctuation">,</span> processQueue<span class="token punctuation">,</span> messageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>consumeExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>consumeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// ....... 省略异常重试的处理 ......</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先分析下这个方法的入参：</p><ul><li><code>List&lt;MessageExt&gt; msgs</code>：从 broker 拉取到的一些消息，本次需要消费这些消息；</li><li><code>ProcessQueue processQueue</code>：此次消费的本地消费快照队列；</li><li><code>MessageQueue messageQueue</code>：此次消费的消息的队列信息；</li><li><code>boolean dispatchToConsume</code>：并发消费这里并没有使用，忽略这个；</li></ul><p>首先获取 consumeBatchSize 的值，默认值是 1，表示一个消费任务 ConsumeRequest 中只有 1 个消息。根据 consumeBatchSize 的值分为两种情况：</p><ul><li>如果从 broker 拉取的消息小于等于 consumeBatchSize，那么就封装一个 ConsumeRequest 消费任务去线程池；</li><li>如果从 broker 拉取的消息大于 consumeBatchSize，那么就分批提交多个 ConsumeRequest 消费任务区线程池；</li></ul><p>前面说了半天的 ConsumeRequest 对象，这个对象其实很简单，就是某次消费任务的信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ConsumeRequest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 分配该消费任务的消息</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">;</span>
    <span class="token comment">// 消息的处理队列</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ProcessQueue</span> processQueue<span class="token punctuation">;</span>
    <span class="token comment">// 消息队列</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> messageQueue<span class="token punctuation">;</span>
    
    <span class="token comment">// ...... 省略 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程池消费消息" tabindex="-1"><a class="header-anchor" href="#线程池消费消息" aria-hidden="true">#</a> 线程池消费消息</h3><h4 id="校验本地消费队列状态" tabindex="-1"><a class="header-anchor" href="#校验本地消费队列状态" aria-hidden="true">#</a> 校验本地消费队列状态</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 条件成立说明该 queue 经过 rbl 分配到其他 consumer 了，当前 consumer 不需要再去消费该 queue 的消息了</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>processQueue<span class="token punctuation">.</span><span class="token function">isDropped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;the message queue not be able to consume, because it&#39;s dropped. group={} {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ConsumeMessageConcurrentlyService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>consumerGroup<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="处理回退的消息" tabindex="-1"><a class="header-anchor" href="#处理回退的消息" aria-hidden="true">#</a> 处理回退的消息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">resetRetryAndNamespace</span><span class="token punctuation">(</span>msgs<span class="token punctuation">,</span> defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里先不分析消息回退的逻辑，下一篇详细分析。</p><h4 id="执行前置消息钩子函数" tabindex="-1"><a class="header-anchor" href="#执行前置消息钩子函数" aria-hidden="true">#</a> 执行前置消息钩子函数</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 消息消费前的钩子函数</span>
<span class="token class-name">ConsumeMessageContext</span> consumeMessageContext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ConsumeMessageConcurrentlyService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">hasHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    consumeMessageContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumeMessageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    consumeMessageContext<span class="token punctuation">.</span><span class="token function">setNamespace</span><span class="token punctuation">(</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    consumeMessageContext<span class="token punctuation">.</span><span class="token function">setConsumerGroup</span><span class="token punctuation">(</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    consumeMessageContext<span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    consumeMessageContext<span class="token punctuation">.</span><span class="token function">setMq</span><span class="token punctuation">(</span>messageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    consumeMessageContext<span class="token punctuation">.</span><span class="token function">setMsgList</span><span class="token punctuation">(</span>msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    consumeMessageContext<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ConsumeMessageConcurrentlyService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">executeHookBefore</span><span class="token punctuation">(</span>consumeMessageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有钩子函数就执行，没有就不执行了，扩展用的，不是核心逻辑。</p><h4 id="调用业务方具体消费函数" tabindex="-1"><a class="header-anchor" href="#调用业务方具体消费函数" aria-hidden="true">#</a> 调用业务方具体消费函数</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 消费开始时间</span>
<span class="token keyword">long</span> beginTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> hasException <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token class-name">ConsumeReturnType</span> returnType <span class="token operator">=</span> <span class="token class-name">ConsumeReturnType</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>msgs <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msgs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 设置每条消息的消费开始时间</span>
            <span class="token comment">// 清理过期消息的任务，会检查这个属性，判断是否消费超时</span>
            <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">setConsumeStartTimeStamp</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 参数 1：msgs，但是这个list不能被修改，添加，删除</span>
    <span class="token comment">// 参数 2：消费上下文，主要是控制消息消费失败时，消费延迟级别</span>
    <span class="token comment">// 返回该批消息的消费结果，即 CONSUME_SUCCESS (消费成功)，CONSUME_LATER (需要重新消费)</span>
    status <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>msgs<span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 异常处理 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 listener 就是我们业务方程序员需要实现的具体消费逻辑了，MessageListenerConcurrently、</p><h4 id="执行后置消费钩子函数" tabindex="-1"><a class="header-anchor" href="#执行后置消费钩子函数" aria-hidden="true">#</a> 执行后置消费钩子函数</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 消息后的钩子函数</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ConsumeMessageConcurrentlyService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">hasHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    consumeMessageContext<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    consumeMessageContext<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span> <span class="token operator">==</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ConsumeMessageConcurrentlyService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumerImpl<span class="token punctuation">.</span><span class="token function">executeHookAfter</span><span class="token punctuation">(</span>consumeMessageContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有钩子函数就执行，没有就不执行了，扩展用的，不是核心逻辑。</p><h4 id="消息消费后处理" tabindex="-1"><a class="header-anchor" href="#消息消费后处理" aria-hidden="true">#</a> 消息消费后处理</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processQueue<span class="token punctuation">.</span><span class="token function">isDropped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 正常走这里</span>

    <span class="token comment">// 处理消费结果</span>
    <span class="token comment">// 1.消费成功需要将 msgs从 pq 移除</span>
    <span class="token comment">// 2.消费失败，需要将消费失败的消息回退给服务器，并且将回退失败的消息（会将回退失败的消息从当前任务移除）再次提交消费任务，最后也就将 CR.msgs 从 pq 移除</span>
    <span class="token comment">// 3.更新消费进度</span>
    <span class="token class-name">ConsumeMessageConcurrentlyService</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processConsumeResult</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是 ConsumeMessageConcurrentlyService#processConsumeResult 方法，这个方法很简单，就不贴源码了，就简单分析下做了什么：</p><p>判断消息是否消费正常：</p><ul><li>当消息消费失败时，需要将消息回退到 broker，具体消息回退下一篇分析；</li><li>从 ProcessQueue 中删除已经消费的消息，无论是否成功消费都会移除；</li><li>更新 Consumer 端的本地消费进度；</li></ul>`,46),o=[p];function c(u,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","25-并发消费原理.html.vue"]]);export{r as default};
