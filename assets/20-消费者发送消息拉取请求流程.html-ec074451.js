import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-9568636d.js";const p="/assets/消费者封装拉取消息请求-c6927d69.png",e={},o=t(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年06月23日18:57:14</td></tr></tbody></table><h2 id="拉消息入口回顾" tabindex="-1"><a class="header-anchor" href="#拉消息入口回顾" aria-hidden="true">#</a> 拉消息入口回顾</h2><p>PullMessageService 内有个存放 PullRequest 的阻塞队列，当往这个队列添加 PullRequest 时，PullMessageService 就会调用 PullRequest 内的消费者组对应的消费者的 api 去 broker 拉取消息了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span> pullRequestQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 每执行一次业务逻辑，检测一下其运行状态，可以通过其他线程将 Stopped 设置为 true，从而停止该线程。</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 从 pullRequestQueue 中获取一个 PullRequest 消息拉取任务，</span>
            <span class="token comment">// 如果 pullRequestQueue 为空，则线程将阻塞，直到有拉取任务被放入。</span>
            <span class="token class-name">PullRequest</span> pullRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 调用 pullMessage 方法进行消息拉取。</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pullMessage</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Pull Message Service Run Method exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消息拉取" tabindex="-1"><a class="header-anchor" href="#消息拉取" aria-hidden="true">#</a> 消息拉取</h2><p>DefaultMQPushConsumerImpl#pullMessage，消息拉取的流程比较长，这里分步分析，主要就是 Consumer 封装拉取消息请求对象，向 broker 发送拉取消息的 RPC 请求；</p><p><img src="`+p+`" alt="消费者封装拉取消息请求"></p><h3 id="检查消费者状态" tabindex="-1"><a class="header-anchor" href="#检查消费者状态" aria-hidden="true">#</a> 检查消费者状态</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取拉消息队列再消费者端的快照队列</span>
<span class="token keyword">final</span> <span class="token class-name">ProcessQueue</span> processQueue <span class="token operator">=</span> pullRequest<span class="token punctuation">.</span><span class="token function">getProcessQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 条件成立说明该队列状态是删除状态（可能是 rbl 之后，被转移到其他消费者了），这里不再为该队列拉消息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>processQueue<span class="token punctuation">.</span><span class="token function">isDropped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;the pull request[{}] is dropped.&quot;</span><span class="token punctuation">,</span> pullRequest<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 设置本次拉消息的时间戳</span>
pullRequest<span class="token punctuation">.</span><span class="token function">getProcessQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLastPullTimestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检查当前消费者的状态</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeSureStateOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;pullMessage exception, consumer state not ok&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果当前消费者状态不是运行态，则拉消息任务延迟 3 秒后再执行</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executePullRequestLater</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">,</span> pullTimeDelayMillsWhenException<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 直接返回</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...... 省略 ......</span>
    <span class="token comment">// 如果消费者是暂停状态，则拉消息任务延迟 1 秒后再执行</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executePullRequestLater</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">,</span> <span class="token constant">PULL_TIME_DELAY_MILLS_WHEN_SUSPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是检验消费者自身的状态，和本地消费快照队列的状态。</p><h3 id="消费者流量控制" tabindex="-1"><a class="header-anchor" href="#消费者流量控制" aria-hidden="true">#</a> 消费者流量控制</h3><p>这部分主要是用作消费者的流量控制，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取消费者本地该 queue 快照内缓存的消息数量</span>
<span class="token keyword">long</span> cachedMessageCount <span class="token operator">=</span> processQueue<span class="token punctuation">.</span><span class="token function">getMsgCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取消费者本地该 queue 快照内缓存的消息容量大小 size</span>
<span class="token keyword">long</span> cachedMessageSizeInMiB <span class="token operator">=</span> processQueue<span class="token punctuation">.</span><span class="token function">getMsgSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 条件成立说明消费者本地快照内还有 1000（默认）条消息未被消费，本次拉消息请求将被延迟 50 毫秒</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>cachedMessageCount <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getPullThresholdForQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executePullRequestLater</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">,</span> <span class="token constant">PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ....... 省略日志打印 ......</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 条件成立说明消费者本地快照内还有 100 兆(默认)消息未被消费，本次拉消息请求将被延迟 50 毫秒</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>cachedMessageSizeInMiB <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getPullThresholdSizeForQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executePullRequestLater</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">,</span> <span class="token constant">PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ....... 省略日志打印 ......</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>consumeOrderly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 并发消费走这里</span>

    <span class="token comment">// 条件成立：说明 processQueue.getMaxSpan() 快照队列中的第一条消息和最后一条消息的差值，</span>
    <span class="token comment">// 大于流控限制 2000(默认)</span>
    <span class="token comment">// 注意：说明不了 processQueue 内有 2000 条消息，因为存在 broker 和客户端过滤逻辑</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>processQueue<span class="token punctuation">.</span><span class="token function">getMaxSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getConsumeConcurrentlyMaxSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executePullRequestLater</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">,</span> <span class="token constant">PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ....... 省略日志打印 ......</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// ....... 省略顺序消费的逻辑 ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先获取消费者本地消费快照 processQueue 中的已经拉取下来的<strong>消息个数</strong>和<strong>对应的消息大小 MiB</strong>；</li><li>根据 defaultMQPushConsumer 内配置做消息流控操作，流控操作主要就是将 pullRequest 对象延迟一小段时间再次添加到 PullMessageService 的阻塞队列中，然后直接退出；</li></ul><h3 id="获取-topic-订阅数据" tabindex="-1"><a class="header-anchor" href="#获取-topic-订阅数据" aria-hidden="true">#</a> 获取 topic 订阅数据</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取本次拉消息请求的 topic 的订阅数据</span>
<span class="token keyword">final</span> <span class="token class-name">SubscriptionData</span> subscriptionData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rebalanceImpl<span class="token punctuation">.</span><span class="token function">getSubscriptionInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 什么时候 null == subscriptionData ？</span>
<span class="token comment">// unsubscribe（主题）给删除了，这种情况下，该条件会成立</span>
<span class="token comment">// 最终 rbl 程序会对比订阅集合，将移除的订阅主题的 processQueue 的 dropped 状态设置为 true，然后该 queue 对应的 pullRequest 请求就会退出了</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> subscriptionData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 没找到该主题的订阅信息，本次拉消息请求将被延迟 3 秒钟</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executePullRequestLater</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">,</span> pullTimeDelayMillsWhenException<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;find the consumer&#39;s subscription failed, {}&quot;</span><span class="token punctuation">,</span> pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-pullcallback-对象" tabindex="-1"><a class="header-anchor" href="#创建-pullcallback-对象" aria-hidden="true">#</a> 创建 PullCallback 对象</h3><p>创建 PullCallback 对象，主要是用于处理从 broker 拉取下来的消息的，当 broker 响应一些消息给消费者的时候，就会回调这个 PullCallback 内的方法。这里先忽略，后面详细分析消息拉取后的处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PullCallback</span> pullCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PullCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">PullResult</span> pullResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...... 省略 ......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构建消息拉取系统标记" tabindex="-1"><a class="header-anchor" href="#构建消息拉取系统标记" aria-hidden="true">#</a> 构建消息拉取系统标记</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 是否提交消费者本地该队列的 offset</span>
<span class="token keyword">boolean</span> commitOffsetEnable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">// 该队列再消费者本地的 offset</span>
<span class="token keyword">long</span> commitOffsetValue <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span><span class="token constant">CLUSTERING</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getMessageModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取消息偏移量</span>
    commitOffsetValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetStore<span class="token punctuation">.</span><span class="token function">readOffset</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ReadOffsetType</span><span class="token punctuation">.</span><span class="token constant">READ_FROM_MEMORY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>commitOffsetValue <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        commitOffsetEnable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 过滤表达式</span>
<span class="token class-name">String</span> subExpression <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 是否是类过滤模式</span>
<span class="token keyword">boolean</span> classFilter <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">// 获取本次拉消息的请求的 topic 的订阅数据</span>
<span class="token class-name">SubscriptionData</span> sd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rebalanceImpl<span class="token punctuation">.</span><span class="token function">getSubscriptionInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">isPostSubscriptionWhenPull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sd<span class="token punctuation">.</span><span class="token function">isClassFilterMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        subExpression <span class="token operator">=</span> sd<span class="token punctuation">.</span><span class="token function">getSubString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    classFilter <span class="token operator">=</span> sd<span class="token punctuation">.</span><span class="token function">isClassFilterMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 构建拉消息的 flag</span>
<span class="token keyword">int</span> sysFlag <span class="token operator">=</span> <span class="token class-name">PullSysFlag</span><span class="token punctuation">.</span><span class="token function">buildSysFlag</span><span class="token punctuation">(</span>
    commitOffsetEnable<span class="token punctuation">,</span> <span class="token comment">// commitOffset</span>
    <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// suspend</span>
    subExpression <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// subscription</span>
    classFilter <span class="token comment">// class filter</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是</p><ul><li>读取消费者本地的消费进度；</li><li>获取当前消费者的 topic 的订阅信息；</li><li>构建消息拉取系统标记，这个会发送到 broker，broker 会做对应处理；</li></ul><h3 id="调用-pullapiwrapper-的-api-拉取消息" tabindex="-1"><a class="header-anchor" href="#调用-pullapiwrapper-的-api-拉取消息" aria-hidden="true">#</a> 调用 PullAPIWrapper 的 API 拉取消息</h3><p>PullAPIWrapper#pullKernelImpl，各个字段的含义写在注释中了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>pullAPIWrapper<span class="token punctuation">.</span><span class="token function">pullKernelImpl</span><span class="token punctuation">(</span>
    pullRequest<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 从那个消息队列拉取消息</span>
    subExpression<span class="token punctuation">,</span> <span class="token comment">// 消息过滤表达式</span>
    subscriptionData<span class="token punctuation">.</span><span class="token function">getExpressionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 消息表达式类型，分为 tag，sql92</span>
    subscriptionData<span class="token punctuation">.</span><span class="token function">getSubVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 客户端版本</span>
    pullRequest<span class="token punctuation">.</span><span class="token function">getNextOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 本次拉消息的 offset（重要）</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getPullBatchSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 本次拉消息的最大消息条数，默认 32</span>
    sysFlag<span class="token punctuation">,</span> <span class="token comment">// 拉取系统标记</span>
    commitOffsetValue<span class="token punctuation">,</span> <span class="token comment">// 消费者本地该队列的消费进度，（内存中的）</span>
    <span class="token constant">BROKER_SUSPEND_MAX_TIME_MILLIS</span><span class="token punctuation">,</span> <span class="token comment">// 控制服务器端长轮询时最长 hold 的时间，默认是 15 秒</span>
    <span class="token constant">CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND</span><span class="token punctuation">,</span> <span class="token comment">// 消息拉取的 rpc 超时时间</span>
    <span class="token class-name">CommunicationMode</span><span class="token punctuation">.</span><span class="token constant">ASYNC</span><span class="token punctuation">,</span> <span class="token comment">// rpc调用模式，异步同步等，默认是异步拉取</span>
    pullCallback <span class="token comment">// 从 broker 拉取消息结果回调处理对象</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 PullAPIWrapper#pullKernelImpl 其实就是封装 RPC 请求对象，然后 RPC 请求 broker，请求拉取消息。</p><p>因为是异步 RPC 的方式，所以我们得看下它接收到 broker 端的响应后会做什么处理。在 MQClientAPIImpl#pullMessageAsync 方法中，会在 broker 响应之后封装响应为 PullResult 对象，然后调用我们前面创建的 PullCallback#onSuccess 方法去处理了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>remotingClient<span class="token punctuation">.</span><span class="token function">invokeAsync</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> request<span class="token punctuation">,</span> timeoutMillis<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvokeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
        * 调用时机，服务器响应客户端之后
        */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ResponseFuture</span> responseFuture<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> responseFuture<span class="token punctuation">.</span><span class="token function">getResponseCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">PullResult</span> pullResult <span class="token operator">=</span> <span class="token class-name">MQClientAPIImpl</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processPullResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">assert</span> pullResult <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token comment">// 将 pullResult 交给 拉消息结果处理回调对象</span>
                pullCallback<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>pullResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token comment">// ...... 省略异常情况 ......</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...... 省略异常情况 ......</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体拉取到消息后如何处理后续分析</p>`,31),c=[o];function l(u,i){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","20-消费者发送消息拉取请求流程.html.vue"]]);export{d as default};
