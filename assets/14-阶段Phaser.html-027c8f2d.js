import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as p}from"./app-2cb45ef8.js";const t="/assets/13-Phaser的分层-f4b6214a.png",e="/assets/13-Phaser的state同步状态示意图-b01914ed.png",o="/assets/14-Phaser的arriveAndAwaitAdvance流程图-0615e8d5.png",c={},l=p('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年09月25日00:35:53</td></tr></tbody></table><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Phaser 是 JDK7 新加的类，提供了一些类似 CountDownLatch 和 CyclicBarrier 的功能，这两个同步组件能实现的，Phaser 都能实现。</p><h2 id="phaser-的一些概念" tabindex="-1"><a class="header-anchor" href="#phaser-的一些概念" aria-hidden="true">#</a> Phaser 的一些概念</h2><ul><li><strong>parties（参与者）</strong>：和 CountDownLatch 和 CyclicBarrier 的构造方法的参数的含义差不多，<strong>就是参与的线程</strong>。CyclicBarrier 的参与者的个数在构造方法中指定之后，就不能再改变了。而 Phaser 的参与者的个数可以在构造方法中指定之外，还可以随时注册和注销；</li><li><strong>register（注册）/ deregister（注销）</strong>：调用注册系列的方法就是通知 Phaser 当前参与者的个数增加了。调用注销类型的方法就是通知当前 Phaser 的参与者个数减少了；</li><li><strong>phase（阶段）</strong>：表示执行任务的阶段，初始值是 0，当加到 Integer.MAX_VALUE 时就重新到 0 计算。</li><li><strong>arrive（到达）/advance（进阶）</strong>：arrive 就是某个参与者到达屏障的意思。advance 就是当所有参与者都到达了屏障，阶段（phase）就发生进阶，其实就是阶段（phase）加 1。</li><li><strong>termination（终止状态）</strong>：代表当前 Phaser 已经终止了。</li><li><strong>tiering（分层）</strong>：当一个Phaser有大量参与者（parties）的时候，内部的同步操作会使性能急剧下降，而分层可以降低竞争，从而减小因同步导致的额外开销。 <ul><li>子 Phaser 的 parties 线程可以有多个，但是对于父 Phaser 来说就只视为一个；</li><li>只有子 Phaser 的所有参与者都达到屏障后，才会通知父 Phaser 当前子 Phaser 已经到达；</li><li>只有子 Phaser 的所有参与者都注销后，才会向父 Phaser 注销当前子 Phaser；</li><li>无论是父子 Phaser 共用的都是 root Phaser 的奇偶队列；</li></ul></li></ul><p><img src="'+t+`" alt="13-Phaser的分层"></p><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><h3 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1" aria-hidden="true">#</a> 案例 1</h3><p>可以使用 Phaser 代替 CountDownLatch 来作为开关，让多个线程在某个时刻同时执行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Runnable</span> task1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;晓明在煮饭...&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Runnable</span> task2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;冈冈在洗菜...&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Runnable</span> task3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;炸雷在煲汤...&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">,</span> task3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">runTasks</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;完毕&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 执行任务
 */</span>
<span class="token keyword">void</span> <span class="token function">runTasks</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1&quot; to register self</span>
    <span class="token comment">// create and start threads</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Runnable</span> task <span class="token operator">:</span> tasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// await all creation</span>
            task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;为了更明显，这里等待 1 秒...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 等待所有线程准备就绪，就继续向下执行</span>
    phaser<span class="token punctuation">.</span><span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>为了更明显，这里等待 1 秒...
完毕1664035934424
晓明在煮饭...1664035934424
冈冈在洗菜...1664035934424
炸雷在煲汤...1664035934424
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例-2" tabindex="-1"><a class="header-anchor" href="#案例-2" aria-hidden="true">#</a> 案例 2</h3><p>CyclicBarrier 能在每次循环最后执行一个 Runnable 任务，Phaser 也可以实现类似的功能，需要重写 Phaser#onAdvance 方法。</p><p>下面的案例是重写 Phaser#onAdvance 方法，让 Phaser 只执行三个阶段。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Runnable</span> task1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;晓明在煮饭...&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Runnable</span> task2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;冈冈在洗菜...&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">Runnable</span> task3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;炸雷在煲汤...&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">,</span> task3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 重复执行 3 次</span>
    <span class="token function">startTasks</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">startTasks</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> iterations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 返回 true 表示需要停止 phaser</span>
        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">onAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">,</span> <span class="token keyword">int</span> registeredParties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;=====[phase=%s]=====[parties=%s]=====\\n&quot;</span><span class="token punctuation">,</span> phase<span class="token punctuation">,</span> registeredParties<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> phase <span class="token operator">&gt;=</span> iterations <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> registeredParties <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Runnable</span> task <span class="token operator">:</span> tasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>phaser<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    phaser<span class="token punctuation">.</span><span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// deregister self, don&#39;t wait</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>晓明在煮饭...1664036093841
冈冈在洗菜...1664036093842
炸雷在煲汤...1664036093842
=====[phase=0]=====[parties=3]=====
炸雷在煲汤...1664036093844
冈冈在洗菜...1664036093844
晓明在煮饭...1664036093844
=====[phase=1]=====[parties=3]=====
晓明在煮饭...1664036093845
炸雷在煲汤...1664036093845
冈冈在洗菜...1664036093845
=====[phase=2]=====[parties=3]=====
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="phaser-的分层案例" tabindex="-1"><a class="header-anchor" href="#phaser-的分层案例" aria-hidden="true">#</a> Phaser 的分层案例</h3><p>利用Phaser的分层来实现高并发时的优化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> iterations <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">onAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">,</span> <span class="token keyword">int</span> registeredParties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;=====[phase=%s]=====[parties=%s]=====\\n&quot;</span><span class="token punctuation">,</span> phase<span class="token punctuation">,</span> registeredParties<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> phase <span class="token operator">&gt;=</span> iterations <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> registeredParties <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Task</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tasks<span class="token punctuation">.</span>length<span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tasks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 执行任务</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 每个 Phaser 最多三个参与者</span>
<span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TASKS_PER_PHASER</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 每个 Phaser 最多分 3 个任务
 */</span>
<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Task</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tasks<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">,</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo <span class="token operator">&lt;</span> <span class="token constant">TASKS_PER_PHASER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> hi<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>
            tasks<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hi<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token constant">TASKS_PER_PHASER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token constant">TASKS_PER_PHASER</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Phaser</span> subPhaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>
                tasks<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>subPhaser<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// assumes new Task(ph) performs ph.register()</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><h3 id="同步状态" tabindex="-1"><a class="header-anchor" href="#同步状态" aria-hidden="true">#</a> 同步状态</h3><p>既然有 Phaser 有这么多概念，那么就需要字段来存储这些数据。</p><p>Phaser 中使用一个 long 类型的变量来保存 Phaser 的状态，按照不同的位划分区域，代表不同的含义。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> state<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于这个 state 的解释如下：</p><ul><li>unarrived：未到达屏障的参与者的个数 (bits 0-15)；</li><li>parties：总参与者（需要等待的参与者）的个数 (bits 16-31)；</li><li>phase：当前阶段 (bits 32-62)；</li><li>terminated：屏障终止标志 (bit 63 / sign)；</li></ul><p><img src="`+e+`" alt="13-Phaser的state同步状态示意图"></p><p>既然用一个状态表示这么多信息，那肯定少不了位运算了，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 最多的参与者个数 65535</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>  <span class="token constant">MAX_PARTIES</span>     <span class="token operator">=</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
<span class="token comment">// 最多 PHASE 个数，int 最大值</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>  <span class="token constant">MAX_PHASE</span>       <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
<span class="token comment">// 参与者个数位移数</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>  <span class="token constant">PARTIES_SHIFT</span>   <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token comment">// PHASE 个数位移数</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>  <span class="token constant">PHASE_SHIFT</span>     <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
<span class="token comment">// 用于计算未到达的参与者数目</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>  <span class="token constant">UNARRIVED_MASK</span>  <span class="token operator">=</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>      <span class="token comment">// to mask ints</span>
<span class="token comment">// 用于计算参与者数目</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">PARTIES_MASK</span>    <span class="token operator">=</span> <span class="token number">0</span>xffff0000L<span class="token punctuation">;</span> <span class="token comment">// to mask longs</span>
<span class="token comment">// counts的掩码，counts等于参与者数和未完成的参与者数的&#39;|&#39;操作</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">COUNTS_MASK</span>     <span class="token operator">=</span> <span class="token number">0</span>xffffffffL<span class="token punctuation">;</span>
<span class="token comment">// 表示屏障终止的标志位</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">TERMINATION_BIT</span> <span class="token operator">=</span> <span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">63</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一些特殊值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// some special values</span>
<span class="token comment">// 一个参与者到达</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>  <span class="token constant">ONE_ARRIVAL</span>     <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 一个参与者</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>  <span class="token constant">ONE_PARTY</span>       <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">PARTIES_SHIFT</span><span class="token punctuation">;</span>
<span class="token comment">// 注销一个参与者</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>  <span class="token constant">ONE_DEREGISTER</span>  <span class="token operator">=</span> <span class="token constant">ONE_ARRIVAL</span><span class="token operator">|</span><span class="token constant">ONE_PARTY</span><span class="token punctuation">;</span>
<span class="token comment">// 初始值</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span>  <span class="token constant">EMPTY</span>           <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h3><p>Phaser 有四个构造方法，最终都会调用到下面这个</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> parties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parties <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PARTIES_SHIFT</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment">// 超过了 65535 个</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal number of parties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始状态阶段是 0</span>
    <span class="token keyword">int</span> phase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置根节点</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> root <span class="token operator">=</span> parent<span class="token punctuation">.</span>root<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token comment">// 共用父节点的奇偶无锁栈</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>evenQ <span class="token operator">=</span> root<span class="token punctuation">.</span>evenQ<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>oddQ <span class="token operator">=</span> root<span class="token punctuation">.</span>oddQ<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parties <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// 假如参与者不是 0，则向父 Phaser 注册一个参与者，注意这里是 1 个</span>
            phase <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根节点设置为自己</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token comment">// 偶数栈</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>evenQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 奇数栈</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>oddQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 初始化 Phaser 的 state</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span>parties <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token constant">EMPTY</span> <span class="token operator">:</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>phase <span class="token operator">&lt;&lt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">|</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>parties <span class="token operator">&lt;&lt;</span> <span class="token constant">PARTIES_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">|</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>parties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于不分层的 Phaser 来说，就是设置根节点和奇偶栈，然后初始化 Phaser 的 state 字段。</p><p>对于分层的 Phaser，则需要拿父级 Phaser 的 root 作为自己的 root，并且共用根节点的奇偶栈，假如子 Phaser 的参与者的个数不是 0，那么需要向父 Phaser 注册一个参与者。</p><p>也就是说，无论子 Phaser 有多少个参与者，它只会向父 Phaser 注册一个参与者，代表自己。</p><p>需要注意的是，假如没有设置参与者梳理 parties 的值，默认是特殊值 EMPTY，其实就是 1。TODO-KWOK 为什么这么设计？</p><h3 id="栈节点-qnode" tabindex="-1"><a class="header-anchor" href="#栈节点-qnode" aria-hidden="true">#</a> 栈节点 QNode</h3><p>这里主要分析栈节点的属性，方法在后面用到了再分析。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">QNode</span> <span class="token keyword">implements</span> <span class="token class-name">ForkJoinPool<span class="token punctuation">.</span>ManagedBlocker</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>
    <span class="token comment">// 当前节点所处的屏障 Phaser 阶段</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> phase<span class="token punctuation">;</span>
    <span class="token comment">// 当前等待节点封装的线程是否可被中断，true-可被中断</span>
    <span class="token keyword">final</span> <span class="token keyword">boolean</span> interruptible<span class="token punctuation">;</span>
    <span class="token comment">// 当前等待节点是否支持等待超时，true-支持</span>
    <span class="token keyword">final</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">;</span>
    <span class="token comment">// 当前等待节点线程在等待的过程中是否被中断过的标记，true-被中断过了</span>
    <span class="token keyword">boolean</span> wasInterrupted<span class="token punctuation">;</span>
    <span class="token comment">// 当前等待节点等待的超时时间</span>
    <span class="token keyword">long</span> nanos<span class="token punctuation">;</span>
    <span class="token comment">// 当前等待节点等待的超时的时间点</span>
    <span class="token keyword">final</span> <span class="token keyword">long</span> deadline<span class="token punctuation">;</span>
    <span class="token comment">// 当前等待节点的线程，可能为空，当前节点被取消等待</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span> <span class="token comment">// nulled to cancel wait</span>
    <span class="token comment">// 由于QNode是个链表，当前等待节点的下一等待节点</span>
    <span class="token class-name">QNode</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注册一个或多个参与者" tabindex="-1"><a class="header-anchor" href="#注册一个或多个参与者" aria-hidden="true">#</a> 注册一个或多个参与者</h3><p>在 Phaser 中可以在构造方法中指定参与者的个数，除此之外还可以调用 register、bulkRegiste来增加参与者的个数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 注册单个参与者到 phaser</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注册多个参与者到 phaser</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">bulkRegister</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parties <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parties <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">doRegister</span><span class="token punctuation">(</span>parties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终都是调用的 doRegister 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token keyword">int</span> registrations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// adjustment to state</span>
    <span class="token comment">// 这里相当于 parties 和 unarrived 都加了 registrations</span>
    <span class="token keyword">long</span> adjust <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>registrations <span class="token operator">&lt;&lt;</span> <span class="token constant">PARTIES_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">|</span> registrations<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Phaser</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
    <span class="token keyword">int</span> phase<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> state <span class="token operator">:</span> <span class="token function">reconcileState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> counts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">;</span>
        <span class="token comment">// 位移获取 parties 和 unarrived</span>
        <span class="token keyword">int</span> parties <span class="token operator">=</span> counts <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PARTIES_SHIFT</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> unarrived <span class="token operator">=</span> counts <span class="token operator">&amp;</span> <span class="token constant">UNARRIVED_MASK</span><span class="token punctuation">;</span>
        <span class="token comment">// 检查参与者个数是否有溢出</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>registrations <span class="token operator">&gt;</span> <span class="token constant">MAX_PARTIES</span> <span class="token operator">-</span> parties<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token function">badRegister</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        phase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 不是第一个参与者</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>counts <span class="token operator">!=</span> <span class="token constant">EMPTY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment">// not 1st registration</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">reconcileState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// unarrived 等于 0 说明当前阶段正在执行 onAdvance() 方法，等待其执行完毕</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>unarrived <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token comment">// wait out advance</span>
                    root<span class="token punctuation">.</span><span class="token function">internalAwaitAdvance</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 否则就修改 state 的值，增加 adjust，如果成功就跳出循环</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span>
                                                   s<span class="token punctuation">,</span> s <span class="token operator">+</span> adjust<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 是第一个参与者</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 1st root registration</span>
            <span class="token comment">// 计算 state 的值</span>
            <span class="token keyword">long</span> next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>phase <span class="token operator">&lt;&lt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">|</span> adjust<span class="token punctuation">;</span>
            <span class="token comment">// 修改 state 的值，如果成功就跳出循环</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 多层级阶段的处理方式</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">// 1st sub registration</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">// recheck under lock</span>
                    phase <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token comment">// finish registration whenever parent registration</span>
                    <span class="token comment">// succeeded, even when racing with termination,</span>
                    <span class="token comment">// since these are part of the same &quot;transaction&quot;.</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span>compareAndSwapLong
                           <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> s<span class="token punctuation">,</span>
                            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>phase <span class="token operator">&lt;&lt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">|</span> adjust<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        s <span class="token operator">=</span> state<span class="token punctuation">;</span>
                        phase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>state <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// assert (int)s == EMPTY;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> phase<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先就是开启一个自旋，总共有三个分支：</p><p>CASE1：调用 register 方法注册的是该 Phaser 的第一个参与者</p><ul><li>假如当前阶段的 unarrived 是 0，说明当前 Phaser 的所有参与者都到达屏障了，需要等待 onAdvance() 方法执行完毕（等待的具体实现后面分析）；</li><li>假如当前阶段的 unarrived 不是 0，尝试 CAS 更新 state 值，更新成功则跳出自旋，否则继续自旋；</li></ul><p>CASE2：调用 register 方法注册的不是该 Phaser 的第一个参与者，直接尝试更新 state 值；</p><p>CASE3：说明当前注册的 Phaser 是一个子 Phaser，需要向父 Phaser 注册一个参与者，代表自己；</p><h3 id="arrive-参与者到达屏障" tabindex="-1"><a class="header-anchor" href="#arrive-参与者到达屏障" aria-hidden="true">#</a> arrive 参与者到达屏障</h3><p>这个方法就是表示当前参与者已经到达屏障处了，但是不会阻塞当前线程。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">arrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">doArrive</span><span class="token punctuation">(</span><span class="token constant">ONE_ARRIVAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Phaser#doArrive</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">doArrive</span><span class="token punctuation">(</span><span class="token keyword">int</span> adjust<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Phaser</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">?</span> state <span class="token operator">:</span> <span class="token function">reconcileState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取当前阶段数</span>
        <span class="token keyword">int</span> phase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> phase<span class="token punctuation">;</span>
        <span class="token keyword">int</span> counts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">;</span>
        <span class="token comment">// 获取当前阶段还有多少参与者未到达屏障</span>
        <span class="token keyword">int</span> unarrived <span class="token operator">=</span> <span class="token punctuation">(</span>counts <span class="token operator">==</span> <span class="token constant">EMPTY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>counts <span class="token operator">&amp;</span> <span class="token constant">UNARRIVED_MASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>unarrived <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token function">badArrive</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 尝试 CAS 更新 state, 其实就是尝试将 unarrived 减 1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token operator">-=</span>adjust<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// unarrived == 1 说明当前参与者是最后一个到达屏障的</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>unarrived <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 组装下一个阶段的 state</span>
                <span class="token keyword">long</span> n <span class="token operator">=</span> s <span class="token operator">&amp;</span> <span class="token constant">PARTIES_MASK</span><span class="token punctuation">;</span>  <span class="token comment">// base of next state</span>
                <span class="token keyword">int</span> nextUnarrived <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PARTIES_SHIFT</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 调用子类可重写的 onAdvance 方法</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onAdvance</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> nextUnarrived<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        n <span class="token operator">|=</span> <span class="token constant">TERMINATION_BIT</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nextUnarrived <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token comment">// unarrived 的初始值是 1</span>
                        n <span class="token operator">|=</span> <span class="token constant">EMPTY</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span>
                        n <span class="token operator">|=</span> nextUnarrived<span class="token punctuation">;</span>
                    <span class="token comment">// 阶段 phase 加 1</span>
                    <span class="token keyword">int</span> nextPhase <span class="token operator">=</span> <span class="token punctuation">(</span>phase <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token constant">MAX_PHASE</span><span class="token punctuation">;</span>
                    n <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>nextPhase <span class="token operator">&lt;&lt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">;</span>
                    <span class="token comment">// CAS 更新 state 值</span>
                    <span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 移除节点并唤醒线程</span>
                    <span class="token function">releaseWaiters</span><span class="token punctuation">(</span>phase<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nextUnarrived <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// propagate deregistration</span>
                    phase <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">doArrive</span><span class="token punctuation">(</span><span class="token constant">ONE_DEREGISTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span>
                                              s<span class="token punctuation">,</span> s <span class="token operator">|</span> <span class="token constant">EMPTY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                    phase <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">doArrive</span><span class="token punctuation">(</span><span class="token constant">ONE_ARRIVAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> phase<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Phaser#doArrive 方法就是开启一个自旋尝试更新 state 的值，更新成功就会退出自旋。</p><p>假如当前线程是最后一个参与者，则会去组装下一个阶段的 state 值。</p><ol><li>假如当前 Phaser 是 root 的话，就会先调用 Phaser#onAdvance 方法判断 Phaser 是否需要终止，然后 CAS 更新 state，最后唤醒在奇偶栈中阻塞的线程；</li><li>假如当前 Phaser 是子 Phaser 的话， <ol><li>下个阶段的参与者个数是 0 的话，则向父级 Phaser 注销自己，然后更新自己的 state。</li><li>下个阶段的参与者大于 0 的话，则向父级 Phaser 注册自己，注意这里是注册的 1 个，这里也说明了，子 Phaser 的所有参与者都到达后，只会向父级 Phaser 注册 1 个。</li></ol></li></ol><h3 id="arriveandderegister-到达并注销" tabindex="-1"><a class="header-anchor" href="#arriveandderegister-到达并注销" aria-hidden="true">#</a> arriveAndDeregister 到达并注销</h3><p>这个方法和 arrive 方法调用的都是 Phaser#doArrive 方法，只是入参不一样。</p><p>arriveAndDeregister 表示当前参与者到达屏障，并且注销自己，这个方法也不会阻塞当前线程。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">doArrive</span><span class="token punctuation">(</span><span class="token constant">ONE_DEREGISTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="awaitadvance-等待所有参与者到达" tabindex="-1"><a class="header-anchor" href="#awaitadvance-等待所有参与者到达" aria-hidden="true">#</a> awaitAdvance 等待所有参与者到达</h3><p>一般先调用 arrive 或者 arriveAndDeregister 后，再调用该方法等待所有参与者到达屏障。</p><p>需要调用 Phaser#internalAwaitAdvance 方法去等待，这个方法后面讲解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">awaitAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Phaser</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token comment">// 获取 state</span>
    <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">?</span> state <span class="token operator">:</span> <span class="token function">reconcileState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取当前 phaser 的阶段值</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> phase<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> phase<span class="token punctuation">)</span>
        <span class="token comment">// 等待 onAdvance() 方法执行完毕</span>
        <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">internalAwaitAdvance</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arriveandawaitadvance-到达并等待其他参与者" tabindex="-1"><a class="header-anchor" href="#arriveandawaitadvance-到达并等待其他参与者" aria-hidden="true">#</a> arriveAndAwaitAdvance 到达并等待其他参与者</h3><p>这个方法的功能有点类似 CyclicBarrier 的 await 方法。</p><p>这个方法的功能等效于调用 <code>awaitAdvance(arrive())</code>。其实这个方法的流程和 doArrive 方法的基本上一样，区别就是假如当前参与者不是最后一个，则会调用 Phaser#internalAwaitAdvance 阻塞等待所有参与者到达。</p><p>这个方法并不支持中断和超时，假如需要支持中断和超时可以使用 Phaser#awaitAdvanceInterruptibly(int) 或者 Phaser#awaitAdvanceInterruptibly(int, long, TimeUnit) 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Specialization of doArrive+awaitAdvance eliminating some reads/paths</span>
    <span class="token keyword">final</span> <span class="token class-name">Phaser</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// state的值</span>
        <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">?</span> state <span class="token operator">:</span> <span class="token function">reconcileState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 phase</span>
        <span class="token keyword">int</span> phase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> phase<span class="token punctuation">;</span>
        <span class="token keyword">int</span> counts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">;</span>
        <span class="token comment">// 获取 unarrived</span>
        <span class="token keyword">int</span> unarrived <span class="token operator">=</span> <span class="token punctuation">(</span>counts <span class="token operator">==</span> <span class="token constant">EMPTY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>counts <span class="token operator">&amp;</span> <span class="token constant">UNARRIVED_MASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>unarrived <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token function">badArrive</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// CAS 尝试更新 unarrived 的值，将其减1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s <span class="token operator">-=</span> <span class="token constant">ONE_ARRIVAL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>unarrived <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token comment">// 说明当前线程不是最后一个到达的线程，等待onAdvance()方法执行完毕</span>
                <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">internalAwaitAdvance</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> parent<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取参与者的数量</span>
            <span class="token keyword">long</span> n <span class="token operator">=</span> s <span class="token operator">&amp;</span> <span class="token constant">PARTIES_MASK</span><span class="token punctuation">;</span>  <span class="token comment">// base of next state</span>
            <span class="token comment">// 获取下一个阶段的 unarrived 的值</span>
            <span class="token keyword">int</span> nextUnarrived <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PARTIES_SHIFT</span><span class="token punctuation">;</span>
            <span class="token comment">// 调用子类可重写的 onAdvance 方法</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onAdvance</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> nextUnarrived<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 置为终止状态</span>
                n <span class="token operator">|=</span> <span class="token constant">TERMINATION_BIT</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nextUnarrived <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                n <span class="token operator">|=</span> <span class="token constant">EMPTY</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token comment">// n 加上unarrived的值</span>
                n <span class="token operator">|=</span> nextUnarrived<span class="token punctuation">;</span>
            <span class="token comment">// 下一个阶段等待当前阶段加 1</span>
            <span class="token keyword">int</span> nextPhase <span class="token operator">=</span> <span class="token punctuation">(</span>phase <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token constant">MAX_PHASE</span><span class="token punctuation">;</span>
            <span class="token comment">// n 加上下一阶段的值</span>
            n <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>nextPhase <span class="token operator">&lt;&lt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">;</span>
            <span class="token comment">// 修改state的值为n</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>state <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// terminated</span>
            <span class="token comment">// 唤醒其它参与者并进入下一个阶段</span>
            <span class="token function">releaseWaiters</span><span class="token punctuation">(</span>phase<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> nextPhase<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="等待的核心方法" tabindex="-1"><a class="header-anchor" href="#等待的核心方法" aria-hidden="true">#</a> 等待的核心方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">internalAwaitAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">,</span> <span class="token class-name">QNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// assert root == this;</span>
    <span class="token comment">// 保证旧的队列为空，其实就是移除并唤醒之前的节点</span>
    <span class="token function">releaseWaiters</span><span class="token punctuation">(</span>phase<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// ensure old queue clean</span>
    <span class="token keyword">boolean</span> queued <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token comment">// true when node is enqueued</span>
    <span class="token keyword">int</span> lastUnarrived <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// to increase spins upon change</span>
    <span class="token comment">// 自旋的次数</span>
    <span class="token keyword">int</span> spins <span class="token operator">=</span> <span class="token constant">SPINS_PER_ARRIVAL</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> s<span class="token punctuation">;</span>     <span class="token comment">// 当前循环的 state</span>
    <span class="token keyword">int</span> p<span class="token punctuation">;</span>      <span class="token comment">// 当前循环的 phase</span>
    <span class="token comment">// 检查当前阶段是否变化，如果变化了说明进入下一个阶段了，这时候就没有必要自旋了</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> phase<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// spinning in noninterruptible mode</span>
            <span class="token comment">// 未完成的参与者数量</span>
            <span class="token keyword">int</span> unarrived <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s <span class="token operator">&amp;</span> <span class="token constant">UNARRIVED_MASK</span><span class="token punctuation">;</span>
            <span class="token comment">// unarrived 有变化，增加自旋次数</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>unarrived <span class="token operator">!=</span> lastUnarrived <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>lastUnarrived <span class="token operator">=</span> unarrived<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">NCPU</span><span class="token punctuation">)</span>
                spins <span class="token operator">+=</span> <span class="token constant">SPINS_PER_ARRIVAL</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 自旋次数完了，则新建一个节点，记录当前线程是否被中断</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted <span class="token operator">||</span> <span class="token operator">--</span>spins <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// need node to record intr</span>
                node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> phase<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                node<span class="token punctuation">.</span>wasInterrupted <span class="token operator">=</span> interrupted<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">isReleasable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// done or aborted</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queued<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// push onto queue</span>
            <span class="token comment">// 节点入队列</span>
            <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QNode</span><span class="token punctuation">&gt;</span></span> head <span class="token operator">=</span> <span class="token punctuation">(</span>phase <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> evenQ <span class="token operator">:</span> oddQ<span class="token punctuation">;</span>
            <span class="token class-name">QNode</span> q <span class="token operator">=</span> node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> q<span class="token punctuation">.</span>phase <span class="token operator">==</span> phase<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>state <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">==</span> phase<span class="token punctuation">)</span> <span class="token comment">// avoid stale enq</span>
                queued <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 当前线程进入阻塞状态，等待被唤醒</span>
                <span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span><span class="token function">managedBlock</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>wasInterrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 置空节点中的线程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>thread <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            node<span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token comment">// avoid need for unpark()</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>wasInterrupted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>interruptible<span class="token punctuation">)</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> phase <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>state <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">PHASE_SHIFT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> phase<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">abortWait</span><span class="token punctuation">(</span>phase<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// possibly clean up on abort</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 唤醒当前阶段阻塞着的线程</span>
    <span class="token function">releaseWaiters</span><span class="token punctuation">(</span>phase<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法一般是某个参与者需要在某个地方等待所有参与者到达屏障。下面分析下这个方法的流程。</p><ol><li>调用 Phaser#releaseWaiters 移除并唤醒上一个阶段 phase 阻塞的节点；</li><li>开启自旋，自旋的判断条件是检查当前 Phaser 的阶段是否发生变化： <ol><li>CASE1 (node == null)：根据 unarrived 数量是否发生变化，来决定是否增加自旋次数。 然后创建一个新的节点；</li><li>CASE2 (node.isReleasable())：根据是否支持超时和中断等，来判断是否可退出自旋；</li><li>CASE3 (!queued)：需要将节点入队，根据 Phaser 阶段的奇偶性，选择一个队列入队；</li><li>CASE4：调用 ForkJoinPool#managedBlock 方法阻塞当前线程，这里会根据 QNode 的QNode#isReleasable 和 QNode#block 方法决定是否阻塞当前线程。</li></ol></li><li>退出循环，说明当前线程阻塞被唤醒了，也可能压根就没有阻塞，假如节点存在就做一些处理。最后唤醒当前阶段队列中阻塞的其他线程。</li></ol><h3 id="qnode-的两个方法" tabindex="-1"><a class="header-anchor" href="#qnode-的两个方法" aria-hidden="true">#</a> QNode 的两个方法</h3><p>这两个方法主要在 ForkJoinPool#managedBlock 方法中调用，而 ForkJoinPool#managedBlock 方法是在 Phaser#internalAwaitAdvance 的自旋中调用的。</p><p>我们看下 ForkJoinPool#managedBlock 的代码，省略了部分</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">managedBlock</span><span class="token punctuation">(</span><span class="token class-name">ManagedBlocker</span> blocker<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ForkJoinPool</span> p<span class="token punctuation">;</span>
        <span class="token class-name">ForkJoinWorkerThread</span> wt<span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">ForkJoinWorkerThread</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
           <span class="token comment">// 省略...</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>blocker<span class="token punctuation">.</span><span class="token function">isReleasable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                         <span class="token operator">!</span>blocker<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 else 分支里面就是一个 do...while 循环，里面的条件就是 QNode 中的两个方法。</p><ul><li>ForkJoinPool.ManagedBlocker#isReleasable：返回 true 表示不需要阻塞当前线程；</li><li>ForkJoinPool.ManagedBlocker#block：尝试阻塞当前线程，返回 true 表示不需要阻塞当前线程；</li></ul><p>下面看 QNode 中这两个方法的实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isReleasable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 不是当前阶段不阻塞了</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> phase<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 当前线程被中断了，赋值中断标记</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        wasInterrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 假如当前线程被中断了，而且当前线程封装的节点允许中断，那么就会返回 true</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>wasInterrupted <span class="token operator">&amp;&amp;</span> interruptible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 支持超时的判断</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&gt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReleasable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timed<span class="token punctuation">)</span>
        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&gt;</span> <span class="token number">0L</span><span class="token punctuation">)</span>
        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">isReleasable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p><img src="`+o+'" alt="14-Phaser的arriveAndAwaitAdvance流程图"></p>',88),i=[l];function u(k,r){return s(),a("div",null,i)}const m=n(c,[["render",u],["__file","14-阶段Phaser.html.vue"]]);export{m as default};
