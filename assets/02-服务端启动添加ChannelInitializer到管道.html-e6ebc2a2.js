import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-9ad286f1.js";const t="/assets/image-20230510001214877-71e1d6b0.png",p="/assets/image-20230510212544467-b810be50.png",l={},c=e(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2022年3月8日08:47:52</td></tr><tr><td>V2</td><td>增加图片</td><td>2022年03月16日15:08:42</td></tr><tr><td>V3</td><td>重构内容</td><td>2023年05月10日21:36:49</td></tr></tbody></table><h2 id="服务端启动流程回顾" tabindex="-1"><a class="header-anchor" href="#服务端启动流程回顾" aria-hidden="true">#</a> 服务端启动流程回顾</h2><p>接着上篇文章：在创建完 ServerBootstrap 对象后，会调到 AbstractBootstrap#initAndRegister 方法中，反射创建好 Channel 后，会调 ServerBootstrap#init 方法，该方法的实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置自定义的option</span>
    <span class="token function">setChannelOptions</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token function">newOptionsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置自定义的attribute</span>
    <span class="token function">setAttributes</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token function">newAttributesArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取已经分配的服务端的Pipeline管道</span>
    <span class="token class-name">ChannelPipeline</span> p <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 其实就是再Demo里的workGroup</span>
    <span class="token keyword">final</span> <span class="token class-name">EventLoopGroup</span> currentChildGroup <span class="token operator">=</span> childGroup<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">ChannelHandler</span> currentChildHandler <span class="token operator">=</span> childHandler<span class="token punctuation">;</span>
    <span class="token comment">// 客户端Socket选项</span>
    <span class="token keyword">final</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChannelOption</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> currentChildOptions <span class="token operator">=</span> <span class="token function">newOptionsArray</span><span class="token punctuation">(</span>childOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 客户端的Attribute参数</span>
    <span class="token keyword">final</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttributeKey</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> currentChildAttrs <span class="token operator">=</span> <span class="token function">newAttributesArray</span><span class="token punctuation">(</span>childAttrs<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 再服务端管道后面添加一个ChannelInitializer</span>
    <span class="token comment">// ChannelInitializer本身不是一个Handler，只是通过Adapter实现了Handler接口</span>
    <span class="token comment">// 它存在的意义，就是为了延迟初始化Pipeline</span>
    <span class="token comment">// 目前管道是这个样子 head &lt;--&gt; ChannelInitializer &lt;--&gt; tail</span>
    p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个initChannel会在 io.netty.channel.ChannelInitializer.handlerAdded处调用</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">ChannelPipeline</span> pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获得服务端配置的Handler</span>
            <span class="token class-name">ChannelHandler</span> handler <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            ch<span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 参数1：服务端Channel</span>
                    <span class="token comment">// 参数2：worket线程组</span>
                    <span class="token comment">// 参数3：初始化客户端channel的Handler</span>
                    <span class="token comment">// 参数4：参数</span>
                    <span class="token comment">// 参数5：参数</span>
                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;开始添加ServerBootstrapAcceptor...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerBootstrapAcceptor</span><span class="token punctuation">(</span>
                            ch<span class="token punctuation">,</span> currentChildGroup<span class="token punctuation">,</span> currentChildHandler<span class="token punctuation">,</span> currentChildOptions<span class="token punctuation">,</span> currentChildAttrs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心代码就是向 Pipeline 中添加一个匿名对象 ChannelInitializer。</p><h2 id="channelinitializer类继承体系" tabindex="-1"><a class="header-anchor" href="#channelinitializer类继承体系" aria-hidden="true">#</a> ChannelInitializer类继承体系</h2><p>ChannelInitializer 类继承体系如下：</p><img src="`+t+`" alt="image-20230510001214877" style="zoom:50%;"><p>可以看到它是一个入站处理器。</p><h2 id="channelpipeline添加处理器简要分析" tabindex="-1"><a class="header-anchor" href="#channelpipeline添加处理器简要分析" aria-hidden="true">#</a> ChannelPipeline添加处理器简要分析</h2><p>沿着调用链最终会调到 DefaultChannelPipeline#addLast(EventExecutorGroup, String, ChannelHandler) 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ChannelPipeline</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">EventExecutorGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> newCtx<span class="token punctuation">;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查是否可以多个线程使用这个Handler    @Sharable</span>
        <span class="token function">checkMultiplicity</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

        newCtx <span class="token operator">=</span> <span class="token function">newContext</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token function">filterName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将newCtx放到Head和tail之间</span>
        <span class="token function">addLast0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// If the registered is false it means that the channel was not registered on an eventLoop yet.</span>
        <span class="token comment">// In this case we add the context to the pipeline and add a task that will call</span>
        <span class="token comment">// ChannelHandler.handlerAdded(...) once the channel is registered.</span>
        <span class="token comment">// 如果 registered是false则表示Channel还未注册到EventLoop上去</span>
        <span class="token comment">// 此时会添加ctx到pipeline，然后添加一个任务去ChannelHandler.handlerAdded(...)</span>
        <span class="token comment">// 由于此时Channel和EventLoop还未绑定, 所以会创建一个任务到pendingHandlerCallbackHead单链表中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registered<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newCtx<span class="token punctuation">.</span><span class="token function">setAddPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 添加一个任务</span>
            <span class="token function">callHandlerCallbackLater</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 执行到这里，说明添加的ChannelHanddler已经完成了注册</span>
        <span class="token class-name">EventExecutor</span> executor <span class="token operator">=</span> newCtx<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">callHandlerAddedInEventLoop</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">callHandlerAdded0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面分析这个方法在服务端启动时添加 ChannelInitializer 时的流程：</p><ul><li><code>addLast0(newCtx)</code>：将 ChannelInitializer 封装成一个 AbstractChannelHandlerContext 对象添加到管道中，也就是 HeadContext 和 TailContext 之间；</li><li>关于 registered 属性， <ul><li>服务端启动流程中添加 ChannelInitializer 到管道的时候，此时服务端启动流程肯定没有走完，Channel 和 EventLoop 还没有绑定，换句话说走到这里 registered 属性是 false；</li><li>因为 registered 是 false，所以需要调用 DefaultChannelPipeline#callHandlerCallbackLater 方法将添加 ChannelInitializer 到管道封装成一个任务，添加到一个单链表中；</li><li>等待 Channel 和 EventLoop 绑定成功后，就会去消费单链表中的任务了。也就是在 AbstractUnsafe#register0 方法中的 <code>pipeline.invokeHandlerAddedIfNeeded()</code> 代码去处理的；</li></ul></li></ul><h2 id="添加任务到单链表" tabindex="-1"><a class="header-anchor" href="#添加任务到单链表" aria-hidden="true">#</a> 添加任务到单链表</h2><p>前面已经说过，添加任务到链表是在 DefaultChannelPipeline#callHandlerCallbackLater 方法中做的，看下具体实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 入队操作
     *
     * <span class="token keyword">@param</span> <span class="token parameter">ctx</span>
     * <span class="token keyword">@param</span> <span class="token parameter">added</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">callHandlerCallbackLater</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token keyword">boolean</span> added<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">assert</span> <span class="token operator">!</span>registered<span class="token punctuation">;</span>

        <span class="token class-name">PendingHandlerCallback</span> task <span class="token operator">=</span> added <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">PendingHandlerAddedTask</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">PendingHandlerRemovedTask</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 单向链表 存储这些task对象  PendingHandlerCallback</span>
        <span class="token class-name">PendingHandlerCallback</span> pending <span class="token operator">=</span> pendingHandlerCallbackHead<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pending <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pendingHandlerCallbackHead <span class="token operator">=</span> task<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// Find the tail of the linked-list.</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>pending<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pending <span class="token operator">=</span> pending<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            pending<span class="token punctuation">.</span>next <span class="token operator">=</span> task<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到非常简单，就是将添加 ChannelInitializer 到管道中视为一个任务，存到 DefaultChannelPipeline 的 pendingHandlerCallbackHead 属性中了，组成一个单向链表。</p><h2 id="channel-注册完成后消费任务" tabindex="-1"><a class="header-anchor" href="#channel-注册完成后消费任务" aria-hidden="true">#</a> Channel 注册完成后消费任务</h2><p>在上一篇分析的启动流程中，会调用到 AbstractUnsafe#register0 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">register0</span><span class="token punctuation">(</span><span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// ... 省略其他流程......</span>
                
                <span class="token keyword">boolean</span> firstRegistration <span class="token operator">=</span> neverRegistered<span class="token punctuation">;</span>
                <span class="token comment">// 模板方法-子类实现</span>
                <span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 表示不是第一次实现</span>
                neverRegistered <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token comment">// 表示当前Channel已经注册到Selector了</span>
                registered <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

                pipeline<span class="token punctuation">.</span><span class="token function">invokeHandlerAddedIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// ... 省略其他流程......</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// ... 省略异常处理逻辑......</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，当调用 doRegister() 方法后，Channel 就已经注册到 Selector 上去了，此时就会调用 DefaultChannelPipeline 的 invokeHandlerAddedIfNeeded 方法去消费单向链表中的任务了。</p><p>最后会调到 DefaultChannelPipeline#callHandlerAddedForAllHandlers 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">callHandlerAddedForAllHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">PendingHandlerCallback</span> pendingHandlerCallbackHead<span class="token punctuation">;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">assert</span> <span class="token operator">!</span>registered<span class="token punctuation">;</span>

        <span class="token comment">// This Channel itself was registered.</span>
        registered <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token comment">// 拿到单链表的头结点</span>
        pendingHandlerCallbackHead <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pendingHandlerCallbackHead<span class="token punctuation">;</span>
        <span class="token comment">// Null out so it can be GC&#39;ed.</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pendingHandlerCallbackHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// This must happen outside of the synchronized(...) block as otherwise handlerAdded(...) may be called while</span>
    <span class="token comment">// holding the lock and so produce a deadlock if handlerAdded(...) will try to add another handler from outside</span>
    <span class="token comment">// the EventLoop.</span>
    <span class="token class-name">PendingHandlerCallback</span> task <span class="token operator">=</span> pendingHandlerCallbackHead<span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;遍历pendingHandlerCallbackHead单链表，拿到任务去执行任务...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        task <span class="token operator">=</span> task<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法其实就是遍历 pendingHandlerCallbackHead 单链表，拿到任务去执行任务。</p><p>绕来绕去，最后会调用 ChannelInitializer#handlerAdded 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;调用ChannelInitializer的handlerAdded方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// This should always be true with our current DefaultChannelPipeline implementation.</span>
        <span class="token comment">// The good thing about calling initChannel(...) in handlerAdded(...) is that there will be no ordering</span>
        <span class="token comment">// surprises if a ChannelInitializer will add another ChannelInitializer. This is as all handlers</span>
        <span class="token comment">// will be added in the expected order.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">initChannel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// We are done with init the Channel, removing the initializer now.</span>
            <span class="token function">removeState</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initMap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Guard against re-entrance.</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">C</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Explicitly call exceptionCaught(...) as we removed the handler before calling initChannel(...).</span>
            <span class="token comment">// We do so to prevent multiple calls to initChannel(...).</span>
            <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">ChannelPipeline</span> pipeline <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 将自己从ChannelPipeline中删除</span>
                pipeline<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ChannelInitializer#initChannel(ChannelHandlerContext) 方法中，可以看到调用了 ChannelInitializer#initChannel(Channel) 方法，这个方法就是走到了 ServerBootstrap#init 中的 ChannelInitializer 的匿名实现中，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 省略部分......</span>

    <span class="token comment">// 再服务端管道后面添加一个ChannelInitializer</span>
    <span class="token comment">// ChannelInitializer本身不是一个Handler，只是通过Adapter实现了Handler接口</span>
    <span class="token comment">// 它存在的意义，就是为了延迟初始化Pipeline</span>
    <span class="token comment">// 目前管道是这个样子 head &lt;--&gt; ChannelInitializer &lt;--&gt; tail</span>
    p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个initChannel会在 io.netty.channel.ChannelInitializer.handlerAdded处调用</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">ChannelPipeline</span> pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获得服务端配置的Handler</span>
            <span class="token class-name">ChannelHandler</span> handler <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            ch<span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 参数1：服务端Channel</span>
                    <span class="token comment">// 参数2：worket线程组</span>
                    <span class="token comment">// 参数3：初始化客户端channel的Handler</span>
                    <span class="token comment">// 参数4：参数</span>
                    <span class="token comment">// 参数5：参数</span>
                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;开始添加ServerBootstrapAcceptor...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerBootstrapAcceptor</span><span class="token punctuation">(</span>
                        ch<span class="token punctuation">,</span> currentChildGroup<span class="token punctuation">,</span> currentChildHandler<span class="token punctuation">,</span> currentChildOptions<span class="token punctuation">,</span> currentChildAttrs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是向管道添加了一个配置的 ChannelHandler 和一个 ServerBootstrapAcceptor 的特殊处理器。(ServerBootstrapAcceptor 这个特殊的处理器是在服务端接收客户端的连接的时候使用的，后续分析)</p><p>在调用完模板方法 ChannelInitializer#initChannel 后，会在ChannelInitializer#initChannel(ChannelHandlerContext) 方法中将当前 ChannelInitializer 从管道移除。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>ChannelInitializer 是一个特殊的 ChannelInboundHandler，在创建服务端或客户端时，通常会使用它来设置消息处理器和其他必要的管道组件。例如，在服务端上，可以将该处理器用于设置新连接的初始处理程序。</p><p>本篇主要分析服务端启动流程中，向管道中添加 ChannelInitializer，注册完成后又将 ChannelInitializer 从管道移除的过程。</p><p>简要流程是：</p><ul><li>向管道添加 ChannelInitializer，封装成一个对象，添加到管道中的 HeadContext 和 TailContext 之间；</li><li>等待 Channel 注册到 Selector 上后，就会调用抽象方法 ChannelInitializer#initChannel(C) 的实现，最后将 ChannelInitializer 封装后的对象从管道中移除；</li></ul><p>下面是 ChannelInitializer 处理的完整流程：</p><img src="`+p+'" alt="image-20230510212544467">',38),i=[c];function o(u,d){return s(),a("div",null,i)}const v=n(l,[["render",o],["__file","02-服务端启动添加ChannelInitializer到管道.html.vue"]]);export{v as default};
